// Generated from "nullability/defaultnotnullable/TypeArgumentsInference.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nullability.defaultnotnullable

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNullabilityDefaultnotnullableTypeArgumentsInference", swiftName = "NullabilityDefaultnotnullableTypeArgumentsInference", exact = true)
open class TypeArgumentsInference {
 @ObjCName(name = "J2ktNullabilityDefaultnotnullableTypeArgumentsInferenceCompanion", swiftName = "NullabilityDefaultnotnullableTypeArgumentsInferenceCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "wildcardPair")
  fun <K> wildcardPair(): TypeArgumentsInference.Pair<K, *> {
   return TypeArgumentsInference.Pair<K, Any>()
  }

  @JvmStatic
  @ObjCName(name = "pairIdentity")
  fun <K, V> pairIdentity(
   @ObjCName(name = "withNullabilityDefaultnotnullableTypeArgumentsInference_Pair") pair: TypeArgumentsInference.Pair<K, V>
  ): TypeArgumentsInference.Pair<K, V> {
   return pair
  }

  @JvmStatic
  @ObjCName(name = "wildcardPairAndIdentity")
  fun <K> wildcardPairAndIdentity(): TypeArgumentsInference.Pair<K, *> {
   return TypeArgumentsInference.pairIdentity<K, Any>(
    TypeArgumentsInference.wildcardPair<K>() as TypeArgumentsInference.Pair<K, Any>,
   )
  }
 }

 @ObjCName(name = "J2ktNullabilityDefaultnotnullableTypeArgumentsInference_Pair", swiftName = "NullabilityDefaultnotnullableTypeArgumentsInference_Pair", exact = true)
 class Pair<K, V>
}
