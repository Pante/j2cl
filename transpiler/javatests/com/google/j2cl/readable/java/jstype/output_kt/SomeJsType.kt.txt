// Generated from "jstype/SomeJsType.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package jstype

import javaemul.lang.*
import java.lang.Double
import jsinterop.annotations.JsIgnore
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJstypeSomeJsType", swiftName = "JstypeSomeJsType", exact = true)
@JsType
open class SomeJsType<T> {
 @JvmField
 @ObjCName(name = "publicField_")
 var publicField: Int = 0

 private var privateField: Int = 0

 @JvmField
 internal var packageField_pp_jstype: Int = 0

 @JvmField
 @ObjCName(name = "protectedField_")
 @JsIgnore
 var protectedField: Int = 0

 @ObjCName(name = "publicMethod")
 open fun publicMethod() {}

 private fun privateMethod() {}

 internal open fun packageMethod_pp_jstype() {}

 @ObjCName(name = "protectedMethod")
 @JsIgnore
 open fun protectedMethod() {}

 @ObjCName(name = "useFieldsAndMethods")
 open fun useFieldsAndMethods() {
  val value: Int = this.publicField + this.privateField + this.packageField_pp_jstype + this.protectedField
  this.publicMethod()
  this.privateMethod()
  this.packageMethod_pp_jstype()
  this.protectedMethod()
 }

 private fun testStarAndWildCard(s: SomeJsType.Star?, w: SomeJsType.Wildcard?): SomeJsType.Wildcard? {
  val `object`: Any = Any()
  val star: SomeJsType.Star = Double.valueOf(3.0) as SomeJsType.Star
  return star as SomeJsType.Wildcard?
 }

 @ObjCName(name = "J2ktJstypeSomeJsType_Star", swiftName = "JstypeSomeJsType_Star", exact = true)
 @JsType(name = "*", namespace = JsPackage.GLOBAL, isNative = true)
 interface Star

 @ObjCName(name = "J2ktJstypeSomeJsType_Wildcard", swiftName = "JstypeSomeJsType_Wildcard", exact = true)
 @JsType(name = "?", namespace = JsPackage.GLOBAL, isNative = true)
 interface Wildcard
}
