// Generated from "typeannotations/TypeAnnotations.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package typeannotations

import javaemul.lang.*
import java.util.ArrayList
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import typeannotations.ParametricType

@ObjCName(name = "J2ktTypeannotationsAbstractType", swiftName = "TypeannotationsAbstractType", exact = true)
abstract class AbstractType internal constructor(): ParametricType<AbstractType?>

@ObjCName(name = "J2ktTypeannotationsAbstractTypeNonNull", swiftName = "TypeannotationsAbstractTypeNonNull", exact = true)
abstract class AbstractTypeNonNull internal constructor(): ParametricType<AbstractType>

@ObjCName(name = "J2ktTypeannotationsParent", swiftName = "TypeannotationsParent", exact = true)
open class Parent internal constructor() {
 @ObjCName(name = "m")
 open fun m(
  @ObjCName(name = "withNSString") s: String,
  @ObjCName(name = "withTypeannotationsParent") c: Parent?
 ): Parent? {
  return c
 }

 @ObjCName(name = "m")
 open fun m(
  @ObjCName(name = "withJavaUtilList") l: MutableList<String>?,
  @ObjCName(name = "withTypeannotationsParent") c: Parent?
 ): MutableList<Parent>? {
  return ArrayList<Parent>()
 }
}

@ObjCName(name = "J2ktTypeannotationsChildWithNullableParent", swiftName = "TypeannotationsChildWithNullableParent", exact = true)
open class ChildWithNullableParent internal constructor(): Parent(), ParametricType<Parent?>

@ObjCName(name = "J2ktTypeannotationsChildWithNonNullableParent", swiftName = "TypeannotationsChildWithNonNullableParent", exact = true)
open class ChildWithNonNullableParent internal constructor(): Parent(), ParametricType<Parent>

@ObjCName(name = "J2ktTypeannotationsTypeAnnotations", swiftName = "TypeannotationsTypeAnnotations", exact = true)
open class TypeAnnotations {
 @ObjCName(name = "J2ktTypeannotationsTypeAnnotationsCompanion", swiftName = "TypeannotationsTypeAnnotationsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "main")
  fun main() {
   val list: MutableList<String>? = ArrayList<String>()
  }
 }
}
