// Generated from "lambdas/Lambdas.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package lambdas

import javaemul.lang.*
import java.lang.Integer
import java.lang.Long
import java.lang.RuntimeException
import java.lang.Void
import javaemul.lang.MutableIterableJvm
import jsinterop.annotations.JsFunction
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Double
import kotlin.Enum
import kotlin.Error
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Throwable
import kotlin.collections.MutableIterable
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.let
import kotlin.native.ObjCName

@ObjCName("J2ktLambdasLambdas", swiftName = "LambdasLambdas", exact = true)
open class Lambdas {
 @JvmField
 @ObjCName("field_")
 var field: Int = 100

 @ObjCName("call")
 open fun call(
  @ObjCName("withLambdasLambdas_FunctionalInterface", swiftName = "with") intf: FunctionalInterface?,
  @ObjCName("withInt", swiftName = "with") n: Int
 ): Int {
  return this.field + intf!!.m(n)
 }

 @ObjCName("testLambdaExpressionStyle")
 open fun testLambdaExpressionStyle() {
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface i + 1
   },
   10,
  )
 }

 @ObjCName("testLambdaBlockStyle")
 open fun testLambdaBlockStyle() {
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface i + 2
   },
   10,
  )
 }

 @ObjCName("testLambdaCaptureField")
 open fun testLambdaCaptureField() {
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface this.field + i + 1
   },
   10,
  )
 }

 @ObjCName("testLambdaCaptureLocal")
 open fun testLambdaCaptureLocal() {
  val x: Int = 1
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface x + i + 1
   },
   10,
  )
 }

 @ObjCName("testLambdaCaptureFieldAndLocal")
 open fun testLambdaCaptureFieldAndLocal() {
  val x: Int = 1
  this.call(
   FunctionalInterface { i: Int ->
    val y: Int = 1
    return@FunctionalInterface x + y + this.field + i + 1
   },
   10,
  )
 }

 @ObjCName("funOuter")
 open fun funOuter() {}

 @ObjCName("testLambdaCallOuterFunction")
 open fun testLambdaCallOuterFunction() {
  this.call(
   FunctionalInterface { i: Int ->
    this.funOuter()
    this.funOuter()
    this@Lambdas.funOuter()
    return@FunctionalInterface i + 2
   },
   10,
  )
 }

 @ObjCName("testNestedLambdas")
 open fun testNestedLambdas() {
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface this.call(
     FunctionalInterface { j: Int ->
      return@FunctionalInterface j
     },
     20,
    )
   },
   10,
  )
 }

 @ObjCName("testReturnLabelNameConflictKotlin")
 open fun testReturnLabelNameConflictKotlin() {
  this.call(
   FunctionalInterface { i: Int ->
    return@FunctionalInterface i
   },
   10,
  )
 }

 @ObjCName("testInstanceMethodTypeVariableThroughLambda")
 open fun <T> testInstanceMethodTypeVariableThroughLambda() {
  val wrapped: Functional<T> = Functional/* <T> */ { f: Functional<T>? ->
   return@Functional object : Functional<T> {
    override fun wrap(f: Functional<T>?): Functional<T>? {
     return null
    }
   }
  }
 }

 @ObjCName("callWithTypeVariable")
 open fun <T> callWithTypeVariable(
  @ObjCName("withLambdasLambdas_GenericFunctionalInterface", swiftName = "with") intf: GenericFunctionalInterface<T>?,
  @ObjCName("withId") e: T
 ): T {
  return intf!!.m(e)
 }

 @ObjCName("callParameterized")
 open fun callParameterized(
  @ObjCName("withLambdasLambdas_GenericFunctionalInterface", swiftName = "with") intf: GenericFunctionalInterface<Error?>?,
  @ObjCName("withJavaLangError", swiftName = "with") e: Error?
 ): Error? {
  return intf!!.m(e)
 }

 internal open fun <T> callWithBiFunction_pp_lambdas(fn: BiFunction<T, String?, Double?>?): GenericFunctionalInterface<T>? {
  return null
 }

 @ObjCName("testLambdaWithGenerics")
 open fun <T: Enum<T>> testLambdaWithGenerics() {
  this.callWithTypeVariable<Error?>(
   GenericFunctionalInterface/* <Error?> */ { i: Error? ->
    return@GenericFunctionalInterface i
   },
   java.lang.Error(),
  )
  this.callParameterized(
   GenericFunctionalInterface/* <Error?> */ { i_1: Error? ->
    return@GenericFunctionalInterface i_1
   },
   java.lang.Error(),
  )
  Lambdas.callTypeVariableWithBounds<T>(
   GenericFunctionalInterface/* <Enum<T>?> */ { i_2: Enum<T>? ->
    return@GenericFunctionalInterface i_2
   },
   null as Enum<T>?,
  )
  this.callWithBiFunction_pp_lambdas<Any?>(
   BiFunction/* <Any?, String?, Double?> */ { x: Any?, y: String? ->
    throw RuntimeException()
   },
  )
  this.callWithBiFunction_pp_lambdas<Any?>(
   BiFunction/* <Any?, String?, Double?> */ { x_1: Any?, y_1: String? ->
    return@BiFunction java.lang.Double.valueOf(3.0)
   },
  )
  val f: Function<in T, *> = Function/* <in T, *> */ { item: T ->
   return@Function Long.valueOf(1L)
  }
  val f2: Function<Wrapper<String?>?, String?> = Function/* <Wrapper<String?>?, String?> */ { item_1: Wrapper<String?>? ->
   return@Function item_1!!.wrapped_pp_lambdas
  }
 }

 @ObjCName("testLambdaReturningVoidAsExpression")
 open fun testLambdaReturningVoidAsExpression() {
  val runner: FunctionalInterfaceWithMethodReturningVoid = FunctionalInterfaceWithMethodReturningVoid {
   Any()
  }
 }

 @ObjCName("testAnonymousInsideLambda")
 open fun testAnonymousInsideLambda() {
  val runner: FunctionalInterfaceWithMethodReturningVoid = FunctionalInterfaceWithMethodReturningVoid {
   object : Any() {}
  }
 }

 @ObjCName("testDefaultMethodsInIntersectionAdaptor")
 open fun testDefaultMethodsInIntersectionAdaptor() {
  val o: Any = (BiFunction/* <String?, String?, String?> */ { t: String?, u: String? ->
   return@BiFunction null
  }).let { it as BiFunction<String?, String?, String?>; it as MarkerWithDefaultMethod; it }
 }

 @ObjCName("J2ktLambdasLambdasCompanion", swiftName = "LambdasLambdasCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testLambdaInStaticContext")
  fun testLambdaInStaticContext() {
   val f: FunctionalInterface = FunctionalInterface { i: Int ->
    return@FunctionalInterface i
   }
  }

  @JvmStatic
  @ObjCName("testStaticMethodTypeVariableThroughLambda")
  fun <T> testStaticMethodTypeVariableThroughLambda() {
   val wrapped: Functional<T> = Functional/* <T> */ { f: Functional<T>? ->
    return@Functional object : Functional<T> {
     override fun wrap(f: Functional<T>?): Functional<T>? {
      return null
     }
    }
   }
  }

  @JvmStatic
  @ObjCName("callTypeVariableWithBounds")
  fun <T: Enum<T>> callTypeVariableWithBounds(
   @ObjCName("withLambdasLambdas_GenericFunctionalInterface", swiftName = "with") intf: GenericFunctionalInterface<Enum<T>?>?,
   @ObjCName("withJavaLangEnum", swiftName = "with") e: Enum<T>?
  ): Enum<T>? {
   return intf!!.m(e)
  }

  @JvmStatic
  @ObjCName("m")
  fun m(): Any? {
   return null
  }

  @JvmStatic
  @ObjCName("testLambdaCallingStaticMethod")
  fun testLambdaCallingStaticMethod() {
   val f: Function<Any?, *> = Function/* <Any?, *> */ { l: Any? ->
    return@Function Lambdas.m()
   }
  }

  private var identityFunction: IdentityFunction? = null

  @JvmStatic
  @ObjCName("identity")
  fun <E> identity(): GenericJsFunction<E, E>? {
   if (Lambdas.identityFunction == null) {
    Lambdas.identityFunction = IdentityFunction()
   }
   return Lambdas.identityFunction as GenericJsFunction<E, E>?
  }

  @JvmStatic
  @ObjCName("testJsInteropLambdas")
  fun testJsInteropLambdas() {
   val thenable: Thenable<String?> = Thenable/* <String?> */ { f1: GenericJsFunction<Void?, String?>?, f2: GenericJsFunction<Void?, Throwable?>? ->
    f1!!.apply(null)
   }
   val otherThenable: AnotherThenable<String?> = AnotherThenable/* <String?> */ { f1_1: GenericJsFunction<Void?, String?>?, f2_1: GenericJsFunction<Void?, Throwable?>? ->
    f1_1!!.apply(null)
   }
   val stringJsSupplier: JsSupplier<Int?> = JsSupplier/* <Int?> */ {
    return@JsSupplier Integer.valueOf(1)
   }
   stringJsSupplier.get()
   val equals: Equals<Any?> = stringJsSupplier as Equals<Any?>
   equals.equals(null)
   equals.get()
  }

  @JvmStatic
  @ObjCName("testIntersectionTyping")
  fun <U, V> testIntersectionTyping() {
   var o: Any = (GenericFunctionalInterface/* <String?> */ { x: String? ->
    return@GenericFunctionalInterface x
   }).let { it as GenericFunctionalInterface<String?>; it as JustADefaultT<Number?>; it }
   o = (GenericFunctionalInterface/* <String?> */ { x_1: String? ->
    return@GenericFunctionalInterface x_1
   }).let { it as GenericFunctionalInterface<String?>; it as JustADefaultS<Number?>; it }
   o = (GenericFunctionalInterface/* <U> */ { x_2: U ->
    return@GenericFunctionalInterface x_2
   }).let { it as GenericFunctionalInterface<U>; it as JustADefaultS<V>; it }
  }

  @JvmStatic
  @ObjCName("testIterable")
  fun <T> testIterable(
   @ObjCName("withJavaLangIterable", swiftName = "with") iterable: MutableIterable<T>?
  ) {
   val lambda: MutableIterable<T> = MutableIterableJvm/* <T> */ {
    return@MutableIterableJvm iterable!!.iterator()
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_FunctionalInterface", swiftName = "LambdasLambdas_FunctionalInterface", exact = true)
 fun interface FunctionalInterface {
  @ObjCName("m")
  fun m(
   @ObjCName("withInt", swiftName = "with") i: Int
  ): Int
 }

 @ObjCName("J2ktLambdasLambdas_Functional", swiftName = "LambdasLambdas_Functional", exact = true)
 fun interface Functional<T> {
  @ObjCName("wrap")
  fun wrap(
   @ObjCName("withLambdasLambdas_Functional", swiftName = "with") f: Functional<T>?
  ): Functional<T>?
 }

 @ObjCName("J2ktLambdasLambdas_GenericFunctionalInterface", swiftName = "LambdasLambdas_GenericFunctionalInterface", exact = true)
 fun interface GenericFunctionalInterface<T> {
  @ObjCName("m")
  fun m(
   @ObjCName("withId") i: T
  ): T
 }

 @ObjCName("J2ktLambdasLambdas_BiFunction", swiftName = "LambdasLambdas_BiFunction", exact = true)
 fun interface BiFunction<T, U, R> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T,
   @ObjCName("withId") u: U
  ): R

  @ObjCName("andThen")
  fun <V> andThen(
   @ObjCName("withLambdasLambdas_Function", swiftName = "with") after: Function<in R, out V>?
  ): BiFunction<T, U, V>? {
   return BiFunction/* <T, U, V> */ { t: T, u: U ->
    return@BiFunction after!!.apply(
     this.apply(t, u),
    )
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_Function", swiftName = "LambdasLambdas_Function", exact = true)
 fun interface Function<T, R> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): R

  @ObjCName("J2ktLambdasLambdas_FunctionCompanion", swiftName = "LambdasLambdas_FunctionCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName("identity")
   fun <T> identity(): Function<T, T>? {
    return Function/* <T, T> */ { t: T ->
     return@Function t
    }
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_Wrapper", swiftName = "LambdasLambdas_Wrapper", exact = true)
 open class Wrapper<T> internal constructor() {
  @JvmField
  internal var wrapped_pp_lambdas: T = null as T
 }

 @ObjCName("J2ktLambdasLambdas_FunctionalInterfaceWithMethodReturningVoid", swiftName = "LambdasLambdas_FunctionalInterfaceWithMethodReturningVoid", exact = true)
 fun interface FunctionalInterfaceWithMethodReturningVoid {
  @ObjCName("run")
  fun run()
 }

 @ObjCName("J2ktLambdasLambdas_Parent", swiftName = "LambdasLambdas_Parent", exact = true)
 open class Parent internal constructor() {
  @JvmField
  @ObjCName("fieldInParent_")
  var fieldInParent: Int = 0

  @ObjCName("funInParent")
  open fun funInParent() {}
 }

 @ObjCName("J2ktLambdasLambdas_LambdaInSubClass", swiftName = "LambdasLambdas_LambdaInSubClass", exact = true)
 open class LambdaInSubClass internal constructor(): Parent() {
  @ObjCName("testLambdaInSubclass")
  open fun testLambdaInSubclass() {
   val l: FunctionalInterface = FunctionalInterface { i: Int ->
    this.funInParent()
    this.funInParent()
    this@LambdaInSubClass.funInParent()
    var a: Int = this.fieldInParent
    a = this.fieldInParent
    a = this@LambdaInSubClass.fieldInParent
    return@FunctionalInterface a
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_GenericJsFunction", swiftName = "LambdasLambdas_GenericJsFunction", exact = true)
 @JsFunction
 fun interface GenericJsFunction<R, T> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): R
 }

 @ObjCName("J2ktLambdasLambdas_Thenable", swiftName = "LambdasLambdas_Thenable", exact = true)
 @JsType(name = "?", namespace = JsPackage.GLOBAL, isNative = true)
 fun interface Thenable<T> {
  @ObjCName("then")
  fun then(
   @ObjCName("withLambdasLambdas_GenericJsFunction", swiftName = "with") f1: GenericJsFunction<Void?, T>?,
   @ObjCName("withLambdasLambdas_GenericJsFunction", swiftName = "with") f2: GenericJsFunction<Void?, Throwable?>?
  )
 }

 @ObjCName("J2ktLambdasLambdas_AnotherThenable", swiftName = "LambdasLambdas_AnotherThenable", exact = true)
 @JsType(name = "?", namespace = JsPackage.GLOBAL, isNative = true)
 fun interface AnotherThenable<T> {
  @ObjCName("then")
  fun then(
   @ObjCName("withLambdasLambdas_GenericJsFunction", swiftName = "with") f1: GenericJsFunction<Void?, T>?,
   @ObjCName("withLambdasLambdas_GenericJsFunction", swiftName = "with") f2: GenericJsFunction<Void?, Throwable?>?
  )
 }

 @ObjCName("J2ktLambdasLambdas_IdentityFunction", swiftName = "LambdasLambdas_IdentityFunction", exact = true)
 class IdentityFunction internal constructor(): GenericJsFunction<Any?, Any?> {
  override fun apply(o: Any?): Any? {
   return o
  }
 }

 @ObjCName("J2ktLambdasLambdas_Equals", swiftName = "LambdasLambdas_Equals", exact = true)
 interface Equals<T> {
  @ObjCName("get")
  fun get(): T {
   return null as T
  }
 }

 @ObjCName("J2ktLambdasLambdas_JsSupplier", swiftName = "LambdasLambdas_JsSupplier", exact = true)
 fun interface JsSupplier<T: Number?>: Equals<T> {
  @JsMethod
  override fun get(): T
 }

 @ObjCName("J2ktLambdasLambdas_JustADefaultT", swiftName = "LambdasLambdas_JustADefaultT", exact = true)
 interface JustADefaultT<T> {
  @ObjCName("method")
  fun method(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktLambdasLambdas_JustADefaultS", swiftName = "LambdasLambdas_JustADefaultS", exact = true)
 interface JustADefaultS<S> {
  @ObjCName("method")
  fun method(
   @ObjCName("withId") t: S
  ) {}
 }

 @ObjCName("J2ktLambdasLambdas_MarkerWithDefaultMethod", swiftName = "LambdasLambdas_MarkerWithDefaultMethod", exact = true)
 interface MarkerWithDefaultMethod {
  @ObjCName("defaultMethod")
  fun defaultMethod() {}
 }

 @ObjCName("J2ktLambdasLambdas_Runnable", swiftName = "LambdasLambdas_Runnable", exact = true)
 fun interface Runnable {
  @ObjCName("run")
  fun run()
 }

 @ObjCName("J2ktLambdasLambdas_Outer", swiftName = "LambdasLambdas_Outer", exact = true)
 open inner class Outer internal constructor() {
  internal open fun m_pp_lambdas() {}

  internal open fun n_pp_lambdas() {
   val r: Runnable = Runnable {
    this.m_pp_lambdas()
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_Super", swiftName = "LambdasLambdas_Super", exact = true)
 open inner class Super internal constructor() {
  internal open fun m_pp_lambdas() {}
 }

 @ObjCName("J2ktLambdasLambdas_Sub", swiftName = "LambdasLambdas_Sub", exact = true)
 open inner class Sub internal constructor(): Lambdas.Super() {
  internal open fun n_pp_lambdas() {
   val r: Runnable = object : Runnable {
    override fun run() {
     super<Super>@Sub.m_pp_lambdas()
    }
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_SubWithLambda", swiftName = "LambdasLambdas_SubWithLambda", exact = true)
 open inner class SubWithLambda internal constructor(): Lambdas.Super() {
  internal open fun n_pp_lambdas() {
   val r: Runnable = Runnable {
    super<Super>.m_pp_lambdas()
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_EmptyInterface", swiftName = "LambdasLambdas_EmptyInterface", exact = true)
 interface EmptyInterface

 @ObjCName("J2ktLambdasLambdas_EmptyInterfaceProvider", swiftName = "LambdasLambdas_EmptyInterfaceProvider", exact = true)
 fun interface EmptyInterfaceProvider {
  @ObjCName("provide")
  fun provide(): EmptyInterface?
 }

 @ObjCName("J2ktLambdasLambdas_ProviderHolder", swiftName = "LambdasLambdas_ProviderHolder", exact = true)
 open class ProviderHolder internal constructor() {
  @ObjCName("J2ktLambdasLambdas_ProviderHolderCompanion", swiftName = "LambdasLambdas_ProviderHolderCompanion", exact = true)
  companion object {
   @JvmField
   @ObjCName("emptyInterface_")
   val emptyInterface: EmptyInterface? = object : EmptyInterface {}

   @JvmField
   @ObjCName("provideFromField_")
   val provideFromField: EmptyInterfaceProvider? = EmptyInterfaceProvider {
    return@EmptyInterfaceProvider ProviderHolder.emptyInterface
   }

   @JvmField
   @ObjCName("provideFromAnonImpl_")
   val provideFromAnonImpl: EmptyInterfaceProvider? = EmptyInterfaceProvider {
    return@EmptyInterfaceProvider object : EmptyInterface {}
   }
  }
 }
}
