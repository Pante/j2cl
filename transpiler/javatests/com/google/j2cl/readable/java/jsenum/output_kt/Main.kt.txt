// Generated from "jsenum/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jsenum

import javaemul.lang.*
import java.util.Arrays
import java.util.Optional
import jsinterop.annotations.JsEnum
import jsinterop.annotations.JsFunction
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsProperty
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJsenumMain", exact = true)
open class Main {
 @ObjCName("J2ktJsenumMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testJsEnumSwitch")
  fun testJsEnumSwitch() {
   var comparableJsEnum: Main.ComparableJsEnum? = if (Main.ComparableJsEnum.ONE.getValue() == 1) Main.ComparableJsEnum.TWO else null
   SWITCH@ do {
    when (comparableJsEnum!!) {
     Main.ComparableJsEnum.TWO -> {
      break@SWITCH
     }
     else -> {}
    }
   } while (false)
   val comparable: Comparable<Any>? = comparableJsEnum as Comparable<Any>?
   comparableJsEnum = comparable as Main.ComparableJsEnum?
   var intJsEnum: Main.IntJsEnum? = if (Main.IntJsEnum.ELEVEN.getValue() == 10) Main.IntJsEnum.ELEVEN else null
   SWITCH_1@ do {
    when (intJsEnum!!) {
     Main.IntJsEnum.TWENTY -> {
      break@SWITCH_1
     }
     else -> {}
    }
   } while (false)
   val o: Any? = intJsEnum
   intJsEnum = o as Main.IntJsEnum?
   val equal: Boolean = intJsEnum === Main.IntJsEnum.TWENTY
   var isInstance: Boolean = intJsEnum is Main.IntJsEnum
   isInstance = intJsEnum is Comparable<*>
   val stringJsEnum: Main.StringJsEnum? = if (Main.StringJsEnum.ONE.getValue() === "10") Main.StringJsEnum.THREE else null
   SWITCH_2@ do {
    when (stringJsEnum!!) {
     Main.StringJsEnum.ONE -> {
      break@SWITCH_2
     }
     else -> {}
    }
   } while (false)
   Main.NativeStringEnum.ONE.compareTo(Main.NativeStringEnum.THREE)
   Main.NativeStringEnum.ONE.equals(Main.NativeStringEnum.THREE)
   val supplier: Main.Supplier<Main.ComparableJsEnum?>? = Main.Supplier<Main.ComparableJsEnum?> {
    return@Supplier Main.ComparableJsEnum.ONE
   }
   val consummer: Main.Consumer<Main.ComparableJsEnum?>? = Main.Consumer<Main.ComparableJsEnum?> { e: Main.ComparableJsEnum? ->
    e!!.ordinal
   }
   Main.acceptsJsFunctionSupplier(Main.JsFunctionSuppiler<Main.ComparableJsEnum?> {
    return@JsFunctionSuppiler Main.ComparableJsEnum.ONE
   })
   Main.acceptsSupplierOfSupplier(Main.Supplier<Main.Supplier<Main.ComparableJsEnum?>?> {
    return@Supplier Main.Supplier<Main.ComparableJsEnum?> {
     return@Supplier Main.ComparableJsEnum.ONE
    }
   })
  }

  @JvmStatic
  private fun testJsEnumAutoboxingSpecialMethods() {
   val stringJsEnum: Main.StringJsEnum? = Main.StringJsEnum.ONE
   val nullStringJsEnum: Main.StringJsEnum? = null
   val jsEnum: Main.ComparableJsEnum? = Main.ComparableJsEnum.ONE
   val nullJsEnum: Main.ComparableJsEnum? = null
   val o: Any? = Main.ComparableJsEnum.ONE
   Main.StringJsEnum.ONE.equals(Main.StringJsEnum.THREE)
   Main.StringJsEnum.ONE.equals(stringJsEnum)
   Main.StringJsEnum.ONE.equals(nullStringJsEnum)
   Main.StringJsEnum.ONE.equals(null)
   Main.StringJsEnum.ONE.equals(o)
   o!!.equals(Main.StringJsEnum.THREE)
   Main.ComparableJsEnum.ONE.compareTo(Main.ComparableJsEnum.ZERO)
   Main.ComparableJsEnum.ONE.compareTo(null!!)
   Main.ComparableJsEnum.ONE.equals(Main.ComparableJsEnum.ZERO)
   Main.ComparableJsEnum.ONE.equals(jsEnum)
   Main.ComparableJsEnum.ONE.equals(nullJsEnum)
   Main.ComparableJsEnum.ONE.equals(null)
   Main.ComparableJsEnum.ONE.equals(o)
   o!!.equals(Main.ComparableJsEnum.ZERO)
   Main.StringJsEnum.ONE.equals(jsEnum)
   Main.boxingPassthrough<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)!!.equals(Main.boxingPassthrough<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE))
   Main.boxingPassthrough<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)!!.equals(Main.boxingPassthrough<Main.StringJsEnum?>(Main.StringJsEnum.ONE))
  }

  @JvmStatic
  private fun acceptsJsFunctionSupplier(supplier: Main.JsFunctionSuppiler<Main.ComparableJsEnum?>?) {}

  @JvmStatic
  private fun acceptsSupplierOfSupplier(supplier: Main.Supplier<Main.Supplier<Main.ComparableJsEnum?>?>?) {}

  @JvmStatic
  private fun testReturnsAndParameters() {
   val returnedValue: Main.ComparableJsEnum? = Main.returnsJsEnum()
   val returnedNullValue: Main.ComparableJsEnum? = Main.returnsNullJsEnum()
   Main.takesJsEnum(Main.ComparableJsEnum.ONE)
  }

  @JvmStatic
  private fun returnsJsEnum(): Main.ComparableJsEnum? {
   return Main.ComparableJsEnum.ONE
  }

  @JvmStatic
  private fun returnsNullJsEnum(): Main.ComparableJsEnum? {
   return null
  }

  @JvmStatic
  private fun takesJsEnum(value: Main.ComparableJsEnum?) {}

  @JvmStatic
  private fun testBoxUnboxWithTypeInference() {
   val templatedField: Main.TemplatedField<Main.ComparableJsEnum?>? = Main.TemplatedField<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)
   var unboxed: Main.ComparableJsEnum? = templatedField!!.getValue_pp_jsenum()
   unboxed = templatedField!!.value_pp_jsenum
   templatedField!!.value_pp_jsenum = Main.ComparableJsEnum.ONE
   Arrays.asList<Main.ComparableJsEnum>(Main.ComparableJsEnum.ONE)
   templatedField!!.getValue_pp_jsenum()!!.ordinal
   val b: Boolean = Main.ComparableJsEnum.ONE === Main.boxingPassthrough<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)
  }

  @JvmStatic
  private fun <T> boxingPassthrough(t: T): T {
   return t
  }

  @JvmStatic
  internal fun boxingWithGenerics_pp_jsenum() {
   Main.Foo<Any?>(Optional.of<Main.IntJsEnum>(Main.IntJsEnum.MINUSONE) as Optional<Main.IntJsEnum>?)
  }

  @JvmStatic
  private fun <T> varargsConsumer(vararg args: T): T {
   val args_1: Array<T>? = args as Array<T>?
   return args_1!![0]
  }

  @JvmStatic
  private fun testVarargs() {
   Main.varargsConsumer<Main.SomeJsEnum?>(Main.SomeJsEnum.A, Main.SomeJsEnum.A)
   val consumer: Main.Consumer<Main.SomeJsEnum?>? = Main.Consumer<Main.SomeJsEnum?> { arg0: Main.SomeJsEnum? ->
    Main.varargsConsumer<Main.SomeJsEnum?>(arg0)
   }
  }
 }

 @ObjCName("J2ktJsenumMain_Supplier", exact = true)
 fun interface Supplier<T> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJsenumMain_Consumer", exact = true)
 fun interface Consumer<T> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withId") t: T
  )
 }

 @ObjCName("J2ktJsenumMain_ComparableJsEnum", exact = true)
 @JsEnum
 enum class ComparableJsEnum {
  @ObjCName("ZERO")
  ZERO,
  @ObjCName("ONE")
  ONE,
  @ObjCName("TWO")
  TWO;

  @ObjCName("getValue")
  open fun getValue(): Int {
   return this.ordinal
  }
 }

 @ObjCName("J2ktJsenumMain_IntJsEnum", exact = true)
 @JsEnum(hasCustomValue = true)
 enum class IntJsEnum {
  @ObjCName("MINUSONE")
  MINUSONE(-1),
  @ObjCName("TWENTY")
  TWENTY(20),
  @ObjCName("ELEVEN")
  ELEVEN(11);

  private var value: Int = 0

  @ObjCName("getValue")
  open fun getValue(): Int {
   return this.value
  }

  constructor(value: Int) {
   this.value = value
  }
 }

 @ObjCName("J2ktJsenumMain_StringJsEnum", exact = true)
 @JsEnum(hasCustomValue = true)
 enum class StringJsEnum {
  @ObjCName("ONE")
  ONE("ONE"),
  @ObjCName("THREE")
  THREE("THREE");

  private var value: String? = null

  @ObjCName("getValue")
  open fun getValue(): String? {
   return this.value
  }

  constructor(value: String?) {
   this.value = value
  }
 }

 @ObjCName("J2ktJsenumMain_NonNullableStringJsEnum", exact = true)
 @JsEnum(hasCustomValue = true)
 enum class NonNullableStringJsEnum {
  @ObjCName("ONE")
  ONE("ONE"),
  @ObjCName("THREE")
  THREE("THREE");

  private var value: String

  @ObjCName("getValue")
  open fun getValue(): String? {
   return this.value
  }

  constructor(value: String?) {
   this.value = value!!
  }
 }

 @ObjCName("J2ktJsenumMain_NativeStringEnum", exact = true)
 @JsEnum(name = "NonNullableStringJsEnum", namespace = "jsenum.Main", isNative = true)
 enum class NativeStringEnum {
  @ObjCName("ONE")
  ONE,
  @ObjCName("THREE")
  THREE;
 }

 @ObjCName("J2ktJsenumMain_JsFunctionSuppiler", exact = true)
 @JsFunction
 fun interface JsFunctionSuppiler<T> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJsenumMain_TemplatedField", exact = true)
 open class TemplatedField<T> {
  @JvmField
  internal var value_pp_jsenum: T

  internal constructor(value: T) {
   this.value_pp_jsenum = value
  }

  internal open fun getValue_pp_jsenum(): T {
   return this.value_pp_jsenum
  }
 }

 @ObjCName("J2ktJsenumMain_Foo", exact = true)
 open class Foo<T> {
  internal constructor(c: Optional<Main.IntJsEnum>?)
 }

 @ObjCName("J2ktJsenumMain_JsEnumWithRenamedProperties", exact = true)
 @JsEnum
 enum class JsEnumWithRenamedProperties {
  @ObjCName("ZERO")
  @JsProperty(name = "NAUGHT")
  ZERO,
  @ObjCName("ONE")
  ONE,
  @ObjCName("TWO")
  TWO;

  @ObjCName("getValue")
  open fun getValue(): Int {
   return this.ordinal
  }
 }

 @ObjCName("J2ktJsenumMain_SupplierConsumerImpl", exact = true)
 open class SupplierConsumerImpl<T> internal constructor(): Main.Supplier<T>, Main.Consumer<T> {
  override fun accept(t: T) {}

  override fun get(): T {
   return null as T
  }
 }

 @ObjCName("J2ktJsenumMain_ComparableJsEnumSupplierConsumer", exact = true)
 interface ComparableJsEnumSupplierConsumer: Main.Supplier<Main.ComparableJsEnum?>, Main.Consumer<Main.ComparableJsEnum?> {
  @JsMethod
  override fun get(): Main.ComparableJsEnum?

  override fun accept(e: Main.ComparableJsEnum?)
 }

 @ObjCName("J2ktJsenumMain_ComparableJsEnumSupplierConsumerImpl", exact = true)
 open class ComparableJsEnumSupplierConsumerImpl internal constructor(): Main.SupplierConsumerImpl<Main.ComparableJsEnum?>(), Main.ComparableJsEnumSupplierConsumer {}

 @ObjCName("J2ktJsenumMain_ComparableJsEnumSupplierConsumerImplWithOverrides", exact = true)
 open class ComparableJsEnumSupplierConsumerImplWithOverrides internal constructor(): Main.SupplierConsumerImpl<Main.ComparableJsEnum?>(), Main.ComparableJsEnumSupplierConsumer {
  override fun accept(t: Main.ComparableJsEnum?) {}

  override fun get(): Main.ComparableJsEnum? {
   return null
  }
 }

 @ObjCName("J2ktJsenumMain_SomeJsEnum", exact = true)
 @JsEnum
 enum class SomeJsEnum {
  @ObjCName("A")
  A;
 }

 @ObjCName("J2ktJsenumMain_BaseVarargs", exact = true)
 open class BaseVarargs<T> {
  internal constructor(vararg args: T) {
   val args_1: Array<T>? = args as Array<T>?
  }
 }

 @ObjCName("J2ktJsenumMain_SubtypeVarargs", exact = true)
 open class SubtypeVarargs: Main.BaseVarargs<Main.SomeJsEnum?> {
  internal constructor(): super(Main.SomeJsEnum.A, Main.SomeJsEnum.A)
 }

 @ObjCName("J2ktJsenumMain_SubtypeImplicitVarargs", exact = true)
 open class SubtypeImplicitVarargs internal constructor(): Main.BaseVarargs<Main.SomeJsEnum?>() {}
}
