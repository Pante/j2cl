// Generated from "boundedtypesupercall/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package boundedtypesupercall

import javaemul.lang.*
import kotlin.Comparable
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktBoundedtypesupercallMain", swiftName = "BoundedtypesupercallMain", exact = true)
open class Main {
 @ObjCName(name = "J2ktBoundedtypesupercallMain_Foo", swiftName = "BoundedtypesupercallMain_Foo", exact = true)
 abstract class Foo<T> {
  constructor(
   @ObjCName(name = "Id") foo: T
  )

  @ObjCName(name = "foo")
  abstract fun foo()
 }

 @ObjCName(name = "J2ktBoundedtypesupercallMain_Bar", swiftName = "BoundedtypesupercallMain_Bar", exact = true)
 open class Bar<T: Comparable<*>?> {
  @ObjCName(name = "getSomething")
  open fun getSomething(): T {
   return null as T
  }

  @ObjCName(name = "doSomething")
  open fun doSomething(): Main.Foo<T>? {
   return object : Main.Foo<T>(
    this@Bar.getSomething(),
   ) {
    override fun foo() {}
   }
  }
 }
}
