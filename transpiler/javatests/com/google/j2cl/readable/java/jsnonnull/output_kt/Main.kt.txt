// Generated from "jsnonnull/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package jsnonnull

import javaemul.lang.*
import java.util.ArrayList
import java.util.Comparator
import jsinterop.annotations.JsConstructor
import jsinterop.annotations.JsFunction
import jsinterop.annotations.JsMethod
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJsnonnullMain", swiftName = "JsnonnullMain", exact = true)
open class Main {
 private var f1: String = "Hello"

 private var f2: String? = null

 private var f4: MutableList<String> = ArrayList<String>()

 private var f5: MutableList<String>? = ArrayList<String>()

 private var f6: MutableList<String?> = ArrayList<String>() as MutableList<String?>

 private var f7: MutableList<String?>? = null

 private var f8: Array<String> = arrayOf<String>()

 private var f9: Array<String?> = arrayOf<String?>()

 private var f10: Array<String>? = arrayOf<String>()

 private var f12: MutableList<String?>? = ArrayList<String>() as MutableList<String?>?

 @JsConstructor
 constructor(
  @ObjCName(name = "NSString") a: String
 )

 @ObjCName(name = "m1")
 open fun m1(
  @ObjCName(name = "withNSString") a: String,
  @ObjCName(name = "withJavaUtilList") b: MutableList<Double>,
  @ObjCName(name = "withNSString") c: String?
 ): String {
  return ""
 }

 @ObjCName(name = "m2")
 open fun m2(
  @ObjCName(name = "withNSString") a: String?,
  @ObjCName(name = "withJavaUtilList") b: MutableList<Double>
 ): String? {
  return ""
 }

 @ObjCName(name = "m3")
 @JsMethod
 open fun m3(
  @ObjCName(name = "withNSString") a: String,
  vararg @ObjCName(name = "withNSStringArray") args: String
 ): String? {
  val args_1: Array<String>? = args as Array<String>?
  return null
 }

 @ObjCName(name = "m4")
 open fun m4(
  @ObjCName(name = "withJsnonnullMain_MyFunction") f: Main.MyFunction
 ) {}

 @ObjCName(name = "J2ktJsnonnullMain_MyFunction", swiftName = "JsnonnullMain_MyFunction", exact = true)
 @JsFunction
 fun interface MyFunction {
  @ObjCName(name = "x")
  fun x(
   @ObjCName(name = "withNSString") a: String
  ): String
 }

 @ObjCName(name = "J2ktJsnonnullMain_StringComparator", swiftName = "JsnonnullMain_StringComparator", exact = true)
 open class StringComparator: Comparator<String> {
  override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 @ObjCName(name = "J2ktJsnonnullMain_NullableStringComparator", swiftName = "JsnonnullMain_NullableStringComparator", exact = true)
 open class NullableStringComparator: Comparator<String?> {
  override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 @ObjCName(name = "J2ktJsnonnullMain_NonNullableStringSubNullableComparator", swiftName = "JsnonnullMain_NonNullableStringSubNullableComparator", exact = true)
 open class NonNullableStringSubNullableComparator: Main.NullableStringComparator() {
  override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 @ObjCName(name = "J2ktJsnonnullMain_NonNullableTemplatedReturn", swiftName = "JsnonnullMain_NonNullableTemplatedReturn", exact = true)
 interface NonNullableTemplatedReturn<T> {
  @ObjCName(name = "get")
  fun get(): T & Any

  @ObjCName(name = "getArray")
  fun getArray(): Array<T & Any>?
 }

 @ObjCName(name = "J2ktJsnonnullMain_NonNullableTemplate", swiftName = "JsnonnullMain_NonNullableTemplate", exact = true)
 interface NonNullableTemplate<T: Any> {
  @ObjCName(name = "get")
  fun get(): T

  @ObjCName(name = "getArray")
  fun getArray(): Array<T>?
 }
}
