// Generated from "jsproperties/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package jsproperties

import javaemul.lang.*
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsProperty
import kotlin.Any
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJspropertiesFoo", swiftName = "JspropertiesFoo", exact = true)
open class Foo internal constructor() {
 @ObjCName(name = "J2ktJspropertiesFooCompanion", swiftName = "JspropertiesFooCompanion", exact = true)
 companion object {
  private var f: Int = 0

  @JvmStatic
  @ObjCName(name = "getA")
  @JsProperty
  fun getA(): Int {
   return Foo.f + 1
  }

  @JvmStatic
  @ObjCName(name = "setA")
  @JsProperty
  fun setA(
   @ObjCName(name = "withInt") x: Int
  ) {
   Foo.f = x + 2
  }

  @JvmStatic
  @ObjCName(name = "getB")
  @JsProperty(name = "abc")
  fun getB(): Int {
   return Foo.f + 3
  }

  @JvmStatic
  @ObjCName(name = "setB")
  @JsProperty(name = "abc")
  fun setB(
   @ObjCName(name = "withInt") x: Int
  ) {
   Foo.f = x + 4
  }
 }
}

@ObjCName(name = "J2ktJspropertiesBar", swiftName = "JspropertiesBar", exact = true)
open class Bar internal constructor() {
 private var f: Int = 0

 @JsProperty
 private var privateField: Int = - 1

 @ObjCName(name = "getA")
 @JsProperty
 open fun getA(): Int {
  return this.f + 1
 }

 @ObjCName(name = "setA")
 @JsProperty
 open fun setA(
  @ObjCName(name = "withInt") x: Int
 ) {
  this.f = x + 2
 }

 @ObjCName(name = "getB")
 @JsProperty(name = "abc")
 open fun getB(): Int {
  return this.f + 3
 }

 @ObjCName(name = "setB")
 @JsProperty(name = "abc")
 open fun setB(
  @ObjCName(name = "withInt") x: Int
 ) {
  this.f = x + 4
 }
}

@ObjCName(name = "J2ktJspropertiesNativeFoo", swiftName = "JspropertiesNativeFoo", exact = true)
open class NativeFoo internal constructor() {
 @ObjCName(name = "getA")
 @JsProperty(name = "hasOwnProperty")
 external open fun getA(): Any?

 @ObjCName(name = "J2ktJspropertiesNativeFooCompanion", swiftName = "JspropertiesNativeFooCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "getB")
  @JsProperty(name = "Math.PI", namespace = JsPackage.GLOBAL)
  external fun getB(): Double
 }
}

@ObjCName(name = "J2ktJspropertiesInterfaceWithDefaultJsProperties", swiftName = "JspropertiesInterfaceWithDefaultJsProperties", exact = true)
interface InterfaceWithDefaultJsProperties {
 @ObjCName(name = "getM")
 @JsProperty
 fun getM(): Int {
  return 3
 }

 @ObjCName(name = "setM")
 @JsProperty
 fun setM(
  @ObjCName(name = "withInt") value: Int
 ) {}
}

@ObjCName(name = "J2ktJspropertiesImplementsInterfaceWithDefaultJsProperties", swiftName = "JspropertiesImplementsInterfaceWithDefaultJsProperties", exact = true)
open class ImplementsInterfaceWithDefaultJsProperties internal constructor(): InterfaceWithDefaultJsProperties

@ObjCName(name = "J2ktJspropertiesMain", swiftName = "JspropertiesMain", exact = true)
open class Main {
 @ObjCName(name = "testNativeJsProperty")
 open fun testNativeJsProperty() {
  NativeFoo().getA()
  NativeFoo.getB()
 }

 @ObjCName(name = "testStaticJsProperty")
 open fun testStaticJsProperty() {
  Foo.getA()
  Foo.setA(10)
  Foo.getB()
  Foo.setB(10)
 }

 @ObjCName(name = "testInstanceJsProperty")
 open fun testInstanceJsProperty() {
  val bar: Bar = Bar()
  bar.getA()
  bar.setA(10)
  bar.getB()
  bar.setB(10)
 }
}
