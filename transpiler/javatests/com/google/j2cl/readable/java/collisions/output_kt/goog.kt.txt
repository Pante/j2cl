// Generated from "collisions/goog.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package collisions

import javaemul.lang.*
import kotlin.Double
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktCollisionsgoog", swiftName = "Collisionsgoog", exact = true)
open class goog

// native class KtBlah

@ObjCName("J2ktCollisionsKtBlah", swiftName = "CollisionsKtBlah", exact = true)
open class KtBlah internal constructor() {
 @ObjCName("J2ktCollisionsKtBlahCompanion", swiftName = "CollisionsKtBlahCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun m() {}

  @JvmStatic
  internal fun getN(): Double {
   return 1.0
  }
 }
}

@ObjCName("J2ktCollisionsfoo", swiftName = "Collisionsfoo", exact = true)
open class foo internal constructor()

@ObjCName("J2ktCollisionsbar", swiftName = "Collisionsbar", exact = true)
open class bar internal constructor() {
 init {
  val foo: Int = 0
  val bar: Int = 0
  val goog: Int = 0
  val flip: Int = 0
  val window: Int = 0
  KtBlah.m()
  KtBlah.getN()
  KtBlah()
  collisions.goog()
  collisions.foo()
  val delete: Int = 1
  val undefined: Int = 3
 }
}

@ObjCName("J2ktCollisionsOther", swiftName = "CollisionsOther", exact = true)
open class Other<T> internal constructor() {
 init {
  val T_1: Int = 3
  val o: Other<T>? = null as Other<T>?
 }

 internal open fun <T_2> m_pp_collisions(): T_2 {
  val T_1: Int = 5
  val o: Other<T_2>? = null as Other<T_2>?
  return null as T_2
 }
}

@ObjCName("J2ktCollisionsT", swiftName = "CollisionsT", exact = true)
open class T<T: Number?> internal constructor() {
 internal open fun m_pp_collisions(): T {
  return null as T
 }

 internal open fun n_pp_collisions(): T {
  val t: T? = collisions.T<T>().m_pp_collisions()
  t!!.toByte()
  return t as T
 }
}
