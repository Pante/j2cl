// Generated from "j2kt/NonNullVariables.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.Short
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNonNullVariables", swiftName = "J2ktNonNullVariables", exact = true)
open class NonNullVariables {
 @ObjCName("testFinalNonNull")
 open fun testFinalNonNull(
  @ObjCName("withId") nonNull: Any
 ) {
  val o: Any = nonNull
  o.hashCode()
 }

 @ObjCName("testEffectivelyFinalNonNull")
 open fun testEffectivelyFinalNonNull(
  @ObjCName("withId") nonNull: Any
 ) {
  val o: Any = nonNull
  o.hashCode()
 }

 @ObjCName("testNonFinalNonNull")
 open fun testNonFinalNonNull(
  @ObjCName("withId") nonNull: Any
 ) {
  var o: Any = nonNull
  o.hashCode()
  o = nonNull
  o.hashCode()
 }

 @ObjCName("testFinalNullable")
 open fun testFinalNullable(
  @ObjCName("withId") nullable: Any?
 ) {
  val o: Any? = nullable
  o!!.hashCode()
 }

 @ObjCName("testEffectivelyFinalNullable")
 open fun testEffectivelyFinalNullable(
  @ObjCName("withId") nullable: Any?
 ) {
  val o: Any? = nullable
  o!!.hashCode()
 }

 @ObjCName("testNonFinalNullable")
 open fun testNonFinalNullable(
  @ObjCName("withId") nonNull: Any,
  @ObjCName("withId") nullable: Any?
 ) {
  var o: Any? = nonNull
  o!!.hashCode()
  o = nullable
  o!!.hashCode()
 }

 @ObjCName("testSelfAssignmentNonNull")
 open fun testSelfAssignmentNonNull(
  @ObjCName("withId") nonNull: Any
 ) {
  var o: Any = nonNull
  o = o
 }

 @ObjCName("testSelfAssignmentNullable")
 open fun testSelfAssignmentNullable(
  @ObjCName("withId") nullable: Any?
 ) {
  var o: Any? = nullable
  o = o
 }

 @ObjCName("testMutualAssignmentNonNull")
 open fun testMutualAssignmentNonNull(
  @ObjCName("withId") nonNull: Any
 ) {
  var o1: Any = nonNull
  var o2: Any = nonNull
  val tmp: Any = o1
  o1 = o2
  o2 = o1
 }

 @ObjCName("testMutualAssignmentNullable")
 open fun testMutualAssignmentNullable(
  @ObjCName("withId") nonNull: Any,
  @ObjCName("withId") nullable: Any?
 ) {
  var o1: Any? = nonNull
  var o2: Any? = nullable
  val tmp: Any? = o1
  o1 = o2
  o2 = o1
 }

 @ObjCName("testGenericNullable")
 open fun <T: String?> testGenericNullable(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<T>
 ) {
  val value: T? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testGenericNonNull")
 open fun <T: String> testGenericNonNull(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<T>
 ) {
  val value: T? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testGenericNonNullParameterNullable")
 open fun <T: String> testGenericNonNullParameterNullable(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<T?>
 ) {
  val value: T? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testParameterizedNullable")
 open fun testParameterizedNullable(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<String?>
 ) {
  val value: String? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testParameterizedNonNull")
 open fun testParameterizedNonNull(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<String>
 ) {
  val value: String? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testWildcardNullable")
 open fun testWildcardNullable(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<out String?>
 ) {
  val value: String? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testWildcardNonNull")
 open fun testWildcardNonNull(
  @ObjCName("withJ2ktNonNullVariables_Supplier", swiftName = "with") supplier: Supplier<out String>
 ) {
  val value: String? = supplier.get()
  value!!.hashCode()
 }

 @ObjCName("testBoxed")
 open fun testBoxed(
  @ObjCName("withJavaLangByte", swiftName = "with") b: Byte,
  @ObjCName("withShort") o: Short,
  @ObjCName("withJavaLangInteger", swiftName = "with") i: Int,
  @ObjCName("withJavaLangLong", swiftName = "with") l: Long,
  @ObjCName("withJavaLangFloat", swiftName = "with") f: Float,
  @ObjCName("withJavaLangDouble", swiftName = "with") d: Double,
  @ObjCName("withJavaLangBoolean", swiftName = "with") bool: Boolean,
  @ObjCName("withJavaLangCharacter", swiftName = "with") ch: Char
 ) {
  val b1: Byte? = b
  val o1: Short = o
  val i1: Int? = i
  val l1: Long? = l
  val f1: Float? = f
  val d1: Double? = d
  val bool1: Boolean? = bool
  val ch1: Char? = ch
 }

 @ObjCName("J2ktJ2ktNonNullVariables_Supplier", swiftName = "J2ktNonNullVariables_Supplier", exact = true)
 fun interface Supplier<V> {
  @ObjCName("get")
  fun get(): V
 }
}
