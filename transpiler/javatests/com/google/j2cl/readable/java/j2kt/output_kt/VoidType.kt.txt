// Generated from "j2kt/VoidType.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Class
import java.lang.Void
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktVoidType", swiftName = "J2ktVoidType", exact = true)
open class VoidType {
 @ObjCName("J2ktJ2ktVoidTypeCompanion", swiftName = "J2ktVoidTypeCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testVoid_pp_j2kt() {
   val nonNullVoid: Void? = null
   val nullableVoid: Void? = null
   val nullableBoundsWithNonNullVoid: VoidType.NullableBounds<Void>? = null
   val nullableBoundsWithNullableVoid: VoidType.NullableBounds<Void?>? = null
   val nonNullBoundsWithNonNullVoid: VoidType.NonNullBounds<Void>? = null
   val voidClass: Class<Void>? = null
   val nonNullVoidConsumer: VoidType.Consumer<Void> = VoidType.Consumer<Void> { v: Void ->
    v.hashCode()
   }
   val nullableVoidConsumer: VoidType.Consumer<Void?> = VoidType.Consumer<Void?> { v_1: Void? ->
    v_1!!.hashCode()
   }
   val nonNullVoidConsumerWildcard: VoidType.Consumer<*> = VoidType.Consumer<Void> { v_2: Void ->
    v_2.hashCode()
   }
   val nullableVoidConsumerWildcard: VoidType.Consumer<*> = VoidType.Consumer<Void> { v_3: Void? ->
    v_3!!.hashCode()
   }
  }
 }

 @ObjCName("J2ktJ2ktVoidType_NullableBounds", swiftName = "J2ktVoidType_NullableBounds", exact = true)
 interface NullableBounds<T>

 @ObjCName("J2ktJ2ktVoidType_NonNullBounds", swiftName = "J2ktVoidType_NonNullBounds", exact = true)
 interface NonNullBounds<T: Any>

 @ObjCName("J2ktJ2ktVoidType_Consumer", swiftName = "J2ktVoidType_Consumer", exact = true)
 fun interface Consumer<V: Void?> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withJavaLangVoid") v: V
  )
 }
}
