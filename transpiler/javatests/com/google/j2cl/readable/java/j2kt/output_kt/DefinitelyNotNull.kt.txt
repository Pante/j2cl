// Generated from "j2kt/DefinitelyNotNull.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.MutableIterable
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktDefinitelyNotNull", swiftName = "J2ktDefinitelyNotNull", exact = true)
open class DefinitelyNotNull {
 @ObjCName(name = "J2ktJ2ktDefinitelyNotNullCompanion", swiftName = "J2ktDefinitelyNotNullCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testNotNullSupplier_pp_j2kt(supplier: DefinitelyNotNull.NotNullSupplier<out String?>): String {
   return supplier.getNotNull()!!
  }

  @JvmStatic
  @ObjCName(name = "testEquivalence")
  fun <T> testEquivalence(
   @ObjCName(name = "withJ2ktDefinitelyNotNull_Equivalence") equivalence: DefinitelyNotNull.Equivalence<in T & Any>,
   @ObjCName(name = "withId") a: T?,
   @ObjCName(name = "withId") b: T?
  ): Boolean {
   return equivalence.equivalent(a, b)
  }
 }

 @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_NotNullSupplier", swiftName = "J2ktDefinitelyNotNull_NotNullSupplier", exact = true)
 fun interface NotNullSupplier<T> {
  @ObjCName(name = "getNotNull")
  fun getNotNull(): T & Any
 }

 @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_Ordering", swiftName = "J2ktDefinitelyNotNull_Ordering", exact = true)
 open class Ordering<T> internal constructor() {
  internal open fun <S: T> reverse_pp_j2kt(): DefinitelyNotNull.Ordering<S> {
   throw RuntimeException()
  }

  internal open fun <S: T> nullsLast_pp_j2kt(): DefinitelyNotNull.Ordering<S?> {
   throw RuntimeException()
  }

  @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_OrderingCompanion", swiftName = "J2ktDefinitelyNotNull_OrderingCompanion", exact = true)
  companion object {
   @JvmStatic
   internal fun <E> reversed_pp_j2kt(ordering: DefinitelyNotNull.Ordering<in E>): DefinitelyNotNull.Ordering<in E> {
    return ordering.reverse_pp_j2kt<E>()
   }
  }
 }

 @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_NullsFirstOrdering", swiftName = "J2ktDefinitelyNotNull_NullsFirstOrdering", exact = true)
 inner class NullsFirstOrdering<T> constructor(ordering: DefinitelyNotNull.Ordering<in T>): DefinitelyNotNull.Ordering<T?>() {
  @JvmField
  internal val ordering_pp_j2kt: DefinitelyNotNull.Ordering<in T>

  init {
   this.ordering_pp_j2kt = ordering
  }
 }

 @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_ImmutableList", swiftName = "J2ktDefinitelyNotNull_ImmutableList", exact = true)
 open class ImmutableList<E: Any> {
  @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_ImmutableListCompanion", swiftName = "J2ktDefinitelyNotNull_ImmutableListCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName(name = "copyOf")
   fun <E: Any> copyOf(
    @ObjCName(name = "withJavaLangIterable") iterable: MutableIterable<E>
   ): DefinitelyNotNull.ImmutableList<E> {
    throw RuntimeException()
   }

   @JvmStatic
   @ObjCName(name = "copyOfNullableWithCorrectBounds")
   fun <E> copyOfNullableWithCorrectBounds(
    @ObjCName(name = "withJavaLangIterable") iterable: MutableIterable<E & Any>
   ): DefinitelyNotNull.ImmutableList<E & Any> {
    return DefinitelyNotNull.ImmutableList.copyOf<E & Any>(iterable)
   }
  }
 }

 @ObjCName(name = "J2ktJ2ktDefinitelyNotNull_Equivalence", swiftName = "J2ktDefinitelyNotNull_Equivalence", exact = true)
 fun interface Equivalence<T: Any> {
  @ObjCName(name = "equivalent")
  fun equivalent(
   @ObjCName(name = "withId") a: T?,
   @ObjCName(name = "withId") b: T?
  ): Boolean
 }
}
