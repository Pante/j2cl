// Generated from "j2kt/SmartCasts.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Integer
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktSmartCasts", swiftName = "J2ktSmartCasts", exact = true)
open class SmartCasts {
 internal open fun testThisReferenceInConstructor_pp_j2kt() {
  open class Local<T: Local<T>> {
   @JvmField
   internal val fieldInitializedInConstructor_pp_j2kt: Any

   @JvmField
   internal var t_pp_j2kt: T

   internal constructor() {
    this.t_pp_j2kt = this as T
    this.fieldInitializedInConstructor_pp_j2kt = Integer.valueOf(1)
   }
  }
 }

 internal open fun testThisReferenceInInitializer_pp_j2kt() {
  open class Local<T: Local<T>> internal constructor() {
   @JvmField
   internal var fieldInitializedInInitializer_pp_j2kt: Any

   @JvmField
   internal var t_pp_j2kt: T

   init {
    this.t_pp_j2kt = this as T
    this.fieldInitializedInInitializer_pp_j2kt = Integer.valueOf(1)
   }
  }
 }

 @ObjCName("J2ktJ2ktSmartCastsCompanion", swiftName = "J2ktSmartCastsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testParameterReference")
  fun <T: Any> testParameterReference(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>
  ) {
   SmartCasts.acceptFooOfObject(
    foo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    foo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testFinalVariableReference")
  fun <T: Any> testFinalVariableReference(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>
  ) {
   val localFoo: Foo<T> = foo
   SmartCasts.acceptFooOfObject(
    (localFoo as Foo<Any>?)!!,
   )
   SmartCasts.acceptFooOfT<T>(
    localFoo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testNonFinalVariableReference")
  fun <T: Any> testNonFinalVariableReference(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>,
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo2: Foo<T>
  ) {
   var localFoo: Foo<T> = foo
   localFoo = foo2
   SmartCasts.acceptFooOfObject(
    (localFoo as Foo<Any>?)!!,
   )
   SmartCasts.acceptFooOfT<T>(
    localFoo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testArguments")
  fun <T: Any> testArguments(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>
  ) {
   SmartCasts.acceptFooOfObjectAndT<T>(
    foo as Foo<Any>,
    foo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testIfStatement")
  fun <T: Any> testIfStatement(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>,
   @ObjCName("withBoolean") condition: Boolean
  ) {
   if (condition) {
    SmartCasts.acceptT<Foo<Any>>(
     foo as Foo<Any>,
    )
   }
   SmartCasts.acceptFooOfT<T>(
    foo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testFinalFieldAccess")
  fun <T: Any> testFinalFieldAccess(
   @ObjCName("withJ2ktSmartCasts_Container", swiftName = "with") container: Container<T>
  ) {
   SmartCasts.acceptFooOfObject(
    container.foo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    container.foo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testFinalFieldAccessThroughCastVariable")
  fun <T: Any> testFinalFieldAccessThroughCastVariable(
   @ObjCName("withJ2ktSmartCasts_Container", swiftName = "with") container: Container<T>
  ) {
   SmartCasts.acceptFooOfObject(
    (container as Container<Any>).foo,
   )
   SmartCasts.acceptFooOfT<T>(
    (container as Container<T>).foo,
   )
  }

  @JvmStatic
  @ObjCName("testNonFinalFieldAccess")
  fun <T: Any> testNonFinalFieldAccess(
   @ObjCName("withJ2ktSmartCasts_Container", swiftName = "with") container: Container<T>
  ) {
   SmartCasts.acceptFooOfObject(
    container.nonFinalFoo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    container.nonFinalFoo as Foo<T>,
   )
  }

  @JvmStatic
  @ObjCName("testInvocation")
  fun <T: Any> testInvocation(
   @ObjCName("withJ2ktSmartCasts_Container", swiftName = "with") container: Container<T>
  ) {
   SmartCasts.acceptFooOfObject(
    container.getFoo() as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    container.getFoo(),
   )
  }

  @JvmStatic
  @ObjCName("testTypeArgumentInference")
  fun <T: Any> testTypeArgumentInference(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>
  ) {
   SmartCasts.acceptFooOfObject(
    foo as Foo<Any>,
   )
   SmartCasts.acceptT<T>(
    (foo as Foo<T>).get(),
   )
  }

  @JvmStatic
  @ObjCName("testArray")
  fun <T: Any> testArray(
   @ObjCName("withNSObjectArray") a: Array<T>
  ) {
   SmartCasts.acceptArrayOfObject(
    a as Array<Any>,
   )
   SmartCasts.acceptArrayOfT<T>(
    a as Array<T>,
   )
  }

  @JvmStatic
  @ObjCName("testVararg")
  fun <T: Any> testVararg(
   vararg @ObjCName("withNSObjectArray") a: T
  ) {
   val a_1: Array<T> = a as Array<T>
   SmartCasts.acceptArrayOfObject(
    a_1 as Array<Any>,
   )
   SmartCasts.acceptArrayOfT<T>(
    a_1 as Array<T>,
   )
  }

  @JvmStatic
  @ObjCName("acceptFooOfObject")
  fun acceptFooOfObject(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<Any>
  ) {}

  @JvmStatic
  @ObjCName("acceptFooOfT")
  fun <T: Any> acceptFooOfT(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<T>
  ) {}

  @JvmStatic
  @ObjCName("acceptFooOfObjectAndT")
  fun <T: Any> acceptFooOfObjectAndT(
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo: Foo<Any>,
   @ObjCName("withJ2ktSmartCasts_Foo", swiftName = "with") foo2: Foo<T>
  ) {}

  @JvmStatic
  @ObjCName("acceptT")
  fun <T: Any> acceptT(
   @ObjCName("withId") foo: T
  ) {}

  @JvmStatic
  @ObjCName("acceptArrayOfObject")
  fun acceptArrayOfObject(
   @ObjCName("withNSObjectArray") a: Array<Any>
  ) {}

  @JvmStatic
  @ObjCName("acceptArrayOfT")
  fun <T: Any> acceptArrayOfT(
   @ObjCName("withNSObjectArray") a: Array<T>
  ) {}
 }

 @ObjCName("J2ktJ2ktSmartCasts_Foo", swiftName = "J2ktSmartCasts_Foo", exact = true)
 fun interface Foo<T: Any> {
  @ObjCName("get")
  fun get(): T

  @ObjCName("testThisReference")
  fun testThisReference() {
   SmartCasts.acceptFooOfObject(
    this as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    this as Foo<T>,
   )
  }
 }

 @ObjCName("J2ktJ2ktSmartCasts_Container", swiftName = "J2ktSmartCasts_Container", exact = true)
 open class Container<T: Any> {
  @JvmField
  @ObjCName("foo_")
  val foo: Foo<T>

  @JvmField
  @ObjCName("nonFinalFoo_")
  var nonFinalFoo: Foo<T>

  constructor(
   @ObjCName("J2ktSmartCasts_Foo") foo: Foo<T>
  ) {
   this.foo = foo
   this.nonFinalFoo = foo
  }

  @ObjCName("getFoo")
  open fun getFoo(): Foo<T> {
   return this.foo
  }

  @ObjCName("testImplicitThisReference")
  open fun testImplicitThisReference() {
   SmartCasts.acceptFooOfObject(
    this.foo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    this.foo as Foo<T>,
   )
  }

  @ObjCName("testExplicitThisReference")
  open fun testExplicitThisReference() {
   SmartCasts.acceptFooOfObject(
    this.foo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    this.foo as Foo<T>,
   )
  }

  @ObjCName("testMixedThisReference")
  open fun testMixedThisReference() {
   SmartCasts.acceptFooOfObject(
    this.foo as Foo<Any>,
   )
   SmartCasts.acceptFooOfT<T>(
    this.foo as Foo<T>,
   )
  }

  @ObjCName("J2ktJ2ktSmartCasts_Container_SubContainer", swiftName = "J2ktSmartCasts_Container_SubContainer", exact = true)
  open class SubContainer<T: Any>: Container<T> {
   internal constructor(foo: Foo<T>): super(foo)

   @ObjCName("testSuperReference")
   open fun testSuperReference() {
    SmartCasts.acceptFooOfObject(
     super.foo as Foo<Any>,
    )
    SmartCasts.acceptFooOfT<T>(
     super.foo as Foo<T>,
    )
   }

   @ObjCName("testSuperAndThisReference")
   open fun testSuperAndThisReference() {
    SmartCasts.acceptFooOfObject(
     super.foo as Foo<Any>,
    )
    SmartCasts.acceptFooOfT<T>(
     this.foo as Foo<T>,
    )
   }
  }
 }
}
