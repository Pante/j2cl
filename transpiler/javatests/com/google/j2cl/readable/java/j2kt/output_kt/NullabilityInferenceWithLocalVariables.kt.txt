// Generated from "j2kt/NullabilityInferenceWithLocalVariables.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktNullabilityInferenceWithLocalVariables", swiftName = "J2ktNullabilityInferenceWithLocalVariables", exact = true)
open class NullabilityInferenceWithLocalVariables {
 @ObjCName(name = "J2ktJ2ktNullabilityInferenceWithLocalVariablesCompanion", swiftName = "J2ktNullabilityInferenceWithLocalVariablesCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "testArray")
  fun testArray(): Array<String> {
   val local: String = ""
   return arrayOf<String>(local, "")
  }

  @JvmStatic
  @ObjCName(name = "testConstructor")
  fun testConstructor(): NullabilityInferenceWithLocalVariables.Foo<String> {
   val local: String = ""
   return NullabilityInferenceWithLocalVariables.Foo<Any?>(local, "") as NullabilityInferenceWithLocalVariables.Foo<String>
  }

  @JvmStatic
  @ObjCName(name = "testMethod")
  fun testMethod(): NullabilityInferenceWithLocalVariables.Foo<String> {
   val local: String = ""
   return NullabilityInferenceWithLocalVariables.Foo.foo<String>(local, "")
  }

  @JvmStatic
  @ObjCName(name = "testMethodChain")
  fun testMethodChain(): NullabilityInferenceWithLocalVariables.Foo<String> {
   val l1: String = ""
   return NullabilityInferenceWithLocalVariables.Foo.foo<String>(l1).chain_pp_j2kt(
    NullabilityInferenceWithLocalVariables.Foo.foo<String>(""),
   )
  }
 }

 @ObjCName(name = "J2ktJ2ktNullabilityInferenceWithLocalVariables_Foo", swiftName = "J2ktNullabilityInferenceWithLocalVariables_Foo", exact = true)
 open class Foo<T> {
  internal constructor(t1: T, t2: T)

  internal open fun chain_pp_j2kt(foo: NullabilityInferenceWithLocalVariables.Foo<T>): NullabilityInferenceWithLocalVariables.Foo<T> {
   throw RuntimeException()
  }

  @ObjCName(name = "J2ktJ2ktNullabilityInferenceWithLocalVariables_FooCompanion", swiftName = "J2ktNullabilityInferenceWithLocalVariables_FooCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName(name = "foo")
   fun <T> foo(
    @ObjCName(name = "withId") t: T
   ): NullabilityInferenceWithLocalVariables.Foo<T> {
    throw RuntimeException()
   }

   @JvmStatic
   @ObjCName(name = "foo")
   fun <T> foo(
    @ObjCName(name = "withId") t1: T,
    @ObjCName(name = "withId") t2: T
   ): NullabilityInferenceWithLocalVariables.Foo<T> {
    throw RuntimeException()
   }
  }
 }
}
