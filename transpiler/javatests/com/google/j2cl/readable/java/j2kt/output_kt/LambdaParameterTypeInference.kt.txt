// Generated from "j2kt/LambdaParameterTypeInference.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktLambdaParameterTypeInference", exact = true)
open class LambdaParameterTypeInference {
 @ObjCName("J2ktJ2ktLambdaParameterTypeInferenceCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("wrap")
  fun <T> wrap(
   @ObjCName("withJ2ktLambdaParameterTypeInference_Consumer") consumer: LambdaParameterTypeInference.Consumer<T>?
  ): LambdaParameterTypeInference.Consumer<T>? {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("add")
  fun <T> add(
   @ObjCName("withJ2ktLambdaParameterTypeInference_Supplier") supplier: LambdaParameterTypeInference.Supplier<T>?,
   @ObjCName("withJ2ktLambdaParameterTypeInference_Consumer") consumer: LambdaParameterTypeInference.Consumer<in T>?
  ) {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("test")
  fun <T> test(
   @ObjCName("withJ2ktLambdaParameterTypeInference_Supplier") supplier: LambdaParameterTypeInference.Supplier<out T>?
  ) {
   LambdaParameterTypeInference.add(supplier, LambdaParameterTypeInference.wrap(LambdaParameterTypeInference.Consumer { x /* capture#1-of out T */ ->
   }))
  }
 }

 @ObjCName("J2ktJ2ktLambdaParameterTypeInference_Supplier", exact = true)
 fun interface Supplier<T> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktLambdaParameterTypeInference_Consumer", exact = true)
 fun interface Consumer<T> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withId") t: T
  )
 }
}
