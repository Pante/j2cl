// Generated from "j2kt/HiddenFromObjCTypes.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.io.IOException
import java.io.Writer
import java.lang.AssertionError
import java.lang.RuntimeException
import kotlin.Char
import kotlin.CharSequence
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.jvm.Throws
import kotlin.native.ObjCName
import kotlin.text.Appendable
import kotlin.text.StringBuilder

@ObjCName("J2ktJ2ktHiddenFromObjCTypes", swiftName = "J2ktHiddenFromObjCTypes", exact = true)
class HiddenFromObjCTypes {
 @ObjCName("J2ktJ2ktHiddenFromObjCTypesCompanion", swiftName = "J2ktHiddenFromObjCTypesCompanion", exact = true)
 companion object {
  @JvmField
  @ObjCName("appendable_")
  var appendable: Appendable? = null

  @JvmField
  @ObjCName("stringBuilder_")
  var stringBuilder: StringBuilder? = null

  @JvmField
  @ObjCName("writer_")
  var writer: Writer? = null

  @JvmStatic
  @ObjCName("returnsStringBuilder")
  fun returnsStringBuilder(
   @ObjCName("withInt", swiftName = "with") i: Int
  ): StringBuilder {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("takesStringBuilder")
  fun takesStringBuilder(
   @ObjCName("withInt", swiftName = "with") i: Int,
   @ObjCName("withJavaLangStringBuilder", swiftName = "with") stringBuilder: StringBuilder
  ) {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("hasStringBuilderParameter")
  fun <T: StringBuilder> hasStringBuilderParameter(
   @ObjCName("withInt", swiftName = "with") i: Int,
   @ObjCName("withJavaLangStringBuilder", swiftName = "with") stringBuilder: T
  ) {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("hasStringBuilderTypeVariable")
  fun hasStringBuilderTypeVariable(
   @ObjCName("withInt", swiftName = "with") i: Int,
   @ObjCName("withJ2ktHiddenFromObjCTypes_Supplier", swiftName = "with") stringBuilder: Supplier<StringBuilder>
  ) {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("hasStringBuilderWildcard")
  fun hasStringBuilderWildcard(
   @ObjCName("withInt", swiftName = "with") i: Int,
   @ObjCName("withJ2ktHiddenFromObjCTypes_Supplier", swiftName = "with") stringBuilder: Supplier<out StringBuilder>
  ) {
   throw RuntimeException()
  }
 }

 @ObjCName("J2ktJ2ktHiddenFromObjCTypes_Supplier", swiftName = "J2ktHiddenFromObjCTypes_Supplier", exact = true)
 fun interface Supplier<T> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktHiddenFromObjCTypes_GenericWithStringBuilder", swiftName = "J2ktHiddenFromObjCTypes_GenericWithStringBuilder", exact = true)
 fun interface GenericWithStringBuilder<T: StringBuilder> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktHiddenFromObjCTypes_CustomAppendable", swiftName = "J2ktHiddenFromObjCTypes_CustomAppendable", exact = true)
 class CustomAppendable: Appendable {
  @Throws(IOException::class)
  override fun append(csq: CharSequence?): Appendable {
   throw IOException()
  }

  @Throws(IOException::class)
  override fun append(csq: CharSequence?, start: Int, end: Int): Appendable {
   throw IOException()
  }

  @Throws(IOException::class)
  override fun append(c: Char): Appendable {
   throw IOException()
  }
 }

 @ObjCName("J2ktJ2ktHiddenFromObjCTypes_StringBuilderSupplier", swiftName = "J2ktHiddenFromObjCTypes_StringBuilderSupplier", exact = true)
 class StringBuilderSupplier: Supplier<StringBuilder> {
  override fun get(): StringBuilder {
   throw AssertionError()
  }
 }
}
