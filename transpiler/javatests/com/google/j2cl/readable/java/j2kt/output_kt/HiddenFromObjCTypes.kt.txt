// Generated from "j2kt/HiddenFromObjCTypes.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.io.IOException
import java.io.Writer
import java.lang.AssertionError
import java.lang.RuntimeException
import kotlin.Char
import kotlin.CharSequence
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.jvm.Throws
import kotlin.text.Appendable
import kotlin.text.StringBuilder

class HiddenFromObjCTypes {
 companion object {
  @JvmField
  var appendable: Appendable? = null

  @JvmField
  var stringBuilder: StringBuilder? = null

  @JvmField
  var writer: Writer? = null

  @JvmStatic
  fun returnsStringBuilder(i: Int): StringBuilder {
   throw RuntimeException()
  }

  @JvmStatic
  fun takesStringBuilder(i: Int, stringBuilder: StringBuilder) {
   throw RuntimeException()
  }

  @JvmStatic
  fun <T: StringBuilder> hasStringBuilderParameter(i: Int, stringBuilder: T) {
   throw RuntimeException()
  }

  @JvmStatic
  fun hasStringBuilderTypeVariable(i: Int, stringBuilder: Supplier<StringBuilder>) {
   throw RuntimeException()
  }

  @JvmStatic
  fun hasStringBuilderWildcard(i: Int, stringBuilder: Supplier<out StringBuilder>) {
   throw RuntimeException()
  }
 }

 fun interface Supplier<T> {
  fun get(): T
 }

 fun interface GenericWithStringBuilder<T: StringBuilder> {
  fun get(): T
 }

 class CustomAppendable: Appendable {
  @Throws(IOException::class)
  override fun append(csq: CharSequence?): Appendable {
   throw IOException()
  }

  @Throws(IOException::class)
  override fun append(csq: CharSequence?, start: Int, end: Int): Appendable {
   throw IOException()
  }

  @Throws(IOException::class)
  override fun append(c: Char): Appendable {
   throw IOException()
  }
 }

 class StringBuilderSupplier: Supplier<StringBuilder> {
  override fun get(): StringBuilder {
   throw AssertionError()
  }
 }
}
