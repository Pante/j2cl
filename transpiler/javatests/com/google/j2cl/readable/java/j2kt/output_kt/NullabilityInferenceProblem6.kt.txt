// Generated from "j2kt/NullabilityInferenceProblem6.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem6", exact = true)
open class NullabilityInferenceProblem6 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6Companion", exact = true)
 companion object {
  @JvmStatic
  internal fun testLambda_pp_j2kt(from: NullabilityInferenceProblem6.Container<*>, to: NullabilityInferenceProblem6.Container<in Any?>) {
   (from as NullabilityInferenceProblem6.Container<Any?>).forEach(
    NullabilityInferenceProblem6.Consumer/* <*> */ { it /* capture#1-of * */ ->
     to.add(it)
    },
   )
  }

  @JvmStatic
  internal fun testMethodReference_pp_j2kt(from: NullabilityInferenceProblem6.Container<*>, to: NullabilityInferenceProblem6.Container<in Any?>) {
   (from as NullabilityInferenceProblem6.Container<Any?>).forEach(
    NullabilityInferenceProblem6.Consumer/* <*> */ { arg0 /* capture#2-of * */ ->
     to.add(arg0)
    },
   )
  }

  @JvmStatic
  internal fun testLambda_pp_j2kt(from: NullabilityInferenceProblem6.FooContainer<*>, to: NullabilityInferenceProblem6.FooContainer<in NullabilityInferenceProblem6.Foo?>) {
   (from as NullabilityInferenceProblem6.FooContainer<NullabilityInferenceProblem6.Foo?>).forEach(
    NullabilityInferenceProblem6.Consumer/* <capture#3-of out NullabilityInferenceProblem6.Foo?> */ { it /* capture#3-of out NullabilityInferenceProblem6.Foo? */ ->
     to.add(it)
    },
   )
  }

  @JvmStatic
  internal fun testMethodReference_pp_j2kt(from: NullabilityInferenceProblem6.FooContainer<*>, to: NullabilityInferenceProblem6.FooContainer<in NullabilityInferenceProblem6.Foo?>) {
   (from as NullabilityInferenceProblem6.FooContainer<NullabilityInferenceProblem6.Foo?>).forEach(
    NullabilityInferenceProblem6.Consumer/* <capture#4-of out NullabilityInferenceProblem6.Foo?> */ { arg0 /* capture#4-of out NullabilityInferenceProblem6.Foo? */ ->
     to.add(arg0)
    },
   )
  }
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6_Consumer", exact = true)
 fun interface Consumer<V> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withId") v: V
  )
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6_Container", exact = true)
 interface Container<V> {
  @ObjCName("forEach")
  fun forEach(
   @ObjCName("withJ2ktNullabilityInferenceProblem6_Consumer") consumer: NullabilityInferenceProblem6.Consumer<V>
  )

  @ObjCName("add")
  fun add(
   @ObjCName("withId") v: V
  )
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6_Foo", exact = true)
 interface Foo

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6_FooConsumer", exact = true)
 fun interface FooConsumer<V: NullabilityInferenceProblem6.Foo?> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withJ2ktNullabilityInferenceProblem6_Foo") v: V
  )
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem6_FooContainer", exact = true)
 interface FooContainer<V: NullabilityInferenceProblem6.Foo?> {
  @ObjCName("forEach")
  fun forEach(
   @ObjCName("withJ2ktNullabilityInferenceProblem6_Consumer") consumer: NullabilityInferenceProblem6.Consumer<V>
  )

  @ObjCName("add")
  fun add(
   @ObjCName("withJ2ktNullabilityInferenceProblem6_Foo") v: V
  )
 }
}
