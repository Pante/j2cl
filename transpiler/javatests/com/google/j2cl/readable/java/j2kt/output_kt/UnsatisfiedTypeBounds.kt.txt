// Generated from "j2kt/UnsatisfiedTypeBounds.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktUnsatisfiedTypeBounds", swiftName = "J2ktUnsatisfiedTypeBounds", exact = true)
open class UnsatisfiedTypeBounds internal constructor() {
 @ObjCName(name = "J2ktJ2ktUnsatisfiedTypeBounds_Foo", swiftName = "J2ktUnsatisfiedTypeBounds_Foo", exact = true)
 fun interface Foo<T: UnsatisfiedTypeBounds.Foo<T>> {
  @ObjCName(name = "get")
  fun get(): T
 }

 @ObjCName(name = "J2ktJ2ktUnsatisfiedTypeBounds_Command", swiftName = "J2ktUnsatisfiedTypeBounds_Command", exact = true)
 interface Command

 @ObjCName(name = "J2ktJ2ktUnsatisfiedTypeBounds_FooCommand", swiftName = "J2ktUnsatisfiedTypeBounds_FooCommand", exact = true)
 open class FooCommand internal constructor(): UnsatisfiedTypeBounds.Foo<UnsatisfiedTypeBounds.FooCommand>, UnsatisfiedTypeBounds.Command {
  override fun get(): UnsatisfiedTypeBounds.FooCommand {
   return this
  }
 }

 @ObjCName(name = "J2ktJ2ktUnsatisfiedTypeBounds_Helper", swiftName = "J2ktUnsatisfiedTypeBounds_Helper", exact = true)
 class Helper<T: Any> internal constructor()
}
