// Generated from "j2kt/NullabilityInferenceProblem9.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem9", swiftName = "J2ktNullabilityInferenceProblem9", exact = true)
open class NullabilityInferenceProblem9 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem9Companion", swiftName = "J2ktNullabilityInferenceProblem9Companion", exact = true)
 companion object {
  @JvmStatic
  internal fun <V> future_pp_j2kt(v: V): NullabilityInferenceProblem9.Future<V> {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun <I, O> transformFuture_pp_j2kt(future: NullabilityInferenceProblem9.Future<I>, fn: NullabilityInferenceProblem9.FutureFunction<in I, out O>): NullabilityInferenceProblem9.Future<O> {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun test_pp_j2kt(nullableFooFuture: NullabilityInferenceProblem9.Future<NullabilityInferenceProblem9.Foo?>, fooFuture: NullabilityInferenceProblem9.Future<NullabilityInferenceProblem9.Foo>): NullabilityInferenceProblem9.Future<NullabilityInferenceProblem9.Foo> {
   return NullabilityInferenceProblem9.transformFuture_pp_j2kt<NullabilityInferenceProblem9.Foo?, NullabilityInferenceProblem9.Foo>(
    nullableFooFuture,
    NullabilityInferenceProblem9.FutureFunction/* <in NullabilityInferenceProblem9.Foo?, out NullabilityInferenceProblem9.Foo> */ { nullableFoo: NullabilityInferenceProblem9.Foo? ->
     if (nullableFoo != null) {
      return@FutureFunction NullabilityInferenceProblem9.future_pp_j2kt<NullabilityInferenceProblem9.Foo>(
       nullableFoo!!,
      )
     }
     return@FutureFunction fooFuture
    },
   )
  }
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem9_Foo", swiftName = "J2ktNullabilityInferenceProblem9_Foo", exact = true)
 interface Foo

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem9_Future", swiftName = "J2ktNullabilityInferenceProblem9_Future", exact = true)
 interface Future<V>

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem9_FutureFunction", swiftName = "J2ktNullabilityInferenceProblem9_FutureFunction", exact = true)
 fun interface FutureFunction<I, O> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") i: I
  ): NullabilityInferenceProblem9.Future<O>
 }
}
