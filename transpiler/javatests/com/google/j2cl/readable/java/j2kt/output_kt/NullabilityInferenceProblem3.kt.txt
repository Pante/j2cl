// Generated from "j2kt/NullabilityInferenceProblem3.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem3", swiftName = "J2ktNullabilityInferenceProblem3", exact = true)
open class NullabilityInferenceProblem3 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem3_Generic", swiftName = "J2ktNullabilityInferenceProblem3_Generic", exact = true)
 abstract class Generic<T: NullabilityInferenceProblem3.Generic<T>> {
  @ObjCName("concat")
  open fun concat(
   @ObjCName("withJ2ktNullabilityInferenceProblem3_Generic") generic: NullabilityInferenceProblem3.Generic<*>
  ): T {
   throw RuntimeException()
  }

  @ObjCName("toConcrete")
  open fun toConcrete(): NullabilityInferenceProblem3.Concrete {
   throw RuntimeException()
  }
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem3_Concrete", swiftName = "J2ktNullabilityInferenceProblem3_Concrete", exact = true)
 class Concrete: NullabilityInferenceProblem3.Generic<NullabilityInferenceProblem3.Concrete> {
  private val delegate: NullabilityInferenceProblem3.Generic<*>

  constructor(
   @ObjCName("J2ktNullabilityInferenceProblem3_Generic") delegate: NullabilityInferenceProblem3.Generic<*>
  ) {
   this.delegate = delegate
  }

  override fun concat(generic: NullabilityInferenceProblem3.Generic<*>): NullabilityInferenceProblem3.Concrete {
   return this.delegate.concat(generic).toConcrete()
  }
 }
}
