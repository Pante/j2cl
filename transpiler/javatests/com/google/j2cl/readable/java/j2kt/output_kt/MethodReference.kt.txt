// Generated from "j2kt/MethodReference.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktMethodReference", swiftName = "J2ktMethodReference", exact = true)
class MethodReference internal constructor() {
 @ObjCName("J2ktJ2ktMethodReferenceCompanion", swiftName = "J2ktMethodReferenceCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun <T> foo_pp_j2kt(inputs: Foo<out Foo<out T>>) {
   MethodReference.transform_pp_j2kt/* <capture#1-of out Foo<out T>, Foo<capture#2-of out T>> */(
    inputs,
    object : Function<Foo<out T>, Foo<out T>> {
     override fun <H> apply(arg0: Foo<out T>): Foo<out T> {
      val arg0_1 /* capture#1-of out Foo<out T> */ = arg0 as Foo<out T>
      return arg0_1.bar()
     }
    },
   )
  }

  @JvmStatic
  internal fun <F, T> transform_pp_j2kt(foo: Foo<F>, function: Function<in F, out T>) {}
 }

 @ObjCName("J2ktJ2ktMethodReference_Function", swiftName = "J2ktMethodReference_Function", exact = true)
 interface Function<T, R> {
  @ObjCName("apply")
  fun <H> apply(
   @ObjCName("withId") t: T
  ): R
 }

 @ObjCName("J2ktJ2ktMethodReference_Foo", swiftName = "J2ktMethodReference_Foo", exact = true)
 fun interface Foo<T> {
  @ObjCName("bar")
  fun bar(): Foo<T>
 }
}
