// Generated from "j2kt/NullabilityInferenceProblem2.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem2", exact = true)
open class NullabilityInferenceProblem2 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem2_Supplier", exact = true)
 fun interface Supplier<T> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem2_Test", exact = true)
 abstract inner class Test<T> {
  @ObjCName("foo")
  open fun <E: T> foo(
   @ObjCName("withJ2ktNullabilityInferenceProblem2_Supplier") supplier: NullabilityInferenceProblem2.Supplier<E>
  ): E {
   val local: E? = supplier.get()
   return this.foo<E>(local as E, supplier.get())
  }

  @ObjCName("foo")
  open fun <E: T> foo(
   @ObjCName("withId") a: E,
   @ObjCName("withId") b: E
  ): E {
   throw RuntimeException()
  }
 }
}
