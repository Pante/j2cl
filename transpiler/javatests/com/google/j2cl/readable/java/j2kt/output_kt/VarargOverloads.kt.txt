// Generated from "j2kt/VarargOverloads.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktVarargOverloads", swiftName = "J2ktVarargOverloads", exact = true)
open class VarargOverloads internal constructor() {
 @ObjCName(name = "J2ktJ2ktVarargOverloads_NewInstanceOverload", swiftName = "J2ktVarargOverloads_NewInstanceOverload", exact = true)
 open class NewInstanceOverload {
  internal constructor(foo: Int, vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  internal constructor(foo: Int, vararg strings: String?) {
   val strings_1: Array<String?>? = strings as Array<String?>?
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_NewInstanceOverloadCompanion", swiftName = "J2ktVarargOverloads_NewInstanceOverloadCompanion", exact = true)
  companion object {
   @JvmStatic
   internal fun test_pp_j2kt() {
    VarargOverloads.NewInstanceOverload(
     0,
     *arrayOf<String?>()!!,
    )
   }
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_ThisConstructorCallOverload", swiftName = "J2ktVarargOverloads_ThisConstructorCallOverload", exact = true)
 open class ThisConstructorCallOverload {
  internal constructor(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  internal constructor(vararg strings: String?) {
   val strings_1: Array<String?>? = strings as Array<String?>?
  }

  internal constructor(foo: Int): this(
   *arrayOf<String?>()!!,
  )
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_SuperConstructorCallOverload", swiftName = "J2ktVarargOverloads_SuperConstructorCallOverload", exact = true)
 open class SuperConstructorCallOverload {
  internal constructor(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  internal constructor(vararg strings: String?) {
   val strings_1: Array<String?>? = strings as Array<String?>?
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_SuperConstructorCallOverload_Explicit", swiftName = "J2ktVarargOverloads_SuperConstructorCallOverload_Explicit", exact = true)
  open class Explicit: VarargOverloads.SuperConstructorCallOverload {
   internal constructor(): super(
    *arrayOf<String?>()!!,
   )
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_SuperConstructorCallOverload_Implicit", swiftName = "J2ktVarargOverloads_SuperConstructorCallOverload_Implicit", exact = true)
  open class Implicit: VarargOverloads.SuperConstructorCallOverload {
   internal constructor(): super(
    *arrayOf<String?>()!!,
   )
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_SuperConstructorCallOverload_FromImplicitConstructor", swiftName = "J2ktVarargOverloads_SuperConstructorCallOverload_FromImplicitConstructor", exact = true)
  open class FromImplicitConstructor: VarargOverloads.SuperConstructorCallOverload {
   internal constructor(): super(
    *arrayOf<String?>()!!,
   )
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_MethodCallOverload", swiftName = "J2ktVarargOverloads_MethodCallOverload", exact = true)
 open class MethodCallOverload internal constructor() {
  internal open fun method_pp_j2kt(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  internal open fun method_pp_j2kt(vararg strings: String?) {
   val strings_1: Array<String?>? = strings as Array<String?>?
  }

  internal open fun test_pp_j2kt() {
   this.method_pp_j2kt(
    *arrayOf<String?>()!!,
   )
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_MethodCallOverloadInSubtype", swiftName = "J2ktVarargOverloads_MethodCallOverloadInSubtype", exact = true)
 open class MethodCallOverloadInSubtype internal constructor() {
  internal open fun method_pp_j2kt(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_MethodCallOverloadInSubtype_Subtype", swiftName = "J2ktVarargOverloads_MethodCallOverloadInSubtype_Subtype", exact = true)
  open class Subtype internal constructor(): VarargOverloads.MethodCallOverloadInSubtype() {
   internal open fun method_pp_j2kt(vararg strings: String?) {
    val strings_1: Array<String?>? = strings as Array<String?>?
   }

   internal open fun test_pp_j2kt() {
    this.method_pp_j2kt(
     *arrayOf<String?>()!!,
    )
   }
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_MethodCallVarargAndArrayArgs", swiftName = "J2ktVarargOverloads_MethodCallVarargAndArrayArgs", exact = true)
 open class MethodCallVarargAndArrayArgs internal constructor() {
  internal open fun method_pp_j2kt(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  internal open fun method_pp_j2kt(strings: Array<String?>?) {}

  internal open fun test_pp_j2kt() {
   this.method_pp_j2kt()
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget", swiftName = "J2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget", exact = true)
 open class StaticMethodOverloadSubtypeCallTarget internal constructor() {
  internal open fun test_pp_j2kt() {
   VarargOverloads.StaticMethodOverloadSubtypeCallTarget.method_pp_j2kt()
   VarargOverloads.StaticMethodOverloadSubtypeCallTarget.generalizedInSubtype_pp_j2kt()
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_StaticMethodOverloadSubtypeCallTargetCompanion", swiftName = "J2ktVarargOverloads_StaticMethodOverloadSubtypeCallTargetCompanion", exact = true)
  companion object {
   @JvmStatic
   internal fun method_pp_j2kt(vararg objects: Any?) {
    val objects_1: Array<Any?>? = objects as Array<Any?>?
   }

   @JvmStatic
   internal fun method_pp_j2kt(strings: Array<String?>?) {}

   @JvmStatic
   internal fun generalizedInSubtype_pp_j2kt(vararg strings: String?) {
    val strings_1: Array<String?>? = strings as Array<String?>?
   }
  }

  @ObjCName(name = "J2ktJ2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget_Subtype", swiftName = "J2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget_Subtype", exact = true)
  open class Subtype internal constructor(): VarargOverloads.StaticMethodOverloadSubtypeCallTarget() {
   @ObjCName(name = "J2ktJ2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget_SubtypeCompanion", swiftName = "J2ktVarargOverloads_StaticMethodOverloadSubtypeCallTarget_SubtypeCompanion", exact = true)
   companion object {
    @JvmStatic
    internal fun generalizedInSubtype_pp_j2kt(vararg objects: Any?) {
     val objects_1: Array<Any?>? = objects as Array<Any?>?
    }
   }
  }
 }

 @ObjCName(name = "J2ktJ2ktVarargOverloads_EnumWithOverloadedConstructors", swiftName = "J2ktVarargOverloads_EnumWithOverloadedConstructors", exact = true)
 enum class EnumWithOverloadedConstructors {
  @ObjCName(name = "CONSTRUCTOR_OVERLOAD")
  CONSTRUCTOR_OVERLOAD(
   *arrayOf<String?>()!!,
  ),
  @ObjCName(name = "SUPER_CONSTRUCTOR_OVERLOAD")
  SUPER_CONSTRUCTOR_OVERLOAD(
   *arrayOf<String?>()!!,
  );

  constructor(vararg objects: Any?) {
   val objects_1: Array<Any?>? = objects as Array<Any?>?
  }

  constructor(vararg strings: String?) {
   val strings_1: Array<String?>? = strings as Array<String?>?
  }
 }
}
