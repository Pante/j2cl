// Generated from "j2kt/NullnessCheckerErrorWorkarounds.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktNullnessCheckerErrorWorkarounds", swiftName = "J2ktNullnessCheckerErrorWorkarounds", exact = true)
open class NullnessCheckerErrorWorkarounds internal constructor() {
 @ObjCName(name = "J2ktJ2ktNullnessCheckerErrorWorkaroundsCompanion", swiftName = "J2ktNullnessCheckerErrorWorkaroundsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testNullableAnnotation_pp_j2kt(table: NullnessCheckerErrorWorkarounds.Table<out NullnessCheckerErrorWorkarounds.Cell<*>>) {
   val cell: NullnessCheckerErrorWorkarounds.Cell<*>? = table.get() as NullnessCheckerErrorWorkarounds.Cell<*>?
  }

  @JvmStatic
  internal fun testSuppressWarnings_pp_j2kt(table: NullnessCheckerErrorWorkarounds.Table<out NullnessCheckerErrorWorkarounds.Cell<*>>) {
   val cell: NullnessCheckerErrorWorkarounds.Cell<*>? = table.get() as NullnessCheckerErrorWorkarounds.Cell<*>?
  }
 }

 @ObjCName(name = "J2ktJ2ktNullnessCheckerErrorWorkarounds_Array", swiftName = "J2ktNullnessCheckerErrorWorkarounds_Array", exact = true)
 fun interface Array<T> {
  @ObjCName(name = "get")
  fun get(): T?
 }

 @ObjCName(name = "J2ktJ2ktNullnessCheckerErrorWorkarounds_Cell", swiftName = "J2ktNullnessCheckerErrorWorkarounds_Cell", exact = true)
 interface Cell<C: NullnessCheckerErrorWorkarounds.Cell<C>>

 @ObjCName(name = "J2ktJ2ktNullnessCheckerErrorWorkarounds_Table", swiftName = "J2ktNullnessCheckerErrorWorkarounds_Table", exact = true)
 fun interface Table<C: NullnessCheckerErrorWorkarounds.Cell<C>>: NullnessCheckerErrorWorkarounds.Array<C>
}
