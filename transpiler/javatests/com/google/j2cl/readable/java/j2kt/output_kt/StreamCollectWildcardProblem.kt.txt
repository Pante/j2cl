// Generated from "j2kt/StreamCollectWildcardProblem.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import java.util.function.Function
import java.util.stream.Collector
import java.util.stream.Collectors
import java.util.stream.Stream
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktStreamCollectWildcardProblem", exact = true)
open class StreamCollectWildcardProblem {
 @ObjCName("J2ktJ2ktStreamCollectWildcardProblemCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testCollect")
  fun testCollect(
   @ObjCName("withJavaUtilStreamStream") list: Stream<StreamCollectWildcardProblem.Foo<*>>
  ) {
   StreamCollectWildcardProblem.accept(
    list.collect<MutableList<StreamCollectWildcardProblem.Foo<*>>, Any>(
     Collectors.toList<StreamCollectWildcardProblem.Foo<*>>() as Collector<StreamCollectWildcardProblem.Foo<*>, Any, MutableList<StreamCollectWildcardProblem.Foo<*>>>,
    ),
   )
  }

  @JvmStatic
  @ObjCName("testCollectWithExplicitTypeArgumentFix")
  fun testCollectWithExplicitTypeArgumentFix(
   @ObjCName("withJavaUtilStreamStream") list: Stream<StreamCollectWildcardProblem.Foo<*>>
  ) {
   StreamCollectWildcardProblem.accept(
    list.collect/* <MutableList<StreamCollectWildcardProblem.Foo<*>>, capture#1-of out Any> */(
     Collectors.toList<StreamCollectWildcardProblem.Foo<*>>(),
    ),
   )
  }

  @JvmStatic
  @ObjCName("testMethodReferenceMapCollectWithExplicitTypeArgumentFix")
  fun testMethodReferenceMapCollectWithExplicitTypeArgumentFix(
   @ObjCName("withJavaUtilStreamStream") list: Stream<StreamCollectWildcardProblem.Foo<*>>
  ) {
   StreamCollectWildcardProblem.accept(
    list.map/* <StreamCollectWildcardProblem.Foo<*>> */(
     Function/* <in StreamCollectWildcardProblem.Foo<*>, out StreamCollectWildcardProblem.Foo<*>> */ { arg0: StreamCollectWildcardProblem.Foo<*> ->
      return@Function arg0.getThis()
     },
    ).collect/* <MutableList<StreamCollectWildcardProblem.Foo<*>>, capture#2-of out Any> */(
     Collectors.toList<StreamCollectWildcardProblem.Foo<*>>(),
    ),
   )
  }

  @JvmStatic
  @ObjCName("testLambdaMapCollectWithExplicitTypeArgumentFix")
  fun testLambdaMapCollectWithExplicitTypeArgumentFix(
   @ObjCName("withJavaUtilStreamStream") list: Stream<StreamCollectWildcardProblem.Foo<*>>
  ) {
   StreamCollectWildcardProblem.accept(
    list.map/* <StreamCollectWildcardProblem.Foo<*>> */(
     Function/* <in StreamCollectWildcardProblem.Foo<*>, out StreamCollectWildcardProblem.Foo<*>> */ { it: StreamCollectWildcardProblem.Foo<*> ->
      return@Function it.getThis()
     },
    ).collect/* <MutableList<StreamCollectWildcardProblem.Foo<*>>, capture#3-of out Any> */(
     Collectors.toList<StreamCollectWildcardProblem.Foo<*>>(),
    ),
   )
  }

  @JvmStatic
  @ObjCName("accept")
  fun accept(
   @ObjCName("withJavaUtilList") list: MutableList<StreamCollectWildcardProblem.Foo<*>>
  ) {
   throw RuntimeException()
  }
 }

 @ObjCName("J2ktJ2ktStreamCollectWildcardProblem_Foo", exact = true)
 fun interface Foo<T: Any> {
  @ObjCName("getThis")
  fun getThis(): StreamCollectWildcardProblem.Foo<T>
 }
}
