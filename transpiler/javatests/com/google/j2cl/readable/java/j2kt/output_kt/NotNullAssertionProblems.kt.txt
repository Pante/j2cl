// Generated from "j2kt/NotNullAssertionProblems.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktNotNullAssertionProblems", swiftName = "J2ktNotNullAssertionProblems", exact = true)
open class NotNullAssertionProblems {
 @ObjCName(name = "testArrayLiteral")
 open fun testArrayLiteral(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  val array0: Array<String?>? = arrayOf<String>(null!!) as Array<String?>?
  val array1: Array<String?>? = arrayOf<String>(string, null!!) as Array<String?>?
  val array2: Array<String?>? = arrayOf<String>(string, nullableString!!) as Array<String?>?
  val array3: Array<String?>? = arrayOf<String>(null!!, string) as Array<String?>?
  val array4: Array<String?>? = arrayOf<String>(nullableString!!, string) as Array<String?>?
 }

 @ObjCName(name = "testNewArray")
 open fun testNewArray(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  val array0: Array<String?>? = arrayOf<String?>(null)
  val array1: Array<String?>? = arrayOf<String?>(string, null)
  val array2: Array<String?>? = arrayOf<String?>(string, nullableString)
  val array3: Array<String?>? = arrayOf<String?>(null, string)
  val array4: Array<String?>? = arrayOf<String?>(nullableString, string)
 }

 @ObjCName(name = "testExplicitInvocationTypeArguments")
 open fun testExplicitInvocationTypeArguments(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<String?>(null)
  NotNullAssertionProblems.accept2<String?>(string, null)
  NotNullAssertionProblems.accept2<String?>(string, nullableString)
  NotNullAssertionProblems.accept2<String?>(null, string)
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String?>(string, null)
  NotNullAssertionProblems.acceptVararg<String?>(string, nullableString)
  NotNullAssertionProblems.acceptVararg<String?>(null, string)
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String?>(
   supplier as NotNullAssertionProblems.Supplier<String?>,
   nullableString,
  )
  NotNullAssertionProblems.acceptUpperBound<String?>(
   supplier as NotNullAssertionProblems.Supplier<String>,
   nullableString,
  )
 }

 @ObjCName(name = "testImplicitInvocationTypeArguments")
 open fun testImplicitInvocationTypeArguments(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<Any>(
   null!!,
  )
  NotNullAssertionProblems.accept2<String>(
   string,
   null!!,
  )
  NotNullAssertionProblems.accept2<String>(
   string,
   nullableString!!,
  )
  NotNullAssertionProblems.accept2<String>(
   null!!,
   string,
  )
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String>(
   string,
   null!!,
  )
  NotNullAssertionProblems.acceptVararg<String>(
   string,
   nullableString!!,
  )
  NotNullAssertionProblems.acceptVararg<String>(
   null!!,
   string,
  )
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String>(
   supplier,
   nullableString!!,
  )
  NotNullAssertionProblems.acceptUpperBound<String>(
   supplier,
   nullableString!!,
  )
 }

 @ObjCName(name = "testExplicitConstructorTypeArguments")
 open fun testExplicitConstructorTypeArguments(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<String?>(null)
  NotNullAssertionProblems.Consumer<String?>(string, null)
  NotNullAssertionProblems.Consumer<String?>(string, nullableString)
  NotNullAssertionProblems.Consumer<String?>(null, string)
  NotNullAssertionProblems.Consumer<String?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<String?>(string, null)
  NotNullAssertionProblems.VarargConsumer<String?>(string, nullableString)
  NotNullAssertionProblems.VarargConsumer<String?>(null, string)
  NotNullAssertionProblems.VarargConsumer<String?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<String?>(
   supplier as NotNullAssertionProblems.Supplier<String?>,
   nullableString,
  )
  NotNullAssertionProblems.UpperWildcardConsumer<String?>(
   supplier as NotNullAssertionProblems.Supplier<String>,
   nullableString,
  )
 }

 @ObjCName(name = "testImplicitConstructorTypeArguments")
 open fun testImplicitConstructorTypeArguments(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<Any>(
   null!!,
  )
  NotNullAssertionProblems.Consumer<String>(
   string,
   null!!,
  )
  NotNullAssertionProblems.Consumer<String>(
   string,
   nullableString!!,
  )
  NotNullAssertionProblems.Consumer<String>(
   null!!,
   string,
  )
  NotNullAssertionProblems.Consumer<String?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<String>(
   string,
   null!!,
  )
  NotNullAssertionProblems.VarargConsumer<String>(
   string,
   nullableString!!,
  )
  NotNullAssertionProblems.VarargConsumer<String>(
   null!!,
   string,
  )
  NotNullAssertionProblems.VarargConsumer<String?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<String>(
   supplier,
   nullableString!!,
  )
  NotNullAssertionProblems.UpperWildcardConsumer<String>(
   supplier,
   nullableString!!,
  )
 }

 @ObjCName(name = "testImplicitRawConstructorTypeArguments")
 open fun testImplicitRawConstructorTypeArguments(
  @ObjCName(name = "withNSString") string: String,
  @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName(name = "withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<Any?>(null)
  NotNullAssertionProblems.Consumer<Any?>(string, null)
  NotNullAssertionProblems.Consumer<Any?>(string, nullableString)
  NotNullAssertionProblems.Consumer<Any?>(null, string)
  NotNullAssertionProblems.Consumer<Any?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<Any?>(string, null)
  NotNullAssertionProblems.VarargConsumer<Any?>(string, nullableString)
  NotNullAssertionProblems.VarargConsumer<Any?>(null, string)
  NotNullAssertionProblems.VarargConsumer<Any?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<Any?>(
   supplier as NotNullAssertionProblems.Supplier<Any?>,
   nullableString,
  )
  NotNullAssertionProblems.UpperWildcardConsumer<Any?>(
   supplier as NotNullAssertionProblems.Supplier<Any?>,
   nullableString,
  )
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblemsCompanion", swiftName = "J2ktNotNullAssertionProblemsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "testImplicitInvocationTypeArguments_wildcards")
  fun testImplicitInvocationTypeArguments_wildcards(
   @ObjCName(name = "withNSString") string: String,
   @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.accept1/* <*> */(
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.accept2<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.acceptVararg<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName(name = "testImplicitConstructorTypeArguments_wildcards")
  fun testImplicitConstructorTypeArguments_wildcards(
   @ObjCName(name = "withNSString") string: String,
   @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer/* <*> */(
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.Consumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.VarargConsumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName(name = "testRawConstructorTypeArguments_wildcards")
  fun testRawConstructorTypeArguments_wildcards(
   @ObjCName(name = "withNSString") string: String,
   @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer<Any?>(
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.Consumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.VarargConsumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName(name = "testImplicitConstructorTypeArguments_inference")
  fun testImplicitConstructorTypeArguments_inference(
   @ObjCName(name = "withNSString") string: String
  ) {
   NotNullAssertionProblems.Consumer<String>(
    string,
    null!!,
   ).accept(
    null!!,
   )
   NotNullAssertionProblems.VarargConsumer<String>(
    string,
    null!!,
   ).accept(
    null!!,
   )
  }

  @JvmStatic
  @ObjCName(name = "accept1")
  fun <T> accept1(
   @ObjCName(name = "withId") t: T
  ) {}

  @JvmStatic
  @ObjCName(name = "accept2")
  fun <T> accept2(
   @ObjCName(name = "withId") t1: T,
   @ObjCName(name = "withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName(name = "acceptUpperBound")
  fun <T> acceptUpperBound(
   @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") t1: NotNullAssertionProblems.Supplier<out T>,
   @ObjCName(name = "withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName(name = "acceptGeneric")
  fun <T> acceptGeneric(
   @ObjCName(name = "withJ2ktNotNullAssertionProblems_Supplier") t1: NotNullAssertionProblems.Supplier<T>,
   @ObjCName(name = "withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName(name = "acceptVararg")
  fun <T> acceptVararg(
   vararg @ObjCName(name = "withNSObjectArray") varargs: T
  ) {
   val varargs_1: Array<T> = varargs as Array<T>
  }
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_Consumer", swiftName = "J2ktNotNullAssertionProblems_Consumer", exact = true)
 open class Consumer<T> {
  constructor(
   @ObjCName(name = "Id") t: T
  )

  constructor(
   @ObjCName(name = "Id") t1: T,
   @ObjCName(name = "withId") t2: T
  )

  @ObjCName(name = "accept")
  open fun accept(
   @ObjCName(name = "withId") t: T
  ) {}
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_VarargConsumer", swiftName = "J2ktNotNullAssertionProblems_VarargConsumer", exact = true)
 open class VarargConsumer<T> {
  constructor(
   vararg @ObjCName(name = "NSObjectArray") ts: T
  ) {
   val ts_1: Array<T> = ts as Array<T>
  }

  @ObjCName(name = "accept")
  open fun accept(
   @ObjCName(name = "withId") t: T
  ) {}
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_GenericConsumer", swiftName = "J2ktNotNullAssertionProblems_GenericConsumer", exact = true)
 open class GenericConsumer<T> {
  constructor(
   @ObjCName(name = "J2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<T>,
   @ObjCName(name = "withId") t: T
  )

  @ObjCName(name = "accept")
  open fun accept(
   @ObjCName(name = "withId") t: T
  ) {}
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer", swiftName = "J2ktNotNullAssertionProblems_UpperWildcardConsumer", exact = true)
 open class UpperWildcardConsumer<T> {
  constructor(
   @ObjCName(name = "J2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<out T>,
   @ObjCName(name = "withId") t: T
  )

  @ObjCName(name = "accept")
  open fun accept(
   @ObjCName(name = "withId") t: T
  ) {}
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_C", swiftName = "J2ktNotNullAssertionProblems_C", exact = true)
 open class C<V> internal constructor() {
  @JvmField
  internal var defaultValue_pp_j2kt: V = null as V

  internal open fun f_pp_j2kt(): V {
   return (if (true) this.defaultValue_pp_j2kt else this.defaultValue_pp_j2kt) as V
  }
 }

 @ObjCName(name = "J2ktJ2ktNotNullAssertionProblems_Supplier", swiftName = "J2ktNotNullAssertionProblems_Supplier", exact = true)
 fun interface Supplier<V> {
  @ObjCName(name = "getValue")
  fun getValue(): V
 }
}
