// Generated from "j2kt/NotNullAssertionProblems.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNotNullAssertionProblems", exact = true)
open class NotNullAssertionProblems {
 @ObjCName("testExplicitInvocationTypeArguments")
 open fun testExplicitInvocationTypeArguments() {
  NotNullAssertionProblems.accept1<String?>(null)
  NotNullAssertionProblems.accept2<String?>("foo", null)
  NotNullAssertionProblems.accept2<String?>("foo", NotNullAssertionProblems.nullableString())
  NotNullAssertionProblems.acceptVararg<String?>("foo", null)
  NotNullAssertionProblems.acceptVararg<String?>("foo", NotNullAssertionProblems.nullableString())
 }

 @ObjCName("testImplicitInvocationTypeArguments")
 open fun testImplicitInvocationTypeArguments() {
  NotNullAssertionProblems.accept1<Any>(null!!)
  NotNullAssertionProblems.accept2<String>("foo", null!!)
  NotNullAssertionProblems.accept2<String>("foo", NotNullAssertionProblems.nullableString()!!)
  NotNullAssertionProblems.acceptVararg<String>("foo", null!!)
  NotNullAssertionProblems.acceptVararg<String>("foo", NotNullAssertionProblems.nullableString()!!)
 }

 @ObjCName("testExplicitConstructorTypeArguments")
 open fun testExplicitConstructorTypeArguments() {
  NotNullAssertionProblems.Consumer<String?>(null)
  NotNullAssertionProblems.Consumer<String?>("foo", null)
  NotNullAssertionProblems.Consumer<String?>("foo", NotNullAssertionProblems.nullableString())
  NotNullAssertionProblems.VarargConsumer<String?>("foo", null)
  NotNullAssertionProblems.VarargConsumer<String?>("foo", NotNullAssertionProblems.nullableString())
 }

 @ObjCName("testImplicitConstructorTypeArguments")
 open fun testImplicitConstructorTypeArguments() {
  NotNullAssertionProblems.Consumer<Any>(null!!)
  NotNullAssertionProblems.Consumer<String>("foo", null!!)
  NotNullAssertionProblems.Consumer<String>("foo", NotNullAssertionProblems.nullableString()!!)
  NotNullAssertionProblems.VarargConsumer<String>("foo", null!!)
  NotNullAssertionProblems.VarargConsumer<String>("foo", NotNullAssertionProblems.nullableString()!!)
 }

 @ObjCName("testImplicitRawConstructorTypeArguments")
 open fun testImplicitRawConstructorTypeArguments() {
  NotNullAssertionProblems.Consumer<Any?>(null)
  NotNullAssertionProblems.Consumer<Any?>("foo", null)
  NotNullAssertionProblems.Consumer<Any?>("foo", NotNullAssertionProblems.nullableString())
  NotNullAssertionProblems.VarargConsumer<Any?>("foo", null)
  NotNullAssertionProblems.VarargConsumer<Any?>("foo", NotNullAssertionProblems.nullableString())
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblemsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testImplicitInvocationTypeArguments_wildcards")
  fun testImplicitInvocationTypeArguments_wildcards(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.accept1(wildcardSupplier.getValue())
   NotNullAssertionProblems.accept2<Any?>("foo", wildcardSupplier.getValue())
   NotNullAssertionProblems.acceptVararg<Any?>("foo", wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_wildcards")
  fun testImplicitConstructorTypeArguments_wildcards(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer(wildcardSupplier.getValue())
   NotNullAssertionProblems.Consumer<Any?>("foo", wildcardSupplier.getValue())
   NotNullAssertionProblems.VarargConsumer<Any?>("foo", wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testRawConstructorTypeArguments_wildcards")
  fun testRawConstructorTypeArguments_wildcards(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer<Any?>(wildcardSupplier.getValue())
   NotNullAssertionProblems.Consumer<Any?>("foo", wildcardSupplier.getValue())
   NotNullAssertionProblems.VarargConsumer<Any?>("foo", wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_inference")
  fun testImplicitConstructorTypeArguments_inference() {
   NotNullAssertionProblems.Consumer<String>("foo", null!!).accept(null!!)
   NotNullAssertionProblems.VarargConsumer<String>("foo", null!!).accept(null!!)
  }

  @JvmStatic
  @ObjCName("accept1")
  fun <T> accept1(
   @ObjCName("withId") t: T
  ) {}

  @JvmStatic
  @ObjCName("accept2")
  fun <T> accept2(
   @ObjCName("withId") t1: T,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptVararg")
  fun <T> acceptVararg(
   vararg @ObjCName("withNSObjectArray") varargs: T
  ) {
   val varargs_1: Array<T> = varargs as Array<T>
  }

  @JvmStatic
  @ObjCName("nullableString")
  fun nullableString(): String? {
   return null
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Consumer", exact = true)
 open class Consumer<T> {
  constructor(
   @ObjCName("Id") t: T
  )

  constructor(
   @ObjCName("Id") t1: T,
   @ObjCName("withId") t2: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_VarargConsumer", exact = true)
 open class VarargConsumer<T> {
  constructor(
   vararg @ObjCName("NSObjectArray") ts: T
  ) {
   val ts_1: Array<T> = ts as Array<T>
  }

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_C", exact = true)
 open class C<V> internal constructor() {
  @JvmField
  internal var defaultValue_pp_j2kt: V = (null as V?) as V

  internal open fun f_pp_j2kt(): V {
   return (if (true) this.defaultValue_pp_j2kt else this.defaultValue_pp_j2kt) as V
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Supplier", exact = true)
 fun interface Supplier<V> {
  @ObjCName("getValue")
  fun getValue(): V
 }
}
