// Generated from "j2kt/NotNullAssertionProblems.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Class
import java.lang.Integer
import kotlin.Any
import kotlin.Array
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNotNullAssertionProblems", swiftName = "J2ktNotNullAssertionProblems", exact = true)
open class NotNullAssertionProblems {
 @ObjCName("testArrayLiteral")
 open fun testArrayLiteral(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  val array0: Array<String?> = arrayOf<String?>(null)
  val array1: Array<String?> = arrayOf<String?>(string, null)
  val array2: Array<String?> = arrayOf<String?>(string, nullableString)
  val array3: Array<String?> = arrayOf<String?>(null, string)
  val array4: Array<String?> = arrayOf<String?>(nullableString, string)
 }

 @ObjCName("testNewArray")
 open fun testNewArray(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  val array0: Array<String?> = arrayOf<String?>(null)
  val array1: Array<String?> = arrayOf<String?>(string, null)
  val array2: Array<String?> = arrayOf<String?>(string, nullableString)
  val array3: Array<String?> = arrayOf<String?>(null, string)
  val array4: Array<String?> = arrayOf<String?>(nullableString, string)
 }

 @ObjCName("testExplicitInvocationTypeArguments")
 open fun testExplicitInvocationTypeArguments(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<String>,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<String?>(null)
  NotNullAssertionProblems.accept2<String?>(string, null)
  NotNullAssertionProblems.accept2<String?>(string, nullableString)
  NotNullAssertionProblems.accept2<String?>(null, string)
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String?>(string, null)
  NotNullAssertionProblems.acceptVararg<String?>(string, nullableString)
  NotNullAssertionProblems.acceptVararg<String?>(null, string)
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String?>(
   supplier as Supplier<String?>,
   nullableString,
  )
  NotNullAssertionProblems.acceptUpperBound<String?>(
   supplier as Supplier<String>,
   nullableString,
  )
 }

 @ObjCName("testImplicitInvocationTypeArguments")
 open fun testImplicitInvocationTypeArguments(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<String>,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<Any?>(null)
  NotNullAssertionProblems.accept2<String?>(string, null)
  NotNullAssertionProblems.accept2<String?>(string, nullableString)
  NotNullAssertionProblems.accept2<String?>(null, string)
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String?>(string, null)
  NotNullAssertionProblems.acceptVararg<String?>(string, nullableString)
  NotNullAssertionProblems.acceptVararg<String?>(null, string)
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String?>(
   supplier as Supplier<String?>,
   nullableString,
  )
  NotNullAssertionProblems.acceptUpperBound<String?>(
   supplier as Supplier<String>,
   nullableString,
  )
 }

 @ObjCName("testExplicitConstructorTypeArguments")
 open fun testExplicitConstructorTypeArguments(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<String>,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  Consumer<String?>(null)
  Consumer<String?>(string, null)
  Consumer<String?>(string, nullableString)
  Consumer<String?>(null, string)
  Consumer<String?>(nullableString, string)
  VarargConsumer<String?>(string, null)
  VarargConsumer<String?>(string, nullableString)
  VarargConsumer<String?>(null, string)
  VarargConsumer<String?>(nullableString, string)
  GenericConsumer<String?>(
   supplier as Supplier<String?>,
   nullableString,
  )
  UpperWildcardConsumer<String?>(
   supplier as Supplier<String>,
   nullableString,
  )
 }

 @ObjCName("testImplicitConstructorTypeArguments")
 open fun testImplicitConstructorTypeArguments(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<String>,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  Consumer<Any?>(null)
  Consumer<String?>(string, null)
  Consumer<String?>(string, nullableString)
  Consumer<String?>(null, string)
  Consumer<String?>(nullableString, string)
  VarargConsumer<String?>(string, null)
  VarargConsumer<String?>(string, nullableString)
  VarargConsumer<String?>(null, string)
  VarargConsumer<String?>(nullableString, string)
  GenericConsumer<String?>(
   supplier as Supplier<String?>,
   nullableString,
  )
  UpperWildcardConsumer<String?>(
   supplier as Supplier<String>,
   nullableString,
  )
 }

 @ObjCName("testImplicitRawConstructorTypeArguments")
 open fun testImplicitRawConstructorTypeArguments(
  @ObjCName("withNSString", swiftName = "with") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<String>,
  @ObjCName("withNSString", swiftName = "with") nullableString: String?
 ) {
  Consumer<Any?>(null)
  Consumer<Any?>(string, null)
  Consumer<Any?>(string, nullableString)
  Consumer<Any?>(null, string)
  Consumer<Any?>(nullableString, string)
  VarargConsumer<Any?>(string, null)
  VarargConsumer<Any?>(string, nullableString)
  VarargConsumer<Any?>(null, string)
  VarargConsumer<Any?>(nullableString, string)
  GenericConsumer<Any?>(
   supplier as Supplier<Any?>,
   nullableString,
  )
  UpperWildcardConsumer<Any?>(
   supplier as Supplier<Any?>,
   nullableString,
  )
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblemsCompanion", swiftName = "J2ktNotNullAssertionProblemsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testImplicitInvocationTypeArguments_wildcards")
  fun testImplicitInvocationTypeArguments_wildcards(
   @ObjCName("withNSString", swiftName = "with") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") wildcardSupplier: Supplier<*>
  ) {
   NotNullAssertionProblems.accept1(
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.accept2<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   NotNullAssertionProblems.acceptVararg<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_wildcards")
  fun testImplicitConstructorTypeArguments_wildcards(
   @ObjCName("withNSString", swiftName = "with") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") wildcardSupplier: Supplier<*>
  ) {
   Consumer(
    wildcardSupplier.getValue(),
   )
   Consumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   VarargConsumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName("testRawConstructorTypeArguments_wildcards")
  fun testRawConstructorTypeArguments_wildcards(
   @ObjCName("withNSString", swiftName = "with") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") wildcardSupplier: Supplier<*>
  ) {
   Consumer<Any?>(
    wildcardSupplier.getValue(),
   )
   Consumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
   VarargConsumer<Any?>(
    string,
    wildcardSupplier.getValue(),
   )
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_inference")
  fun testImplicitConstructorTypeArguments_inference(
   @ObjCName("withNSString", swiftName = "with") string: String
  ) {
   Consumer<String?>(string, null).accept(null)
   VarargConsumer<String?>(string, null).accept(null)
  }

  @JvmStatic
  @ObjCName("testUnsafeNull")
  fun <T: Any> testUnsafeNull() {
   val x: Any? = NotNullAssertionProblems.getUnsafeNull<Any>()
   if (x != null) {
    NotNullAssertionProblems.accept1<Int>(
     Integer.valueOf(
      x!!.hashCode(),
     ),
    )
   }
  }

  @JvmStatic
  @ObjCName("getUnsafeNull")
  fun <T> getUnsafeNull(): T {
   return null as T
  }

  @JvmStatic
  @ObjCName("testDefaultValue")
  fun <T: Any> testDefaultValue(
   @ObjCName("withId") value: Any?
  ) {
   if (value != null) {
    val x: Any? = NotNullAssertionProblems.getDefaultValue(
     value!!.getClass() as Class<*>,
    )
    if (x != null) {
     NotNullAssertionProblems.accept1<Int>(
      Integer.valueOf(
       x!!.hashCode(),
      ),
     )
    }
   }
  }

  @JvmStatic
  @ObjCName("getDefaultValue")
  fun <T: Any> getDefaultValue(
   @ObjCName("withIOSClass", swiftName = "with") cls: Class<T>
  ): T {
   return NotNullAssertionProblems.getUnsafeNull<T>()
  }

  @JvmStatic
  @ObjCName("accept1")
  fun <T> accept1(
   @ObjCName("withId") t: T
  ) {}

  @JvmStatic
  @ObjCName("accept2")
  fun <T> accept2(
   @ObjCName("withId") t1: T,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptUpperBound")
  fun <T> acceptUpperBound(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") t1: Supplier<out T>,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptGeneric")
  fun <T> acceptGeneric(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") t1: Supplier<T>,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptVararg")
  fun <T> acceptVararg(
   vararg @ObjCName("withNSObjectArray") varargs: T
  ) {
   val varargs_1: Array<T> = varargs as Array<T>
  }

  @JvmStatic
  @ObjCName("testNullWildcardInLambda")
  fun testNullWildcardInLambda() {
   val supplier: Supplier<*> = NotNullAssertionProblems.wrap<Any>(
    Supplier {
     return@Supplier null!!
    },
   )
   supplier.getValue()
  }

  @JvmStatic
  @ObjCName("wrap")
  fun <T> wrap(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier", swiftName = "with") supplier: Supplier<out T>
  ): Supplier<T> {
   return Supplier {
    return@Supplier supplier.getValue()
   }
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Consumer", swiftName = "J2ktNotNullAssertionProblems_Consumer", exact = true)
 open class Consumer<T> {
  constructor(
   @ObjCName("Id") t: T
  )

  constructor(
   @ObjCName("Id") t1: T,
   @ObjCName("withId") t2: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_VarargConsumer", swiftName = "J2ktNotNullAssertionProblems_VarargConsumer", exact = true)
 open class VarargConsumer<T> {
  constructor(
   vararg @ObjCName("NSObjectArray") ts: T
  ) {
   val ts_1: Array<T> = ts as Array<T>
  }

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_GenericConsumer", swiftName = "J2ktNotNullAssertionProblems_GenericConsumer", exact = true)
 open class GenericConsumer<T> {
  constructor(
   @ObjCName("J2ktNotNullAssertionProblems_Supplier") supplier: Supplier<T>,
   @ObjCName("withId") t: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer", swiftName = "J2ktNotNullAssertionProblems_UpperWildcardConsumer", exact = true)
 open class UpperWildcardConsumer<T> {
  constructor(
   @ObjCName("J2ktNotNullAssertionProblems_Supplier") supplier: Supplier<out T>,
   @ObjCName("withId") t: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_C", swiftName = "J2ktNotNullAssertionProblems_C", exact = true)
 open class C<V> internal constructor() {
  @JvmField
  internal var defaultValue_pp_j2kt: V = null as V

  internal open fun f_pp_j2kt(): V {
   return (if (true) this.defaultValue_pp_j2kt else this.defaultValue_pp_j2kt) as V
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Supplier", swiftName = "J2ktNotNullAssertionProblems_Supplier", exact = true)
 fun interface Supplier<V> {
  @ObjCName("getValue")
  fun getValue(): V
 }
}
