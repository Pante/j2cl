// Generated from "j2kt/TypeWildCards.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktTypeWildCards", exact = true)
open class TypeWildCards internal constructor() {
 @ObjCName("J2ktJ2ktTypeWildCardsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testSupplierWithUpperAndLowerBounds_pp_j2kt(supplier: TypeWildCards.SupplierWithUpperBound<in TypeWildCards.Child?>?) {
   val parent: TypeWildCards.Parent? = supplier!!.get() as TypeWildCards.Parent?
  }

  @JvmStatic
  @ObjCName("testObservable")
  fun testObservable(
   @ObjCName("withJ2ktTypeWildCards_Observable") observable: TypeWildCards.Observable<*>?
  ) {
   (observable as TypeWildCards.Observable<Any?>?)!!.addObserver(TypeWildCards.Observer { e ->
   })
  }

  @JvmStatic
  @ObjCName("testObservableParameterized")
  fun <T: TypeWildCards.Observable<*>?> testObservableParameterized(
   @ObjCName("withJ2ktTypeWildCards_Observable") observable: T
  ) {}

  @JvmStatic
  @ObjCName("testSuperWildcardObservable")
  fun testSuperWildcardObservable(
   @ObjCName("withJ2ktTypeWildCards_SuperWildcardObservable") observable: TypeWildCards.SuperWildcardObservable<*>?
  ) {
   (observable as TypeWildCards.SuperWildcardObservable<Any?>?)!!.addObserver(TypeWildCards.Observer { e ->
   })
  }

  @JvmStatic
  @ObjCName("testKtInObservable")
  fun testKtInObservable(
   @ObjCName("withJ2ktTypeWildCards_KtInObservable") observable: TypeWildCards.KtInObservable<*>?
  ) {
   (observable as TypeWildCards.KtInObservable<Any?>?)!!.addObserver(TypeWildCards.KtInObserver { e ->
   })
  }

  @JvmStatic
  @ObjCName("testRecursiveObservable")
  fun testRecursiveObservable(
   @ObjCName("withJ2ktTypeWildCards_RecursiveObservable") observable: TypeWildCards.RecursiveObservable<*>?
  ) {}

  @JvmStatic
  @ObjCName("testObserverHolder")
  fun testObserverHolder(
   @ObjCName("withJ2ktTypeWildCards_ObserverHolder") observerHolder: TypeWildCards.ObserverHolder<*>?
  ) {
   (observerHolder as TypeWildCards.ObserverHolder<Any?>?)!!.observer_pp_j2kt = TypeWildCards.Observer { e ->
   }
  }
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Parent", exact = true)
 open class Parent internal constructor() {}

 @ObjCName("J2ktJ2ktTypeWildCards_Child", exact = true)
 open class Child internal constructor(): TypeWildCards.Parent() {}

 @ObjCName("J2ktJ2ktTypeWildCards_SupplierWithUpperBound", exact = true)
 fun interface SupplierWithUpperBound<T: TypeWildCards.Parent?> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Observer", exact = true)
 fun interface Observer<E> {
  @ObjCName("on")
  fun on(
   @ObjCName("withId") event: E
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_KtInObserver", exact = true)
 fun interface KtInObserver<in E> {
  @ObjCName("on")
  fun on(
   @ObjCName("withId") event: E
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Observable", exact = true)
 fun interface Observable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer") observer: TypeWildCards.Observer<E>?
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_SuperWildcardObservable", exact = true)
 fun interface SuperWildcardObservable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer") observer: TypeWildCards.Observer<in E>?
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_KtInObservable", exact = true)
 fun interface KtInObservable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_KtInObserver") observer: TypeWildCards.KtInObserver<E>?
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_RecursiveObservable", exact = true)
 fun interface RecursiveObservable<E: TypeWildCards.RecursiveObservable<E>?> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer") observer: TypeWildCards.Observer<E>?
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_ObserverHolder", exact = true)
 open class ObserverHolder<E> internal constructor() {
  @JvmField
  internal var observer_pp_j2kt: TypeWildCards.Observer<E>? = null
 }
}
