// Generated from "j2kt/TypeWildCards.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktTypeWildCards", swiftName = "J2ktTypeWildCards", exact = true)
open class TypeWildCards internal constructor() {
 @ObjCName("J2ktJ2ktTypeWildCardsCompanion", swiftName = "J2ktTypeWildCardsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testSupplierWithUpperAndLowerBounds_pp_j2kt(supplier: SupplierWithUpperBound<in Child>) {
   val parent: Parent = supplier.get() as Parent
  }

  @JvmStatic
  internal fun testNullWithLowerBound_pp_j2kt(observer: Observer<in Child>) {
   observer.on(
    null as Child,
   )
  }

  @JvmStatic
  @ObjCName("testObservable")
  fun testObservable(
   @ObjCName("withJ2ktTypeWildCards_Observable", swiftName = "with") observable: Observable<*>
  ) {
   (observable as Observable<Any?>).addObserver(
    Observer/* <*> */ { e /* capture#1-of * */ ->
    },
   )
  }

  @JvmStatic
  @ObjCName("testObservableParameterized")
  fun <T: Observable<*>> testObservableParameterized(
   @ObjCName("withJ2ktTypeWildCards_Observable", swiftName = "with") observable: T
  ) {
   (observable as Observable<Any?>).addObserver(
    Observer/* <*> */ { e /* capture#2-of * */ ->
    },
   )
  }

  @JvmStatic
  @ObjCName("testSuperWildcardObservable")
  fun testSuperWildcardObservable(
   @ObjCName("withJ2ktTypeWildCards_SuperWildcardObservable", swiftName = "with") observable: SuperWildcardObservable<*>
  ) {
   (observable as SuperWildcardObservable<Any?>).addObserver(
    Observer/* <in capture#3-of *> */ { e /* capture#3-of * */ ->
    },
   )
  }

  @JvmStatic
  @ObjCName("testKtInObservable")
  fun testKtInObservable(
   @ObjCName("withJ2ktTypeWildCards_KtInObservable", swiftName = "with") observable: KtInObservable<*>
  ) {
   (observable as KtInObservable<Any?>).addObserver(
    KtInObserver/* <*> */ { e /* capture#4-of * */ ->
    },
   )
  }

  @JvmStatic
  @ObjCName("testRecursiveObservable")
  fun testRecursiveObservable(
   @ObjCName("withJ2ktTypeWildCards_RecursiveObservable", swiftName = "with") observable: RecursiveObservable<*>
  ) {}
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Parent", swiftName = "J2ktTypeWildCards_Parent", exact = true)
 open class Parent internal constructor()

 @ObjCName("J2ktJ2ktTypeWildCards_Child", swiftName = "J2ktTypeWildCards_Child", exact = true)
 open class Child internal constructor(): Parent()

 @ObjCName("J2ktJ2ktTypeWildCards_SupplierWithUpperBound", swiftName = "J2ktTypeWildCards_SupplierWithUpperBound", exact = true)
 fun interface SupplierWithUpperBound<T: Parent> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Observer", swiftName = "J2ktTypeWildCards_Observer", exact = true)
 fun interface Observer<E> {
  @ObjCName("on")
  fun on(
   @ObjCName("withId") event: E
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_KtInObserver", swiftName = "J2ktTypeWildCards_KtInObserver", exact = true)
 fun interface KtInObserver<in E> {
  @ObjCName("on")
  fun on(
   @ObjCName("withId") event: E
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_Observable", swiftName = "J2ktTypeWildCards_Observable", exact = true)
 fun interface Observable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer", swiftName = "with") observer: Observer<E>
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_SuperWildcardObservable", swiftName = "J2ktTypeWildCards_SuperWildcardObservable", exact = true)
 fun interface SuperWildcardObservable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer", swiftName = "with") observer: Observer<in E?>
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_KtInObservable", swiftName = "J2ktTypeWildCards_KtInObservable", exact = true)
 fun interface KtInObservable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_KtInObserver", swiftName = "with") observer: KtInObserver<E>
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_RecursiveObservable", swiftName = "J2ktTypeWildCards_RecursiveObservable", exact = true)
 fun interface RecursiveObservable<E: RecursiveObservable<E>> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer", swiftName = "with") observer: Observer<E>
  )
 }

 @ObjCName("J2ktJ2ktTypeWildCards_WithoutBounds", swiftName = "J2ktTypeWildCards_WithoutBounds", exact = true)
 open class WithoutBounds internal constructor() {
  @ObjCName("J2ktJ2ktTypeWildCards_WithoutBoundsCompanion", swiftName = "J2ktTypeWildCards_WithoutBoundsCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName("testSetField")
   fun testSetField(
    @ObjCName("withJ2ktTypeWildCards_WithoutBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    (holder as Holder<Any?>).observer_pp_j2kt = Observer/* <*> */ { e /* capture#5-of * */ ->
    }
   }

   @JvmStatic
   @ObjCName("testSetMethod")
   fun testSetMethod(
    @ObjCName("withJ2ktTypeWildCards_WithoutBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    (holder as Holder<Any?>).set_pp_j2kt(
     Observer/* <*> */ { e /* capture#6-of * */ ->
     },
    )
   }

   @JvmStatic
   @ObjCName("testSetStaticMethod")
   fun testSetStaticMethod(
    @ObjCName("withJ2ktTypeWildCards_WithoutBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    Holder.setStatic_pp_j2kt/* <*> */(
     holder,
     Observer/* <*> */ { e /* capture#7-of * */ ->
     },
    )
   }
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithoutBounds_Observer", swiftName = "J2ktTypeWildCards_WithoutBounds_Observer", exact = true)
  fun interface Observer<E> {
   @ObjCName("on")
   fun on(
    @ObjCName("withId") event: E
   )
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithoutBounds_Holder", swiftName = "J2ktTypeWildCards_WithoutBounds_Holder", exact = true)
  open class Holder<E> internal constructor() {
   @JvmField
   internal var observer_pp_j2kt: Observer<E>? = null

   internal open fun set_pp_j2kt(observer: Observer<E>) {}

   @ObjCName("J2ktJ2ktTypeWildCards_WithoutBounds_HolderCompanion", swiftName = "J2ktTypeWildCards_WithoutBounds_HolderCompanion", exact = true)
   companion object {
    @JvmStatic
    internal fun <E> setStatic_pp_j2kt(holder: Holder<E>, observer: Observer<E>) {}
   }
  }
 }

 @ObjCName("J2ktJ2ktTypeWildCards_WithBounds", swiftName = "J2ktTypeWildCards_WithBounds", exact = true)
 open class WithBounds internal constructor() {
  @ObjCName("J2ktJ2ktTypeWildCards_WithBoundsCompanion", swiftName = "J2ktTypeWildCards_WithBoundsCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName("testSetField")
   fun testSetField(
    @ObjCName("withJ2ktTypeWildCards_WithBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    (holder as Holder<Event>).observer_pp_j2kt = Observer/* <*> */ { e /* capture#8-of out Event */ ->
    }
   }

   @JvmStatic
   @ObjCName("testSetMethod")
   fun testSetMethod(
    @ObjCName("withJ2ktTypeWildCards_WithBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    (holder as Holder<Event>).set_pp_j2kt(
     Observer/* <*> */ { e /* capture#9-of out Event */ ->
     },
    )
   }

   @JvmStatic
   @ObjCName("testSetStaticMethod")
   fun testSetStaticMethod(
    @ObjCName("withJ2ktTypeWildCards_WithBounds_Holder", swiftName = "with") holder: Holder<*>
   ) {
    Holder.setStatic_pp_j2kt/* <*> */(
     holder,
     Observer/* <*> */ { e /* capture#10-of out Event */ ->
     },
    )
   }
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithBounds_Event", swiftName = "J2ktTypeWildCards_WithBounds_Event", exact = true)
  interface Event

  @ObjCName("J2ktJ2ktTypeWildCards_WithBounds_Observer", swiftName = "J2ktTypeWildCards_WithBounds_Observer", exact = true)
  fun interface Observer<E: Event> {
   @ObjCName("on")
   fun on(
    @ObjCName("withJ2ktTypeWildCards_WithBounds_Event", swiftName = "with") event: E
   )
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithBounds_Holder", swiftName = "J2ktTypeWildCards_WithBounds_Holder", exact = true)
  open class Holder<E: Event> internal constructor() {
   @JvmField
   internal var observer_pp_j2kt: Observer<E>? = null

   internal open fun set_pp_j2kt(observer: Observer<E>) {}

   @ObjCName("J2ktJ2ktTypeWildCards_WithBounds_HolderCompanion", swiftName = "J2ktTypeWildCards_WithBounds_HolderCompanion", exact = true)
   companion object {
    @JvmStatic
    internal fun <E: Event> setStatic_pp_j2kt(holder: Holder<E>, observer: Observer<E>) {}
   }
  }
 }

 @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds", swiftName = "J2ktTypeWildCards_WithDependentBounds", exact = true)
 open class WithDependentBounds internal constructor() {
  @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBoundsCompanion", swiftName = "J2ktTypeWildCards_WithDependentBoundsCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName("testSetField")
   fun testSetField(
    @ObjCName("withJ2ktTypeWildCards_WithDependentBounds_Holder", swiftName = "with") holder: Holder<*, *>
   ) {
    (holder as Holder<Event, Collection<Event>>).observer_pp_j2kt = Observer/* <*, capture#11-of out Collection<capture#12-of out Event>> */ { e /* capture#11-of out Collection<capture#12-of out Event> */ ->
    }
   }

   @JvmStatic
   @ObjCName("testSetMethod")
   fun testSetMethod(
    @ObjCName("withJ2ktTypeWildCards_WithDependentBounds_Holder", swiftName = "with") holder: Holder<*, *>
   ) {
    (holder as Holder<Event, Collection<Event>>).set_pp_j2kt(
     Observer/* <*, capture#13-of out Collection<capture#14-of out Event>> */ { e /* capture#13-of out Collection<capture#14-of out Event> */ ->
     },
    )
   }

   @JvmStatic
   @ObjCName("testSetStaticMethod")
   fun testSetStaticMethod(
    @ObjCName("withJ2ktTypeWildCards_WithDependentBounds_Holder", swiftName = "with") holder: Holder<*, *>
   ) {
    Holder.setStatic_pp_j2kt/* <*, capture#15-of out Collection<capture#16-of out Event>> */(
     holder,
     Observer/* <*, capture#15-of out Collection<capture#16-of out Event>> */ { e /* capture#15-of out Collection<capture#16-of out Event> */ ->
     },
    )
   }
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds_Event", swiftName = "J2ktTypeWildCards_WithDependentBounds_Event", exact = true)
  interface Event

  @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds_Collection", swiftName = "J2ktTypeWildCards_WithDependentBounds_Collection", exact = true)
  interface Collection<V>

  @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds_Observer", swiftName = "J2ktTypeWildCards_WithDependentBounds_Observer", exact = true)
  fun interface Observer<E: Event, C: Collection<E>> {
   @ObjCName("on")
   fun on(
    @ObjCName("withJ2ktTypeWildCards_WithDependentBounds_Collection", swiftName = "with") events: C
   )
  }

  @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds_Holder", swiftName = "J2ktTypeWildCards_WithDependentBounds_Holder", exact = true)
  open class Holder<E: Event, C: Collection<E>> internal constructor() {
   @JvmField
   internal var observer_pp_j2kt: Observer<E, C>? = null

   internal open fun set_pp_j2kt(observer: Observer<E, C>) {}

   @ObjCName("J2ktJ2ktTypeWildCards_WithDependentBounds_HolderCompanion", swiftName = "J2ktTypeWildCards_WithDependentBounds_HolderCompanion", exact = true)
   companion object {
    @JvmStatic
    internal fun <E: Event, C: Collection<E>> setStatic_pp_j2kt(holder: Holder<E, C>, observer: Observer<E, C>) {}
   }
  }
 }
}
