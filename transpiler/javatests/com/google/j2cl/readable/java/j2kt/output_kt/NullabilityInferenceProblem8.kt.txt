// Generated from "j2kt/NullabilityInferenceProblem8.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem8", swiftName = "J2ktNullabilityInferenceProblem8", exact = true)
open class NullabilityInferenceProblem8 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem8Companion", swiftName = "J2ktNullabilityInferenceProblem8Companion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("nonNullWithLowerBound")
  fun <I: Any, O: Any> nonNullWithLowerBound(
   @ObjCName("withJ2ktNullabilityInferenceProblem8_Function", swiftName = "with") fn: Function<in I, O>
  ): Function<I, O> {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("acceptParameterized")
  fun acceptParameterized(
   @ObjCName("withJ2ktNullabilityInferenceProblem8_Function", swiftName = "with") fn: Function<String, Any>
  ) {
   throw RuntimeException()
  }

  @JvmStatic
  @ObjCName("test")
  fun test(
   @ObjCName("withJ2ktNullabilityInferenceProblem8_NullableSupplier", swiftName = "with") supplier: NullableSupplier<Any>
  ) {
   NullabilityInferenceProblem8.acceptParameterized(
    NullabilityInferenceProblem8.nonNullWithLowerBound<String, Any>(
     Function { arg0: String ->
      return@Function supplier.get(arg0)!!
     },
    ),
   )
  }
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem8_NullableSupplier", swiftName = "J2ktNullabilityInferenceProblem8_NullableSupplier", exact = true)
 fun interface NullableSupplier<V> {
  @ObjCName("get", swiftName = "getWith")
  fun get(
   @ObjCName("withNSString", swiftName = "_") key: String
  ): V?
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem8_Function", swiftName = "J2ktNullabilityInferenceProblem8_Function", exact = true)
 fun interface Function<I, O> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") i: I
  ): O
 }
}
