// Generated from "j2kt/NullabilityInferenceProblem7.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityInferenceProblem7", swiftName = "J2ktNullabilityInferenceProblem7", exact = true)
open class NullabilityInferenceProblem7 {
 @ObjCName("J2ktJ2ktNullabilityInferenceProblem7Companion", swiftName = "J2ktNullabilityInferenceProblem7Companion", exact = true)
 companion object {
  @JvmStatic
  internal fun <T: Any> test1_pp_j2kt(ordering: NullabilityInferenceProblem7.Ordering<T>, t1: T, t2: T): T {
   val local1: T = t1
   val local2: T = t2
   return ordering.max<T>(local1, local2)
  }

  @JvmStatic
  internal fun test2_pp_j2kt(ordering: NullabilityInferenceProblem7.Ordering<NullabilityInferenceProblem7.Foo>, foo1: NullabilityInferenceProblem7.Foo, foo2: NullabilityInferenceProblem7.Foo): NullabilityInferenceProblem7.Foo {
   val localFoo1: NullabilityInferenceProblem7.Foo = foo1
   val localFoo2: NullabilityInferenceProblem7.Foo = foo2
   return ordering.max<NullabilityInferenceProblem7.Foo>(localFoo1, localFoo2)
  }

  @JvmStatic
  internal fun test3_pp_j2kt(ordering: NullabilityInferenceProblem7.FooOrdering, foo1: NullabilityInferenceProblem7.Foo, foo2: NullabilityInferenceProblem7.Foo): NullabilityInferenceProblem7.Foo {
   val localFoo1: NullabilityInferenceProblem7.Foo = foo1
   val localFoo2: NullabilityInferenceProblem7.Foo = foo2
   return ordering.max<NullabilityInferenceProblem7.Foo>(localFoo1, localFoo2)
  }
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem7_Foo", swiftName = "J2ktNullabilityInferenceProblem7_Foo", exact = true)
 interface Foo

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem7_Ordering", swiftName = "J2ktNullabilityInferenceProblem7_Ordering", exact = true)
 interface Ordering<V> {
  @ObjCName("max")
  fun <T: V> max(
   @ObjCName("withId") v1: T,
   @ObjCName("withId") v2: T
  ): T
 }

 @ObjCName("J2ktJ2ktNullabilityInferenceProblem7_FooOrdering", swiftName = "J2ktNullabilityInferenceProblem7_FooOrdering", exact = true)
 interface FooOrdering: NullabilityInferenceProblem7.Ordering<NullabilityInferenceProblem7.Foo>
}
