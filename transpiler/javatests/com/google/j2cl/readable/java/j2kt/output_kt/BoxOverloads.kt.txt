// Generated from "j2kt/BoxOverloads.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Integer
import kotlin.Any
import kotlin.Comparable
import kotlin.Double
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJ2ktBoxOverloads", swiftName = "J2ktBoxOverloads", exact = true)
open class BoxOverloads {
 constructor(
  @ObjCName(name = "Double") d: Double
 ): this(
  java.lang.Double.valueOf(d) as Double?,
 )

 constructor(
  @ObjCName(name = "JavaLangDouble") d: Double?
 )

 @ObjCName(name = "J2ktJ2ktBoxOverloadsCompanion", swiftName = "J2ktBoxOverloadsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "nullableBoxedOverload")
  fun nullableBoxedOverload(
   @ObjCName(name = "withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName(name = "nullableBoxedOverload")
  fun nullableBoxedOverload(
   @ObjCName(name = "withJavaLangDouble") d: Double?
  ) {}

  @JvmStatic
  @ObjCName(name = "testNullableBoxedOverload")
  fun testNullableBoxedOverload() {
   BoxOverloads.nullableBoxedOverload(1.25)
   BoxOverloads.nullableBoxedOverload(
    java.lang.Double.valueOf(1.25) as Double?,
   )
   BoxOverloads.nullableBoxedOverload(
    Double(1.25) as Double?,
   )
   BoxOverloads.nullableBoxedOverload(
    1.toDouble(),
   )
  }

  @JvmStatic
  @ObjCName(name = "nullableNumberOverload")
  fun nullableNumberOverload(
   @ObjCName(name = "withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName(name = "nullableNumberOverload")
  fun nullableNumberOverload(
   @ObjCName(name = "withNSNumber") n: Number?
  ) {}

  @JvmStatic
  @ObjCName(name = "testNullableNumberOverload")
  fun testNullableNumberOverload() {
   BoxOverloads.nullableNumberOverload(1.25)
   BoxOverloads.nullableNumberOverload(
    java.lang.Double.valueOf(1.25) as Number?,
   )
   BoxOverloads.nullableNumberOverload(
    Double(1.25) as Number?,
   )
   BoxOverloads.nullableNumberOverload(
    1.toDouble(),
   )
   BoxOverloads.nullableNumberOverload(
    Integer.valueOf(1) as Number?,
   )
   BoxOverloads.nullableNumberOverload(
    Int(1) as Number?,
   )
  }

  @JvmStatic
  @ObjCName(name = "numberOverload")
  fun numberOverload(
   @ObjCName(name = "withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName(name = "numberOverload")
  fun numberOverload(
   @ObjCName(name = "withNSNumber") n: Number
  ) {}

  @JvmStatic
  @ObjCName(name = "testNumberOverload")
  fun testNumberOverload() {
   BoxOverloads.numberOverload(1.25)
   BoxOverloads.numberOverload(
    java.lang.Double.valueOf(1.25) as Number,
   )
   BoxOverloads.numberOverload(
    Double(1.25) as Number,
   )
   BoxOverloads.numberOverload(
    1.toDouble(),
   )
   BoxOverloads.numberOverload(
    Integer.valueOf(1) as Number,
   )
   BoxOverloads.numberOverload(
    Int(1) as Number,
   )
  }

  @JvmStatic
  @ObjCName(name = "nullableObjectOverload")
  fun nullableObjectOverload(
   @ObjCName(name = "withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName(name = "nullableObjectOverload")
  fun nullableObjectOverload(
   @ObjCName(name = "withId") o: Any?
  ) {}

  @JvmStatic
  @ObjCName(name = "testNullableObjectOverload")
  fun testNullableObjectOverload() {
   BoxOverloads.nullableObjectOverload(1.25)
   BoxOverloads.nullableObjectOverload(
    java.lang.Double.valueOf(1.25) as Any?,
   )
   BoxOverloads.nullableObjectOverload(
    Double(1.25) as Any?,
   )
   BoxOverloads.nullableObjectOverload(
    1.toDouble(),
   )
   BoxOverloads.nullableObjectOverload(
    Integer.valueOf(1) as Any?,
   )
   BoxOverloads.nullableObjectOverload(
    Int(1) as Any?,
   )
   BoxOverloads.nullableObjectOverload("foo")
  }

  @JvmStatic
  @ObjCName(name = "objectOverload")
  fun objectOverload(
   @ObjCName(name = "withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName(name = "objectOverload")
  fun objectOverload(
   @ObjCName(name = "withId") o: Any
  ) {}

  @JvmStatic
  @ObjCName(name = "testObjectOverload")
  fun testObjectOverload() {
   BoxOverloads.objectOverload(1.25)
   BoxOverloads.objectOverload(
    java.lang.Double.valueOf(1.25) as Any,
   )
   BoxOverloads.objectOverload(
    Double(1.25) as Any,
   )
   BoxOverloads.objectOverload(
    1.toDouble(),
   )
   BoxOverloads.objectOverload(
    Integer.valueOf(1) as Any,
   )
   BoxOverloads.objectOverload(
    Int(1) as Any,
   )
   BoxOverloads.objectOverload("foo")
  }

  @JvmStatic
  @ObjCName(name = "firstNonNull")
  fun <T: Any> firstNonNull(
   @ObjCName(name = "withId") t1: T?,
   @ObjCName(name = "withId") t2: T
  ): T {
   return (if (t1 != null) t1 else t2)!!
  }

  @JvmStatic
  @ObjCName(name = "testFirstNonNull")
  fun testFirstNonNull(
   @ObjCName(name = "withJavaLangInteger") i: Int?
  ) {
   BoxOverloads.firstNonNull<Int>(
    i,
    Integer.valueOf(0),
   )
  }

  @JvmStatic
  @ObjCName(name = "testComparableOverload")
  fun testComparableOverload(
   @ObjCName(name = "withJ2ktBoxOverloads_Generic") generic: BoxOverloads.Generic<Double>
  ) {
   generic.comparableOverload(1.25)
   generic.comparableOverload(
    java.lang.Double.valueOf(1.25) as Comparable<Double>,
   )
  }
 }

 @ObjCName(name = "J2ktJ2ktBoxOverloads_Generic", swiftName = "J2ktBoxOverloads_Generic", exact = true)
 interface Generic<T> {
  @ObjCName(name = "overload")
  fun overload(
   @ObjCName(name = "withDouble") d: Double
  )

  @ObjCName(name = "overload")
  fun overload(
   @ObjCName(name = "withId") t: T
  )

  @ObjCName(name = "comparableOverload")
  fun comparableOverload(
   @ObjCName(name = "withDouble") d: Double
  )

  @ObjCName(name = "comparableOverload")
  fun comparableOverload(
   @ObjCName(name = "withJavaLangComparable") comparable: Comparable<T & Any>
  )
 }
}
