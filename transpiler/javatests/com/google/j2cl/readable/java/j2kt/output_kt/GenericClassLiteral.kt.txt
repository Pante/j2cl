// Generated from "j2kt/GenericClassLiteral.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.javaObjectType
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktGenericClassLiteral", swiftName = "J2ktGenericClassLiteral", exact = true)
open class GenericClassLiteral {
 @ObjCName("test")
 open fun test(
  @ObjCName("withJ2ktGenericClassLiteral_Generic") genericFoo: GenericClassLiteral.Generic<GenericClassLiteral.Foo>
 ) {
  this.accept<GenericClassLiteral.Generic<Any>>(
   genericFoo as GenericClassLiteral.Generic<Any>,
   GenericClassLiteral.Generic::class.javaObjectType as Class<GenericClassLiteral.Generic<Any>>,
  )
 }

 @ObjCName("accept")
 open fun <T: Any> accept(
  @ObjCName("withId") foo: T,
  @ObjCName("withIOSClass") cls: Class<T>
 ) {}

 @ObjCName("J2ktJ2ktGenericClassLiteral_Generic", swiftName = "J2ktGenericClassLiteral_Generic", exact = true)
 interface Generic<T: Any>

 @ObjCName("J2ktJ2ktGenericClassLiteral_Foo", swiftName = "J2ktGenericClassLiteral_Foo", exact = true)
 interface Foo
}
