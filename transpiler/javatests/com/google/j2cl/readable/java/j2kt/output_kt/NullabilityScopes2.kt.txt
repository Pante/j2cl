// Generated from "j2kt/NullabilityScopes2.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import java.util.function.Function
import java.util.stream.Collector
import java.util.stream.Stream
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityScopes2", swiftName = "J2ktNullabilityScopes2", exact = true)
open class NullabilityScopes2 internal constructor() {
 @ObjCName("J2ktJ2ktNullabilityScopes2_NullMarkedScope", swiftName = "J2ktNullabilityScopes2_NullMarkedScope", exact = true)
 open class NullMarkedScope internal constructor() {
  @ObjCName("J2ktJ2ktNullabilityScopes2_NullMarkedScopeCompanion", swiftName = "J2ktNullabilityScopes2_NullMarkedScopeCompanion", exact = true)
  companion object {
   @JvmStatic
   @ObjCName("toList")
   fun <E> toList(): Collector<E, *, MutableList<E>> {
    throw RuntimeException()
   }
  }

  @ObjCName("J2ktJ2ktNullabilityScopes2_NullMarkedScope_Recursive", swiftName = "J2ktNullabilityScopes2_NullMarkedScope_Recursive", exact = true)
  fun interface Recursive<M: NullabilityScopes2.NullMarkedScope.Recursive<M>> {
   @ObjCName("toList")
   fun toList(): MutableList<NullabilityScopes2.NullMarkedScope.Recursive<M>>
  }
 }

 @ObjCName("J2ktJ2ktNullabilityScopes2_NonNullMarkedScope", swiftName = "J2ktNullabilityScopes2_NonNullMarkedScope", exact = true)
 open class NonNullMarkedScope<T: NullabilityScopes2.NullMarkedScope.Recursive<T>> internal constructor() {
  @ObjCName("flatten")
  open fun flatten(
   @ObjCName("withJ2ktNullabilityScopes2_NullMarkedScope_Recursive") recursive: NullabilityScopes2.NullMarkedScope.Recursive<T>?
  ): MutableList<Any?>? {
   return recursive!!.toList().stream().map<MutableList<Any>>(
    Function/* <in NullabilityScopes2.NullMarkedScope.Recursive<T>?, out MutableList<Any?>?> */ { arg0: NullabilityScopes2.NullMarkedScope.Recursive<T> ->
     return@Function this.flatten(arg0)
    } as Function<in NullabilityScopes2.NullMarkedScope.Recursive<T>, out MutableList<Any>>,
   ).flatMap<Any>(
    Function/* <in MutableList<Any?>?, out Stream<*>?> */ { arg0_1: MutableList<Any> ->
     return@Function arg0_1.stream()
    } as Function<in MutableList<Any>, out Stream<out Any>>,
   ).collect<MutableList<Any>, Any>(
    NullabilityScopes2.NullMarkedScope.toList<Any>() as Collector<in Any, Any, MutableList<Any>>,
   ) as MutableList<Any?>?
  }
 }
}
