// Generated from "switchstatement/SwitchStatement.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package switchstatement

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Byte
import kotlin.Char
import kotlin.Int
import kotlin.OptIn
import kotlin.Short
import kotlin.Suppress
import kotlin.assert
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktSwitchstatementNumbers", exact = true)
enum class Numbers {
 @ObjCName("ONE")
 ONE,
 @ObjCName("TWO")
 TWO,
 @ObjCName("THREE")
 THREE;
}

@ObjCName("J2ktSwitchstatementSwitchStatement", exact = true)
open class SwitchStatement {
 @ObjCName("main")
 open fun main() {
  SWITCH@ do {
   when ("one") {
    "one", "two" -> {
     break@SWITCH
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_1@ do {
   when ('1') {
    '1', '2' -> {
     break@SWITCH_1
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_2@ do {
   when (1) {
    -2, 1, 2 -> {
     break@SWITCH_2
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_3@ do {
   when (Numbers.ONE) {
    Numbers.ONE, Numbers.TWO -> {
     break@SWITCH_3
    }
    Numbers.THREE -> {
     break@SWITCH_3
    }
    else -> {
     return
    }
   }
  } while (false)
 }

 private fun testCaseExpressionTypes(ch: Char, i: Int, b: Byte, s: Short) {
  SWITCH@ do {
   when (ch) {
    'a' -> {
     break@SWITCH
    }
    '\u0001' -> {
     break@SWITCH
    }
    '\u0002' -> {
     break@SWITCH
    }
    '\u0003' -> {
     break@SWITCH
    }
    else -> {}
   }
  } while (false)
  SWITCH_1@ do {
   when (i) {
    97 -> {
     break@SWITCH_1
    }
    1 -> {
     break@SWITCH_1
    }
    2 -> {
     break@SWITCH_1
    }
    3 -> {
     break@SWITCH_1
    }
    else -> {}
   }
  } while (false)
  SWITCH_2@ do {
   when (b) {
    97.toByte() -> {
     break@SWITCH_2
    }
    1.toByte() -> {
     break@SWITCH_2
    }
    2.toByte() -> {
     break@SWITCH_2
    }
    3.toByte() -> {
     break@SWITCH_2
    }
    else -> {}
   }
  } while (false)
  SWITCH_3@ do {
   when (s) {
    97.toShort() -> {
     break@SWITCH_3
    }
    1.toShort() -> {
     break@SWITCH_3
    }
    2.toShort() -> {
     break@SWITCH_3
    }
    3.toShort() -> {
     break@SWITCH_3
    }
    else -> {}
   }
  } while (false)
 }

 private fun testBlocksInSwitchCase(i: Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo(1)
     this.foo(2)
     this.foo(3)
     this.foo(4)
     this.foo(5)
     break@SWITCH
    }
    else -> {}
   }
  } while (false)
 }

 private fun testLabelInSwitchCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    LABEL@ do {
     break@LABEL
    } while (true)
   } while (false)
  } while (false)
 }

 private fun testNonFallThroughBreakCase(i: Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo(1)
     break@SWITCH
    }
    else -> {
     this.foo(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 private fun testNonFallThroughBreakOuterCase(i: Int) {
  OUTER_LABEL@ do {
   SWITCH@ do {
    when (i) {
     1 -> {
      this.foo(1)
      break@OUTER_LABEL
     }
     else -> {
      this.foo(2)
      break@SWITCH
     }
    }
   } while (false)
  } while (false)
 }

 private fun testNonFallThroughContinueCase(i: Int) {
  LOOP@ do {
   SWITCH@ do {
    when (i) {
     3 -> {
      this.foo(1)
      continue@LOOP
     }
     else -> {
      this.foo(2)
      break@SWITCH
     }
    }
   } while (false)
  } while (false)
 }

 private fun testNonFallThroughReturnCase(i: Int) {
  SWITCH@ do {
   when (i) {
    4 -> {
     this.foo(1)
     return
    }
    else -> {
     this.foo(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 private fun testNonFallThroughThrowCase(i: Int) {
  SWITCH@ do {
   when (i) {
    5 -> {
     this.foo(1)
     throw RuntimeException()
    }
    else -> {
     this.foo(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 private fun testNonFallThroughIfCase(i: Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo(1)
     if (false) {
      break@SWITCH
     } else {
      break@SWITCH
     }
    }
    else -> {
     this.foo(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 private fun testNonFallThroughBlockCase(i: Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo(1)
     break@SWITCH
    }
    else -> {
     this.foo(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 private fun testNonFallThrough_defaultIsNotLast(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      CASE_3@ do {
       when (i) {
        1 -> {
         break@CASE_3
        }
        2 -> {
         break@CASE_2
        }
        3 -> {
         break@CASE
        }
        else -> {
         break@CASE_1
        }
       }
       break@SWITCH
      } while (false)
      this.foo(1)
      break@SWITCH
     } while (false)
     this.foo(2)
     break@SWITCH
    } while (false)
    this.foo(3)
    break@SWITCH
   } while (false)
   this.foo(4)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo(1)
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughBreakInnerCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo(1)
    INNER_LABEL@ do {
     break@INNER_LABEL
    } while (false)
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughContinueInnerCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo(1)
    INNER_LABEL@ do {
     continue@INNER_LABEL
    } while (false)
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughLabeledStatement(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    INNER_LABEL@ do {
     if (false) {
      break@INNER_LABEL
     }
     return
    } while (false)
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughIfCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo(1)
    if (false) {
     break@SWITCH
    }
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThroughIfElseCase(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    if (true) {
     this.foo(1)
     break@SWITCH
    } else {
     this.foo(2)
    }
   } while (false)
   this.foo(2)
   break@SWITCH
  } while (false)
 }

 private fun testFallThoughLastCase(i: Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo(1)
     break@SWITCH
    }
    else -> {
     this.foo(2)
    }
   }
  } while (false)
 }

 private fun testDefaultIsNotLast_fallThrough(i: Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      CASE_3@ do {
       when (i) {
        1 -> {
         break@CASE_3
        }
        2 -> {
         break@CASE_2
        }
        4 -> {
         break@CASE
        }
        else -> {
         break@CASE_1
        }
       }
       break@SWITCH
      } while (false)
      this.foo(1)
     } while (false)
     this.foo(2)
    } while (false)
    this.foo(3)
   } while (false)
   this.foo(4)
  } while (false)
 }

 private fun testDefaultNotLast_fallThroughCase(i: Int): Int {
  var result: Int = 0
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when (i) {
       1 -> {
        break@CASE_2
       }
       3 -> {
        break@CASE
       }
       else -> {
        break@CASE_1
       }
      }
      break@SWITCH
     } while (false)
    } while (false)
    result = result + 10
    break@SWITCH
   } while (false)
   result = result + 100
   break@SWITCH
  } while (false)
  return result
 }

 private fun testDefaultNotLast_fallThroughDefault(i: Int): Int {
  var result: Int = 0
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when (i) {
       1 -> {
        break@CASE_2
       }
       3 -> {
        break@CASE
       }
       else -> {
        break@CASE_1
       }
      }
      break@SWITCH
     } while (false)
     result = result + 10
     break@SWITCH
    } while (false)
   } while (false)
   result = result + 100
   break@SWITCH
  } while (false)
  return result
 }

 private fun testNonExhaustive(numbers: Numbers?): Int {
  when (numbers!!) {
   Numbers.ONE -> {
    return 1
   }
   Numbers.TWO -> {
    return 2
   }
   else -> {}
  }
  return 3
 }

 private fun testNonExhaustive_fallThrough(numbers: Numbers?) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when (numbers!!) {
       Numbers.ONE -> {
        break@CASE_2
       }
       Numbers.TWO -> {
        break@CASE_1
       }
       else -> {
        break@CASE
       }
      }
      break@SWITCH
     } while (false)
     this.foo(1)
    } while (false)
    this.foo(2)
    break@SWITCH
   } while (false)
  } while (false)
 }

 private fun foo(i: Int) {}

 @ObjCName("J2ktSwitchstatementSwitchStatementCompanion", exact = true)
 companion object {
  @JvmStatic
  private fun testSwitchVariableDeclarations() {
   val unassigned: Int = 0
   val unassigned2: Int = 0
   var i: Int = 0
   var j: Int = 0
   var b: Int = 0
   var i_1: Int = 0
   SWITCH@ do {
    when (3) {
     1 -> {
      i = 0
      j = 2
      b = j + 1
      break@SWITCH
     }
     3 -> {
      i = 3
      assert(i == 3)
      return
     }
     else -> {}
    }
   } while (false)
   SWITCH_1@ do {
    when (5) {
     5 -> {
      i_1 = 1
      break@SWITCH_1
     }
     else -> {}
    }
   } while (false)
   assert(false)
  }
 }
}
