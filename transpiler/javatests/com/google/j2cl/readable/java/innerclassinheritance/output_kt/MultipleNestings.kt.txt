// Generated from "innerclassinheritance/MultipleNestings.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package innerclassinheritance

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktInnerclassinheritanceMultipleNestings", swiftName = "InnerclassinheritanceMultipleNestings", exact = true)
open class MultipleNestings {
 @ObjCName(name = "funInM")
 open fun funInM() {}

 @ObjCName(name = "J2ktInnerclassinheritanceMultipleNestings_Parent", swiftName = "InnerclassinheritanceMultipleNestings_Parent", exact = true)
 open inner class Parent {
  @ObjCName(name = "fun")
  open fun `fun`() {}
 }

 @ObjCName(name = "J2ktInnerclassinheritanceMultipleNestings_InnerClass1", swiftName = "InnerclassinheritanceMultipleNestings_InnerClass1", exact = true)
 open inner class InnerClass1: MultipleNestings.Parent() {
  @ObjCName(name = "funInI1")
  open fun funInI1() {}

  @ObjCName(name = "J2ktInnerclassinheritanceMultipleNestings_InnerClass1_InnerClass2", swiftName = "InnerclassinheritanceMultipleNestings_InnerClass1_InnerClass2", exact = true)
  open inner class InnerClass2: MultipleNestings.Parent() {
   @ObjCName(name = "funInI2")
   open fun funInI2() {}

   @ObjCName(name = "test")
   open fun test() {
    this.`fun`()
    this.`fun`()
    this@InnerClass1.`fun`()
    this@MultipleNestings.funInM()
    this@MultipleNestings.funInM()
    this@InnerClass1.funInI1()
    this@InnerClass1.funInI1()
    this.funInI2()
   }
  }
 }
}
