// Generated from "innerclassinheritance/ChildClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package innerclassinheritance

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName(name = "J2ktInnerclassinheritanceParentOuter", swiftName = "InnerclassinheritanceParentOuter", exact = true)
open class ParentOuter internal constructor() {
 @JvmField
 @ObjCName(name = "fieldInParentOuter_")
 var fieldInParentOuter: Int = 0

 @ObjCName(name = "funInParentOuter")
 open fun funInParentOuter() {}
}

@ObjCName(name = "J2ktInnerclassinheritanceParentInner", swiftName = "InnerclassinheritanceParentInner", exact = true)
open class ParentInner internal constructor() {
 @JvmField
 @ObjCName(name = "fieldInParentInner_")
 var fieldInParentInner: Int = 0

 @ObjCName(name = "funInParentInner")
 open fun funInParentInner() {}
}

@ObjCName(name = "J2ktInnerclassinheritanceChildClass", swiftName = "InnerclassinheritanceChildClass", exact = true)
open class ChildClass: ParentOuter() {
 @JvmField
 @ObjCName(name = "fieldInOuter_")
 var fieldInOuter: Int = 0

 @ObjCName(name = "funInOuter")
 open fun funInOuter() {}

 @ObjCName(name = "testLocalClass")
 open fun testLocalClass() {
  open class LocalClass internal constructor(): ChildClass() {
   @JvmField
   internal var object_pp_innerclassinheritance: Any? = this

   override fun funInParentOuter() {}

   open fun test() {
    this.funInOuter()
    this@ChildClass.funInOuter()
    this.funInParentOuter()
    this.funInParentOuter()
    this@ChildClass.funInParentOuter()
   }
  }
  LocalClass().test()
 }

 @ObjCName(name = "J2ktInnerclassinheritanceChildClass_InnerClass", swiftName = "InnerclassinheritanceChildClass_InnerClass", exact = true)
 open inner class InnerClass internal constructor(): ParentInner() {
  @JvmField
  @ObjCName(name = "fieldInInner_")
  var fieldInInner: Int = 0

  @ObjCName(name = "funInInner")
  open fun funInInner() {}

  @ObjCName(name = "testInnerClass")
  open fun testInnerClass(): Int {
   this@ChildClass.funInParentOuter()
   this@ChildClass.funInParentOuter()
   this@ChildClass.funInOuter()
   this@ChildClass.funInOuter()
   this.funInParentInner()
   this.funInParentInner()
   this.funInInner()
   this.funInInner()
   var a: Int = this@ChildClass.fieldInParentOuter
   a = this@ChildClass.fieldInParentOuter
   a = this@ChildClass.fieldInOuter
   a = this@ChildClass.fieldInOuter
   a = this.fieldInParentInner
   a = this.fieldInParentInner
   a = this.fieldInInner
   a = this.fieldInInner
   return a
  }
 }
}
