// Generated from "mixednestings/MixedNestings.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package mixednestings

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktMixednestingsMyInterface", swiftName = "MixednestingsMyInterface", exact = true)
fun interface MyInterface {
 @ObjCName(name = "fun")
 fun `fun`(
  @ObjCName(name = "withInt") a: Int
 ): Int
}

@ObjCName(name = "J2ktMixednestingsMixedNestings", swiftName = "MixednestingsMixedNestings", exact = true)
open class MixedNestings {
 @ObjCName(name = "mm")
 open fun mm() {}

 @ObjCName(name = "test")
 open fun test() {
  A().a()
 }

 @ObjCName(name = "J2ktMixednestingsMixedNestings_A", swiftName = "MixednestingsMixedNestings_A", exact = true)
 open inner class A internal constructor() {
  @ObjCName(name = "aa")
  open fun aa() {}

  @ObjCName(name = "a")
  open fun a() {
   open class B internal constructor() {
    open fun bb() {}

    open fun b(): Int {
     val i: MyInterface? = object : MyInterface {
      override fun `fun`(a: Int): Int {
       val ii: MyInterface? = MyInterface { n: Int ->
        this@MixedNestings.mm()
        this@A.aa()
        this@B.bb()
        val iii: MyInterface? = MyInterface { m: Int ->
         this@MixedNestings.mm()
         this@A.aa()
         this@B.bb()
         return@MyInterface object : MyInterface {
          override fun `fun`(b: Int): Int {
           return b
          }
         }.`fun`(100)
        }
        return@MyInterface iii!!.`fun`(200)
       }
       return ii!!.`fun`(300)
      }
     }
     return i!!.`fun`(400)
    }
   }
   B().b()
  }
 }
}
