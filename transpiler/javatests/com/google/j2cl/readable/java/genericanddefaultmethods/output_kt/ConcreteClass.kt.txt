// Generated from "genericanddefaultmethods/ConcreteClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package genericanddefaultmethods

import javaemul.lang.*
import java.lang.System
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktGenericanddefaultmethodsInterfaceWithDefault", swiftName = "GenericanddefaultmethodsInterfaceWithDefault", exact = true)
interface InterfaceWithDefault {
 @ObjCName(name = "foo")
 fun foo(
  @ObjCName(name = "withNSString") value: String?
 ) {
  System.out.println("in InterfaceWithDefault")
 }
}

@ObjCName(name = "J2ktGenericanddefaultmethodsGenericClass", swiftName = "GenericanddefaultmethodsGenericClass", exact = true)
open class GenericClass<T> internal constructor() {
 @ObjCName(name = "foo")
 open fun foo(
  @ObjCName(name = "withId") value: T
 ) {
  System.out.println("in GenericClass")
 }
}

@ObjCName(name = "J2ktGenericanddefaultmethodsConcreteClass", swiftName = "GenericanddefaultmethodsConcreteClass", exact = true)
open class ConcreteClass: GenericClass<String?>(), InterfaceWithDefault {
 override fun foo(arg0: String?) {
  super<GenericClass>.foo(arg0)
 }
}
