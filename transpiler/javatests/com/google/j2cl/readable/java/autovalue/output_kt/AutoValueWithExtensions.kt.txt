// Generated from "autovalue/AutoValueWithExtensions.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package autovalue

import javaemul.lang.*
import autovalue.AutoValue_AutoValueWithExtensions
import javaemul.lang.annotations.WasAutoValue
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktAutovalueAutoValueWithExtensions", swiftName = "AutovalueAutoValueWithExtensions", exact = true)
@WasAutoValue
abstract class AutoValueWithExtensions internal constructor() {
 @ObjCName(name = "getIntField")
 abstract fun getIntField(): Int

 @ObjCName(name = "getStringField")
 abstract fun getStringField(): String?

 internal abstract fun toPrettyString_pp_autovalue(): String?

 @ObjCName(name = "J2ktAutovalueAutoValueWithExtensionsCompanion", swiftName = "AutovalueAutoValueWithExtensionsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun create_pp_autovalue(): AutoValueWithExtensions? {
   return AutoValue_AutoValueWithExtensions(42, "text")
  }
 }
}
