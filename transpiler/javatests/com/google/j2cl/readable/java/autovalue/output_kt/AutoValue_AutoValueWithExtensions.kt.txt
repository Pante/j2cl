// Generated from "autovalue/AutoValue_AutoValueWithExtensions.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package autovalue

import javaemul.lang.*
import autovalue.___AutoValue_AutoValueWithExtensions
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import kotlin.text.StringBuilder

@ObjCName(name = "J2ktAutovalueAutoValue_AutoValueWithExtensions", swiftName = "AutovalueAutoValue_AutoValueWithExtensions", exact = true)
class AutoValue_AutoValueWithExtensions: ___AutoValue_AutoValueWithExtensions {
 internal constructor(intField: Int, stringField: String?): super(intField, stringField)

 override fun toPrettyString_pp_autovalue(): String? {
  return "AutoValueWithExtensions {" + "\n" + "  intField = " + this.getIntField() + "," + "\n" + "  stringField = " + AutoValue_AutoValueWithExtensions.format(
   this.getStringField(),
   1,
  ) + "," + "\n" + "}"
 }

 @ObjCName(name = "J2ktAutovalueAutoValue_AutoValueWithExtensionsCompanion", swiftName = "AutovalueAutoValue_AutoValueWithExtensionsCompanion", exact = true)
 companion object {
  @JvmStatic
  private fun format(value: Any?, indentLevel: Int): String? {
   if (value == null) {
    return "null"
   }
   return value!!.toString().java_replace(
    "\n",
    "\n" + AutoValue_AutoValueWithExtensions.___indent(indentLevel),
   )
  }

  @JvmStatic
  private fun ___indent(level: Int): String? {
   val builder: StringBuilder? = StringBuilder()
   var i: Int = 0
   while (i < level) {
    builder!!.append("  ")
    i = i + 1
   }
   return builder!!.toString()
  }
 }
}
