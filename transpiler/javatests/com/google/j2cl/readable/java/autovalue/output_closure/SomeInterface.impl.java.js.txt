goog.module('autovalue.SomeInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('autovalue.SomeInterface.$LambdaAdaptor$impl');

/**
 * @interface
 */
class SomeInterface {
 /** @abstract @return {?string} */
 getFoo() {}
 /** @abstract @return {number} */
 hashCode() {}
 /** @abstract @return {boolean} */
 equals(/** * */ other) {}
 /** @abstract @return {?string} */
 toString() {}
 /** @nodts @return {!SomeInterface} */
 static $adapt(/** ?function():?string */ fn) {
  SomeInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  SomeInterface.$clinit = () =>{};
  SomeInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__autovalue_SomeInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__autovalue_SomeInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('autovalue.SomeInterface.$LambdaAdaptor$impl');
 }
}
SomeInterface.$markImplementor(/**@type {Function}*/ (SomeInterface));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (SomeInterface), 'autovalue.SomeInterface');

exports = SomeInterface;

//# sourceMappingURL=SomeInterface.js.map
