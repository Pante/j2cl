// Generated from "autovalue/SimpleAutoValue.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package autovalue

import javaemul.lang.*
import autovalue.AutoValue_EmptyAutoValue
import autovalue.AutoValue_SimpleAutoValue
import autovalue.EmptyAutoValue
import java.util.AbstractCollection
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.IntArray
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.intArrayOf
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktAutovalueSimpleAutoValue", exact = true)
abstract class SimpleAutoValue {
 @ObjCName("getIntField")
 abstract fun getIntField(): Int

 @ObjCName("getBooleanField")
 abstract fun getBooleanField(): Boolean

 @ObjCName("getStringField")
 abstract fun getStringField(): String?

 @ObjCName("getDoubleField")
 abstract fun getDoubleField(): Double?

 @ObjCName("getNullableField")
 abstract fun getNullableField(): Double?

 @ObjCName("getArrayField")
 abstract fun getArrayField(): IntArray?

 private var intField: Int = 0

 private var field1: EmptyAutoValue? = null

 private var field2: EmptyAutoValue = AutoValue_EmptyAutoValue.Builder().build()!!

 @ObjCName("J2ktAutovalueSimpleAutoValueCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun create_pp_autovalue(): SimpleAutoValue? {
   return AutoValue_SimpleAutoValue(
    42,
    true,
    "text",
    java.lang.Double.valueOf(43.0) as Double?,
    java.lang.Double.valueOf(44.0) as Double?,
    intArrayOf(45),
   )
  }

  @JvmStatic
  internal fun castAndInstanceOf_pp_autovalue(o: Any?): Array<AutoValue_SimpleAutoValue?>? {
   return if (o is Array<*>) o as Array<AutoValue_SimpleAutoValue?>? else null
  }
 }

 @ObjCName("J2ktAutovalueSimpleAutoValue_GenericType", exact = true)
 abstract class GenericType internal constructor(): AbstractCollection<AutoValue_SimpleAutoValue?>() {
  internal open fun <T: AutoValue_SimpleAutoValue?> foo_pp_autovalue(o1: MutableList<out AutoValue_SimpleAutoValue?>?, o2: MutableList<AutoValue_SimpleAutoValue?>?): T {
   this.foo_pp_autovalue<AutoValue_SimpleAutoValue?>(null, null)!!.getArrayField()
   val o: AutoValue_SimpleAutoValue? = o1!!.get(0)
   return null as T
  }
 }
}
