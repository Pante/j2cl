// Generated from "innerclasswithconstructor/InnerClassWithConstructor.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package innerclasswithconstructor

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName(name = "J2ktInnerclasswithconstructorInnerClassWithConstructor", swiftName = "InnerclasswithconstructorInnerClassWithConstructor", exact = true)
open class InnerClassWithConstructor {
 @JvmField
 @ObjCName(name = "a_")
 var a: Int = 0

 @ObjCName(name = "J2ktInnerclasswithconstructorInnerClassWithConstructor_InnerClass", swiftName = "InnerclasswithconstructorInnerClassWithConstructor_InnerClass", exact = true)
 open inner class InnerClass {
  @JvmField
  @ObjCName(name = "b_")
  var b: Int = 0

  constructor(
   @ObjCName(name = "Int") b: Int
  ) {
   this.b = this@InnerClassWithConstructor.a + b
  }

  constructor(): this(
   this@InnerClassWithConstructor.a,
  )
 }

 @ObjCName(name = "J2ktInnerclasswithconstructorInnerClassWithConstructor_InnerClassWithSingleConstructor", swiftName = "InnerclasswithconstructorInnerClassWithConstructor_InnerClassWithSingleConstructor", exact = true)
 open inner class InnerClassWithSingleConstructor constructor(
  @ObjCName(name = "Int") b: Int
 ) {
  @JvmField
  @ObjCName(name = "b_")
  var b: Int = 0

  init {
   this.b = this@InnerClassWithConstructor.a + b
  }
 }
}
