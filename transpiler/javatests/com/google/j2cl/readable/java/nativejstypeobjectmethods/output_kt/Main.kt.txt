// Generated from "nativejstypeobjectmethods/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nativejstypeobjectmethods

import javaemul.lang.*
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNativejstypeobjectmethodsMain", swiftName = "NativejstypeobjectmethodsMain", exact = true)
open class Main {
 @ObjCName(name = "J2ktNativejstypeobjectmethodsMainCompanion", swiftName = "NativejstypeobjectmethodsMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "test")
  fun test() {
   val n1: Main.NativeJsTypeWithToString? = Main.NativeJsTypeWithToString()
   n1!!.toString()
   val n2: Any? = Main.NativeJsTypeWithToString()
   n2!!.toString()
   val n3: Main.NativeJsTypeWithoutToString? = Main.NativeJsTypeWithoutToString()
   n3!!.toString()
   val n4: Any? = Main.NativeJsTypeWithoutToString()
   n4!!.toString()
  }
 }

 @ObjCName(name = "J2ktNativejstypeobjectmethodsMain_NativeJsTypeWithToString", swiftName = "NativejstypeobjectmethodsMain_NativeJsTypeWithToString", exact = true)
 @JsType(namespace = "test.foo", isNative = true)
 open class NativeJsTypeWithToString {
  external override fun toString(): String
 }

 @ObjCName(name = "J2ktNativejstypeobjectmethodsMain_NativeJsTypeWithoutToString", swiftName = "NativejstypeobjectmethodsMain_NativeJsTypeWithoutToString", exact = true)
 @JsType(namespace = "test.foo", isNative = true)
 open class NativeJsTypeWithoutToString
}
