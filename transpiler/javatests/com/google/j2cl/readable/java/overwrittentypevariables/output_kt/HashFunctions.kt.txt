// Generated from "overwrittentypevariables/HashFunctions.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package overwrittentypevariables

import javaemul.lang.*
import kotlin.Enum
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktOverwrittentypevariablesMyFunction", swiftName = "OverwrittentypevariablesMyFunction", exact = true)
fun interface MyFunction<F, T> {
 @ObjCName(name = "apply")
 fun apply(
  @ObjCName(name = "withId") input: F
 ): T
}

@ObjCName(name = "J2ktOverwrittentypevariablesHashFunction", swiftName = "OverwrittentypevariablesHashFunction", exact = true)
fun interface HashFunction<T>: MyFunction<T, String?>

@ObjCName(name = "J2ktOverwrittentypevariablesHashFunctions", swiftName = "OverwrittentypevariablesHashFunctions", exact = true)
open class HashFunctions {
 @ObjCName(name = "J2ktOverwrittentypevariablesHashFunctionsCompanion", swiftName = "OverwrittentypevariablesHashFunctionsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "hashFunction")
  fun <T> hashFunction(): HashFunction<T>? {
   return object : HashFunction<T> {
    override fun apply(input: T): String? {
     return ""
    }
   }
  }

  @JvmStatic
  @ObjCName(name = "enumHashFunction")
  fun <T: Enum<T>> enumHashFunction(): HashFunction<T>? {
   return object : HashFunction<T> {
    override fun apply(input: T): String? {
     return "" + input!!.ordinal
    }
   }
  }
 }
}
