// Generated from "nestedinstanceinnerclass/OuterClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nestedinstanceinnerclass

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNestedinstanceinnerclassOuterClass", swiftName = "NestedinstanceinnerclassOuterClass", exact = true)
open class OuterClass {
 @ObjCName(name = "test")
 open fun test() {
  OuterClass().InnerClass().InnerInnerClass()
 }

 @ObjCName(name = "J2ktNestedinstanceinnerclassOuterClass_InnerClass", swiftName = "NestedinstanceinnerclassOuterClass_InnerClass", exact = true)
 open inner class InnerClass {
  @ObjCName(name = "J2ktNestedinstanceinnerclassOuterClass_InnerClass_InnerInnerClass", swiftName = "NestedinstanceinnerclassOuterClass_InnerClass_InnerInnerClass", exact = true)
  open inner class InnerInnerClass {
   @JvmField
   @ObjCName(name = "x_")
   var x: OuterClass.InnerClass? = this@InnerClass

   @JvmField
   @ObjCName(name = "y_")
   var y: OuterClass? = this@OuterClass
  }
 }
}
