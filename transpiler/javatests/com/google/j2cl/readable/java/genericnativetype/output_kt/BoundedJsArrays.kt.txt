// Generated from "genericnativetype/BoundedJsArrays.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package genericnativetype

import javaemul.lang.*
import genericnativetype.BoundedJsArray
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktGenericnativetypeBoundedJsArrays", swiftName = "GenericnativetypeBoundedJsArrays", exact = true)
open class BoundedJsArrays {
 private constructor()

 @ObjCName(name = "J2ktGenericnativetypeBoundedJsArraysCompanion", swiftName = "GenericnativetypeBoundedJsArraysCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "create")
  fun <V> create(): BoundedJsArray<V>? {
   return BoundedJsArray.create<V>()
  }

  @JvmStatic
  @ObjCName(name = "createWithSize")
  fun <V> createWithSize(
   @ObjCName(name = "withInt") size: Int
  ): BoundedJsArray<V>? {
   return BoundedJsArray.create<V>(size)
  }
 }
}
