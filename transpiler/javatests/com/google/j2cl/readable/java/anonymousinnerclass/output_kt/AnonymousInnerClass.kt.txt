// Generated from "anonymousinnerclass/AnonymousInnerClass.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package anonymousinnerclass

import javaemul.lang.*
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmField

open class A internal constructor() {
 open inner class B internal constructor()
}

open class AnonymousInnerClass {
 open fun test(arg: Int) {
  val ic: AnonymousInnerClass.InnerClass = object : InnerClass() {}
  val a: A = A()
  val b: A.B = object : B() {}
  open class C internal constructor() {
   @JvmField
   var fInC: Int = arg
  }
  val c: C = object : C() {}
 }

 open inner class InnerClass
}
