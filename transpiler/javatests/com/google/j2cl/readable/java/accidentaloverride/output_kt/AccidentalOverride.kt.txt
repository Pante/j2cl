// Generated from "accidentaloverride/AccidentalOverride.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package accidentaloverride

import javaemul.lang.*
import kotlin.AssertionError
import kotlin.Error
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktAccidentaloverrideParent", swiftName = "AccidentaloverrideParent", exact = true)
open class Parent<T: Error?> internal constructor() {
 @ObjCName(name = "foo")
 open fun foo(
  @ObjCName(name = "withJavaLangError") e: T
 ) {}

 @ObjCName(name = "bar")
 fun bar(
  @ObjCName(name = "withJavaLangError") e: T
 ) {}
}

@ObjCName(name = "J2ktAccidentaloverrideSuperInterface", swiftName = "AccidentaloverrideSuperInterface", exact = true)
interface SuperInterface<T> {
 @ObjCName(name = "foo")
 fun foo(
  @ObjCName(name = "withId") t: T
 )

 @ObjCName(name = "bar")
 fun bar(
  @ObjCName(name = "withId") e: T
 )
}

@ObjCName(name = "J2ktAccidentaloverrideAnotherAccidentalOverride", swiftName = "AccidentaloverrideAnotherAccidentalOverride", exact = true)
open class AnotherAccidentalOverride internal constructor(): Parent<AssertionError?>(), SuperInterface<AssertionError?>

@ObjCName(name = "J2ktAccidentaloverrideAccidentalOverride", swiftName = "AccidentaloverrideAccidentalOverride", exact = true)
open class AccidentalOverride: Parent<Error?>(), SuperInterface<Error?>
