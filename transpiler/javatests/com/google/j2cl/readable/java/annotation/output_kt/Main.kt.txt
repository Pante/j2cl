// Generated from "annotation/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package annotation

import javaemul.lang.*
import java.lang.Class
import kotlin.Annotation
import kotlin.Array
import kotlin.Boolean
import kotlin.BooleanArray
import kotlin.Int
import kotlin.IntArray
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktAnnotationMain", exact = true)
open class Main {
 @ObjCName("J2ktAnnotationMainCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun test_pp_annotation(foo: Main.Foo?) {
   val booleanConstant: Boolean = Main.Foo.BOOLEAN_CONSTANT
   val intConstant: Int = Main.Foo.INT_CONSTANT
   val stringConstant: String? = Main.Foo.STRING_CONSTANT
   val booleanValue: Boolean = foo!!.booleanValue
   val intValue: Int = foo!!.intValue
   val stringValue: String? = foo!!.stringValue
   val classValue: Class<*>? = foo!!.classValue
   val enumValue: Main.SomeEnum? = foo!!.enumValue
   val annotationValue: Main.Zoo? = foo!!.annotationValue
   val booleanArray: BooleanArray? = foo!!.booleanArray
   val intArray: IntArray? = foo!!.intArray
   val stringArray: Array<String?>? = foo!!.stringArray as Array<String?>?
   val classArray: Array<Class<*>?>? = foo!!.classArray as Array<Class<*>?>?
   val enumArray: Array<Main.SomeEnum?>? = foo!!.enumArray as Array<Main.SomeEnum?>?
   val annotationArray: Array<Main.Zoo?>? = foo!!.annotationArray as Array<Main.Zoo?>?
  }
 }

 @ObjCName("J2ktAnnotationMain_Foo", exact = true)
 interface Foo: Annotation {
  @ObjCName("booleanValue")
  val booleanValue: Boolean

  @ObjCName("intValue")
  val intValue: Int

  @ObjCName("stringValue")
  val stringValue: String

  @ObjCName("classValue")
  val classValue: Class<*>

  @ObjCName("enumValue")
  val enumValue: Main.SomeEnum

  @ObjCName("annotationValue")
  val annotationValue: Main.Zoo

  @ObjCName("booleanArray")
  val booleanArray: BooleanArray

  @ObjCName("intArray")
  val intArray: IntArray

  @ObjCName("stringArray")
  val stringArray: Array<String>

  @ObjCName("classArray")
  val classArray: Array<Class<*>>

  @ObjCName("enumArray")
  val enumArray: Array<Main.SomeEnum>

  @ObjCName("annotationArray")
  val annotationArray: Array<Main.Zoo>

  @ObjCName("J2ktAnnotationMain_FooCompanion", exact = true)
  companion object {
   @ObjCName("BOOLEAN_CONSTANT_")
   const val BOOLEAN_CONSTANT: Boolean = false

   @ObjCName("INT_CONSTANT_")
   const val INT_CONSTANT: Int = 123

   @ObjCName("STRING_CONSTANT_")
   const val STRING_CONSTANT: String = "foo"
  }
 }

 @ObjCName("J2ktAnnotationMain_SomeEnum", exact = true)
 enum class SomeEnum {
  @ObjCName("ZERO")
  ZERO,
  @ObjCName("ONE")
  ONE;
 }

 @ObjCName("J2ktAnnotationMain_Zoo", exact = true)
 interface Zoo: Annotation {}
}
