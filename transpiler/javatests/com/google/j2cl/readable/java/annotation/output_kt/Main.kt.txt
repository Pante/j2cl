// Generated from "annotation/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package annotation

import javaemul.lang.*
import kotlin.Annotation
import kotlin.Array
import kotlin.Boolean
import kotlin.BooleanArray
import kotlin.Int
import kotlin.IntArray
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import kotlin.reflect.KClass

@ObjCName("J2ktAnnotationMain", swiftName = "AnnotationMain", exact = true)
open class Main {
 @ObjCName("J2ktAnnotationMainCompanion", swiftName = "AnnotationMainCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun test_pp_annotation(foo: Foo?) {
   val booleanConstant: Boolean = Foo.BOOLEAN_CONSTANT
   val intConstant: Int = Foo.INT_CONSTANT
   val stringConstant: String = Foo.STRING_CONSTANT
   val booleanValue: Boolean = foo!!.booleanValue
   val intValue: Int = foo!!.intValue
   val stringValue: String = foo!!.stringValue
   val enumValue: SomeEnum = foo!!.enumValue
   val annotationValue: Zoo = foo!!.annotationValue
   val booleanArray: BooleanArray = foo!!.booleanArray
   val intArray: IntArray = foo!!.intArray
   val stringArray: Array<String?> = foo!!.stringArray as Array<String?>
   val enumArray: Array<SomeEnum?> = foo!!.enumArray as Array<SomeEnum?>
   val annotationArray: Array<Zoo?> = foo!!.annotationArray as Array<Zoo?>
  }

  @JvmStatic
  internal fun testClassValues_pp_annotation(foo: Foo?) {}

  @JvmStatic
  internal fun test_pp_annotation(classImplementingAnnotation: Main.ClassImplementingAnnotation?): Annotation? {
   return classImplementingAnnotation
  }

  @JvmStatic
  internal fun test_pp_annotation(interfaceExtendingAnnotation: InterfaceExtendingAnnotation?): Annotation? {
   return interfaceExtendingAnnotation
  }
 }

 @ObjCName("J2ktAnnotationMain_Foo", swiftName = "AnnotationMain_Foo", exact = true)
 annotation class Foo (
  @ObjCName("booleanValue")
  val booleanValue: Boolean,
  @ObjCName("intValue")
  val intValue: Int,
  @ObjCName("stringValue")
  val stringValue: String,
  @ObjCName("classValue")
  val classValue: KClass<*>,
  @ObjCName("stringClassValue")
  val stringClassValue: KClass<String>,
  @ObjCName("wildcardClassValue")
  val wildcardClassValue: KClass<out KClass<*>>,
  @ObjCName("enumValue")
  val enumValue: SomeEnum,
  @ObjCName("annotationValue")
  val annotationValue: Zoo,
  @ObjCName("booleanArray")
  val booleanArray: BooleanArray,
  @ObjCName("intArray")
  val intArray: IntArray,
  @ObjCName("stringArray")
  val stringArray: Array<String>,
  @ObjCName("classArray")
  val classArray: Array<KClass<*>>,
  @ObjCName("enumArray")
  val enumArray: Array<SomeEnum>,
  @ObjCName("annotationArray")
  val annotationArray: Array<Zoo>) {
  @ObjCName("J2ktAnnotationMain_FooCompanion", swiftName = "AnnotationMain_FooCompanion", exact = true)
  companion object {
   @ObjCName("BOOLEAN_CONSTANT_")
   const val BOOLEAN_CONSTANT: Boolean = false

   @ObjCName("INT_CONSTANT_")
   const val INT_CONSTANT: Int = 123

   @ObjCName("STRING_CONSTANT_")
   const val STRING_CONSTANT: String = "foo"
  }
 }

 @ObjCName("J2ktAnnotationMain_SomeEnum", swiftName = "AnnotationMain_SomeEnum", exact = true)
 enum class SomeEnum {
  @ObjCName("ZERO")
  ZERO,
  @ObjCName("ONE")
  ONE;
 }

 @ObjCName("J2ktAnnotationMain_Zoo", swiftName = "AnnotationMain_Zoo", exact = true)
 annotation class Zoo

 @ObjCName("J2ktAnnotationMain_ClassImplementingAnnotation", swiftName = "AnnotationMain_ClassImplementingAnnotation", exact = true)
 abstract inner class ClassImplementingAnnotation internal constructor(): Annotation

 @ObjCName("J2ktAnnotationMain_InterfaceExtendingAnnotation", swiftName = "AnnotationMain_InterfaceExtendingAnnotation", exact = true)
 interface InterfaceExtendingAnnotation: Annotation
}
