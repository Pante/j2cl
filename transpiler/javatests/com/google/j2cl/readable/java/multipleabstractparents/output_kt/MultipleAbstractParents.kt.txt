// Generated from "multipleabstractparents/MultipleAbstractParents.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package multipleabstractparents

import javaemul.lang.*
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.assert
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents", swiftName = "MultipleabstractparentsMultipleAbstractParents", exact = true)
open class MultipleAbstractParents {
 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParentsCompanion", swiftName = "MultipleabstractparentsMultipleAbstractParentsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "main")
  fun main(
   vararg @ObjCName(name = "withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
   assert(MultipleAbstractParents.ArrayList<String?>().getFoo(null)!!.equals("AbstractCollection"))
   assert(MultipleAbstractParents.StringList().getFoo(null)!!.equals("AbstractCollection"))
   assert((MultipleAbstractParents.StringList() as MultipleAbstractParents.IStringList).getFoo(null)!!.equals("AbstractCollection"))
  }
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_List", swiftName = "MultipleabstractparentsMultipleAbstractParents_List", exact = true)
 fun interface List<T> {
  @ObjCName(name = "getFoo")
  fun getFoo(
   @ObjCName(name = "withId") t: T
  ): String?
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_Collection", swiftName = "MultipleabstractparentsMultipleAbstractParents_Collection", exact = true)
 fun interface Collection<T> {
  @ObjCName(name = "getFoo")
  fun getFoo(
   @ObjCName(name = "withId") t: T
  ): String?
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractListCollection", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractListCollection", exact = true)
 abstract class AbstractListCollection<T>: MultipleAbstractParents.List<T>, MultipleAbstractParents.Collection<T>

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractCollection", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractCollection", exact = true)
 abstract class AbstractCollection<T> {
  @ObjCName(name = "getFoo")
  open fun getFoo(
   @ObjCName(name = "withId") t: T
  ): String? {
   return "AbstractCollection"
  }
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractList", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractList", exact = true)
 abstract class AbstractList<T>: MultipleAbstractParents.AbstractCollection<T>(), MultipleAbstractParents.List<T>

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractList2", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractList2", exact = true)
 abstract class AbstractList2<T>: MultipleAbstractParents.List<T>

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_ArrayList", swiftName = "MultipleabstractparentsMultipleAbstractParents_ArrayList", exact = true)
 open class ArrayList<T>: MultipleAbstractParents.AbstractList<T>()

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_IStringList", swiftName = "MultipleabstractparentsMultipleAbstractParents_IStringList", exact = true)
 fun interface IStringList: MultipleAbstractParents.List<String?> {
  override fun getFoo(string: String?): String?
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractStringList", exact = true)
 abstract class AbstractStringList: MultipleAbstractParents.AbstractList<String?>(), MultipleAbstractParents.IStringList

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList2", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractStringList2", exact = true)
 abstract class AbstractStringList2: MultipleAbstractParents.AbstractList2<String?>(), MultipleAbstractParents.IStringList

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_SubAbstractStringList2", swiftName = "MultipleabstractparentsMultipleAbstractParents_SubAbstractStringList2", exact = true)
 open class SubAbstractStringList2: MultipleAbstractParents.AbstractStringList2() {
  override fun getFoo(t: String?): String? {
   return null
  }
 }

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList3", swiftName = "MultipleabstractparentsMultipleAbstractParents_AbstractStringList3", exact = true)
 abstract class AbstractStringList3: MultipleAbstractParents.AbstractList2<String?>()

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_StringList", swiftName = "MultipleabstractparentsMultipleAbstractParents_StringList", exact = true)
 open class StringList: MultipleAbstractParents.AbstractStringList()

 @ObjCName(name = "J2ktMultipleabstractparentsMultipleAbstractParents_StringListChild", swiftName = "MultipleabstractparentsMultipleAbstractParents_StringListChild", exact = true)
 open class StringListChild: MultipleAbstractParents.StringList()
}
