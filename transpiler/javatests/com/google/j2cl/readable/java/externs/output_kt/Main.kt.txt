// Generated from "externs/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package externs

import javaemul.lang.*
import externs.Main.TopLevelExtern.Inner
import externs.Main.TopLevelExtern.InnerExtern
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsProperty
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktExternsMain", swiftName = "ExternsMain", exact = true)
open class Main {
 @JvmField
 @ObjCName("aFoo_")
 var aFoo: FooOverlay? = null

 @JvmField
 internal var innerExtern_pp_externs: InnerExtern? = null

 @JvmField
 internal var inner_pp_externs: Inner? = null

 @ObjCName("J2ktExternsMainCompanion", swiftName = "ExternsMainCompanion", exact = true)
 companion object {
  @JvmStatic
  private fun testFooOverlay(fooOverlay: FooOverlay?): Boolean {
   return fooOverlay!!.getFoo()!!.equals("Hello")
  }

  @JvmStatic
  @JsMethod
  private external fun useDirectlyAsFoo(fooOverlay: Any?)

  @JvmStatic
  @ObjCName("main")
  fun main(
   vararg @ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
   Main.testFooOverlay(
    FooImpl() as Any as FooOverlay,
   )
   Main.useDirectlyAsFoo(
    FooImpl(),
   )
  }
 }

 @ObjCName("J2ktExternsMain_FooImpl", swiftName = "ExternsMain_FooImpl", exact = true)
 open class FooImpl internal constructor() {
  @JvmField
  @JsProperty(name = "foo")
  internal var foo_pp_externs: String? = null
 }

 @ObjCName("J2ktExternsMain_FooOverlay", swiftName = "ExternsMain_FooOverlay", exact = true)
 @JsType(name = "Foo", namespace = JsPackage.GLOBAL, isNative = true)
 fun interface FooOverlay {
  @ObjCName("getFoo")
  @JsProperty
  fun getFoo(): String?
 }

 @ObjCName("J2ktExternsMain_TopLevelExtern", swiftName = "ExternsMain_TopLevelExtern", exact = true)
 @JsType(namespace = JsPackage.GLOBAL, isNative = true)
 open class TopLevelExtern {
  @ObjCName("J2ktExternsMain_TopLevelExtern_InnerExtern", swiftName = "ExternsMain_TopLevelExtern_InnerExtern", exact = true)
  @JsType(isNative = true)
  open class InnerExtern

  @ObjCName("J2ktExternsMain_TopLevelExtern_Inner", swiftName = "ExternsMain_TopLevelExtern_Inner", exact = true)
  @JsType(name = "FooImpl", namespace = "externs.Main", isNative = true)
  open class Inner
 }
}
