// Generated from "labelstatement/LabeledStatement.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package labelstatement

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktLabelstatementLabeledStatement", swiftName = "LabelstatementLabeledStatement", exact = true)
open class LabeledStatement {
 @ObjCName(name = "loopStatements")
 open fun loopStatements() {
  while (true) {
   break
  }
  while (true) {
   when (0) {
    0 -> {
     continue
    }
    else -> {}
   }
  }
 }

 @ObjCName(name = "simpleStatement")
 open fun simpleStatement() {
  this.foo()
  do {
   break
  } while (false)
  do {
   break
  } while (false)
  do {
   break
  } while (false)
  do {
   break
  } while (false)
  return
 }

 @ObjCName(name = "block")
 open fun block() {}

 @ObjCName(name = "ifStatement")
 open fun ifStatement() {
  if (true) {}
 }

 @ObjCName(name = "switchStatement")
 open fun switchStatement() {
  LABEL@ do {
   CASE@ do {
    do {
     when (0) {
      0 -> {
       break
      }
      else -> {
       break@CASE
      }
     }
     break@LABEL
    } while (false)
    if (true) {
     break@LABEL
    }
   } while (false)
  } while (false)
 }

 @ObjCName(name = "nestedScopes")
 open fun nestedScopes() {
  object : Any() {
   internal fun m_pp_labelstatement() {}
  }
 }

 private fun foo() {}
}
