// Generated from "j2ktnewobjcname/MethodExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnewobjcname

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.LongArray
import kotlin.OptIn
import kotlin.Short
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnewobjcnameMethodExample", swiftName = "J2ktnewobjcnameMethodExample", exact = true)
open class MethodExample {
 @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExampleCompanion", swiftName = "J2ktnewobjcnameMethodExampleCompanion", exact = true)
 companion object {
  @JvmStatic
  @kotlin.native.ObjCName("main")
  fun main(
   vararg @kotlin.native.ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
  }
 }

 @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_Foo", swiftName = "J2ktnewobjcnameMethodExample_Foo", exact = true)
 open class Foo

 @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName", swiftName = "J2ktnewobjcnameMethodExample_ObjCName", exact = true)
 open class ObjCName {
  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
   @kotlin.native.ObjCName("withLongArray") l: LongArray?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
   @kotlin.native.ObjCName("withLongArray2") l: Array<LongArray?>?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
   @kotlin.native.ObjCName("withId") id: Any?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_Foo", swiftName = "with") foo: Foo?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_FooArray") foo: Array<Foo?>?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_FooArray2") foo: Array<Array<Foo?>?>?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun <T> instanceMethod(
   @kotlin.native.ObjCName("withId") t: T
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun <S: String?> instanceMethod(
   @kotlin.native.ObjCName("withNSString", swiftName = "with") s: S
  ) {}

  @kotlin.native.ObjCName("newFoo")
  open fun foo() {}

  @kotlin.native.ObjCName("newProtectedFoo")
  open fun protectedFoo() {}

  @kotlin.native.ObjCName("implicitParams")
  open fun implicitParams() {}

  @kotlin.native.ObjCName("implicitParams")
  open fun implicitParams(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int
  ) {}

  @kotlin.native.ObjCName("implicitParams")
  open fun implicitParams(
   @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
   @kotlin.native.ObjCName("withNSString", swiftName = "with") s: String?
  ) {}

  @kotlin.native.ObjCName("explicitParams")
  open fun explicitParams() {}

  @kotlin.native.ObjCName("explicitParams")
  open fun explicitParams(
   @kotlin.native.ObjCName("WithIndex") i: Int
  ) {}

  @kotlin.native.ObjCName("explicitParams")
  open fun explicitParams(
   @kotlin.native.ObjCName("WithIndex") i: Int,
   @kotlin.native.ObjCName("name") s: String?
  ) {}

  @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCNameCompanion", swiftName = "J2ktnewobjcnameMethodExample_ObjCNameCompanion", exact = true)
  companion object {
   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
    @kotlin.native.ObjCName("withLongArray") l: LongArray?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
    @kotlin.native.ObjCName("withLongArray2") l: Array<LongArray?>?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt", swiftName = "with") i: Int,
    @kotlin.native.ObjCName("withId") id: Any?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_Foo", swiftName = "with") foo: Foo?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_FooArray") foo: Array<Foo?>?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_FooArray2") foo: Array<Array<Foo?>?>?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun <T> staticMethod(
    @kotlin.native.ObjCName("withId") t: T
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun <S: String?> staticMethod(
    @kotlin.native.ObjCName("withNSString", swiftName = "with") s: S
   ) {}
  }

  @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special", exact = true)
  class Special {
   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithBoolean", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithBoolean", exact = true)
   class WithBoolean {
    @kotlin.native.ObjCName("get", swiftName = "getWithBoolean")
    fun get(
     @kotlin.native.ObjCName("withBoolean", swiftName = "_") x: Boolean
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithChar", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithChar", exact = true)
   class WithChar {
    @kotlin.native.ObjCName("get", swiftName = "getWithChar")
    fun get(
     @kotlin.native.ObjCName("withChar", swiftName = "_") x: Char
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithByte", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithByte", exact = true)
   class WithByte {
    @kotlin.native.ObjCName("get", swiftName = "getWithByte")
    fun get(
     @kotlin.native.ObjCName("withByte", swiftName = "_") x: Byte
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithShort", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithShort", exact = true)
   class WithShort {
    @kotlin.native.ObjCName("get", swiftName = "getWithShort")
    fun get(
     @kotlin.native.ObjCName("withShort", swiftName = "_") x: Short
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithInt", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithInt", exact = true)
   class WithInt {
    @kotlin.native.ObjCName("get", swiftName = "getWith")
    fun get(
     @kotlin.native.ObjCName("withInt", swiftName = "_") x: Int
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithLong", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithLong", exact = true)
   class WithLong {
    @kotlin.native.ObjCName("get", swiftName = "getWithLong")
    fun get(
     @kotlin.native.ObjCName("withLong", swiftName = "_") x: Long
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithFloat", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithFloat", exact = true)
   class WithFloat {
    @kotlin.native.ObjCName("get", swiftName = "getWith")
    fun get(
     @kotlin.native.ObjCName("withFloat", swiftName = "_") x: Float
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithDouble", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithDouble", exact = true)
   class WithDouble {
    @kotlin.native.ObjCName("get", swiftName = "getWith")
    fun get(
     @kotlin.native.ObjCName("withDouble", swiftName = "_") x: Double
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithObject", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithObject", exact = true)
   class WithObject {
    @kotlin.native.ObjCName("get", swiftName = "getWithId")
    fun get(
     @kotlin.native.ObjCName("withId", swiftName = "_") x: Any?
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithString", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithString", exact = true)
   class WithString {
    @kotlin.native.ObjCName("get", swiftName = "getWith")
    fun get(
     @kotlin.native.ObjCName("withNSString", swiftName = "_") x: String?
    ) {}
   }

   @kotlin.native.ObjCName("J2ktJ2ktnewobjcnameMethodExample_ObjCName_Special_WithFoo", swiftName = "J2ktnewobjcnameMethodExample_ObjCName_Special_WithFoo", exact = true)
   class WithFoo {
    @kotlin.native.ObjCName("get", swiftName = "getWith")
    fun get(
     @kotlin.native.ObjCName("withJ2ktnewobjcnameMethodExample_Foo", swiftName = "_") x: Foo?
    ) {}
   }
  }
 }
}
