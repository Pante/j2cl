// Generated from "j2ktnewobjcname/ConstructorExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnewobjcname

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnewobjcnameConstructorExample", swiftName = "J2ktnewobjcnameConstructorExample", exact = true)
open class ConstructorExample {
 @ObjCName("J2ktJ2ktnewobjcnameConstructorExample_NotAnnotated", swiftName = "J2ktnewobjcnameConstructorExample_NotAnnotated", exact = true)
 open class NotAnnotated {
  constructor()

  constructor(
   @ObjCName("Int") i: Int
  )

  constructor(
   @ObjCName("Int") i: Int,
   @ObjCName("withNSString") s: String?
  )

  constructor(
   @ObjCName("Int") i: Int,
   @ObjCName("withNSString") s: String?,
   @ObjCName("withId") id: Any?
  )
 }

 @ObjCName("J2ktJ2ktnewobjcnameConstructorExample_ExplicitParams", swiftName = "J2ktnewobjcnameConstructorExample_ExplicitParams", exact = true)
 open class ExplicitParams {
  constructor()

  constructor(
   @ObjCName("Index") i: Int
  )

  constructor(
   @ObjCName("Index") i: Int,
   @ObjCName("withName") s: String?
  )

  constructor(
   @ObjCName("Index") i: Int,
   @ObjCName("withName") s: String?,
   @ObjCName("withObject") id: Any?
  )
 }

 @ObjCName("J2ktJ2ktnewobjcnameConstructorExample_ImplicitParams", swiftName = "J2ktnewobjcnameConstructorExample_ImplicitParams", exact = true)
 open class ImplicitParams {
  constructor()

  constructor(
   @ObjCName("Int") i: Int
  )

  constructor(
   @ObjCName("Int") i: Int,
   @ObjCName("withNSString") s: String?
  )

  constructor(
   @ObjCName("Int") i: Int,
   @ObjCName("withNSString") s: String?,
   @ObjCName("withId") id: Any?
  )
 }
}
