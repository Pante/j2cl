// Generated from "simplebridgemethods/SimpleBridgeMethods.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package simplebridgemethods

import javaemul.lang.*
import kotlin.AssertionError
import kotlin.Error
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktSimplebridgemethodsSuperclass", swiftName = "SimplebridgemethodsSuperclass", exact = true)
open class Superclass<T: Error?> internal constructor() {
 @ObjCName(name = "m1")
 open fun m1(
  @ObjCName(name = "withJavaLangError") t: T
 ) {}
}

@ObjCName(name = "J2ktSimplebridgemethodsSubclass", swiftName = "SimplebridgemethodsSubclass", exact = true)
open class Subclass internal constructor(): Superclass<AssertionError?>() {
 override fun m1(a: AssertionError?) {}
}

@ObjCName(name = "J2ktSimplebridgemethodsAnotherSubclass", swiftName = "SimplebridgemethodsAnotherSubclass", exact = true)
open class AnotherSubclass internal constructor(): Superclass<AssertionError?>()

@ObjCName(name = "J2ktSimplebridgemethodsCallable", swiftName = "SimplebridgemethodsCallable", exact = true)
fun interface Callable<V> {
 @ObjCName(name = "call")
 fun call(
  @ObjCName(name = "withId") v: V
 )
}

@ObjCName(name = "J2ktSimplebridgemethodsTask", swiftName = "SimplebridgemethodsTask", exact = true)
open class Task<T> internal constructor(): Callable<T> {
 override fun call(t: T) {}
}

@ObjCName(name = "J2ktSimplebridgemethodsAnotherTask", swiftName = "SimplebridgemethodsAnotherTask", exact = true)
open class AnotherTask<T: AssertionError?> internal constructor(): Callable<Superclass<T>?> {
 override fun call(t: Superclass<T>?) {}
}

@ObjCName(name = "J2ktSimplebridgemethodsSimpleBridgeMethods", swiftName = "SimplebridgemethodsSimpleBridgeMethods", exact = true)
open class SimpleBridgeMethods
