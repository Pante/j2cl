// Generated from "j2ktnotpassing/TypeWildCards.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class TypeWildCards {
 companion object {
  @JvmStatic
  fun <T: Observable<*>> testObservableParameterized(observable: T) {
   (observable as Observable<Any?>).addObserver(
    Observer { e: Any? ->
    },
   )
  }

  @JvmStatic
  fun testRecursiveObservable(observable: RecursiveObservable<*>) {
   (observable as RecursiveObservable<RecursiveObservable<E>>).addObserver(
    Observer { e ->
    },
   )
  }
 }

 fun interface Observer<E> {
  fun on(event: E)
 }

 fun interface Observable<E> {
  fun addObserver(observer: Observer<E>)
 }

 fun interface RecursiveObservable<E: RecursiveObservable<E>> {
  fun addObserver(observer: Observer<E>)
 }
}
