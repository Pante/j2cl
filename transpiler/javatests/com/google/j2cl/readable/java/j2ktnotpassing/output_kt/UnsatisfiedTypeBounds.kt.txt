// Generated from "j2ktnotpassing/UnsatisfiedTypeBounds.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBounds", swiftName = "J2ktnotpassingUnsatisfiedTypeBounds", exact = true)
open class UnsatisfiedTypeBounds internal constructor() {
 @ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBoundsCompanion", swiftName = "J2ktnotpassingUnsatisfiedTypeBoundsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun <T: Any> methodWithTypeConstraints_pp_j2ktnotpassing(helper: Helper<T>, foo: Foo<out T>): T {
   return foo.get()
  }

  @JvmStatic
  internal fun test_pp_j2ktnotpassing() {
   val command: Command? = UnsatisfiedTypeBounds.methodWithTypeConstraints_pp_j2ktnotpassing<Command>(
    Helper<Command>(),
    FooCommand(),
   )
  }
 }

 @ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBounds_Foo", swiftName = "J2ktnotpassingUnsatisfiedTypeBounds_Foo", exact = true)
 fun interface Foo<T: Foo<T>> {
  @ObjCName("get")
  fun get(): T
 }

 @ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBounds_Command", swiftName = "J2ktnotpassingUnsatisfiedTypeBounds_Command", exact = true)
 interface Command

 @ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBounds_FooCommand", swiftName = "J2ktnotpassingUnsatisfiedTypeBounds_FooCommand", exact = true)
 open class FooCommand internal constructor(): Foo<FooCommand>, Command {
  override fun get(): FooCommand {
   return this
  }
 }

 @ObjCName("J2ktJ2ktnotpassingUnsatisfiedTypeBounds_Helper", swiftName = "J2ktnotpassingUnsatisfiedTypeBounds_Helper", exact = true)
 class Helper<T: Any> internal constructor()
}
