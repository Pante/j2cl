// Generated from "j2ktnotpassing/SmartCasts.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingSmartCasts", exact = true)
open class SmartCasts {
 @ObjCName("J2ktJ2ktnotpassingSmartCastsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testParameterReference")
  fun <T: Any> testParameterReference(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<T>
  ) {
   SmartCasts.acceptFooOfObject(foo as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(foo)
  }

  @JvmStatic
  @ObjCName("testFinalVariableReference")
  fun <T: Any> testFinalVariableReference(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<T>
  ) {
   val localFoo: SmartCasts.Foo<T>? = foo
   SmartCasts.acceptFooOfObject((localFoo as SmartCasts.Foo<Any>?)!!)
   SmartCasts.acceptFooOfT<T>(localFoo!!)
  }

  @JvmStatic
  @ObjCName("testArguments")
  fun <T: Any> testArguments(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<T>
  ) {
   SmartCasts.acceptFooOfObjectAndT<T>(foo as SmartCasts.Foo<Any>, foo)
  }

  @JvmStatic
  @ObjCName("testFinalFieldAccess")
  fun <T: Any> testFinalFieldAccess(
   @ObjCName("withJ2ktnotpassingSmartCasts_Container") container: SmartCasts.Container<T>
  ) {
   SmartCasts.acceptFooOfObject(container.foo as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(container.foo)
  }

  @JvmStatic
  @ObjCName("testFinalFieldAccessThroughCastVariable")
  fun <T: Any> testFinalFieldAccessThroughCastVariable(
   @ObjCName("withJ2ktnotpassingSmartCasts_Container") container: SmartCasts.Container<T>
  ) {
   SmartCasts.acceptFooOfObject((container as SmartCasts.Container<Any>).foo)
   SmartCasts.acceptFooOfT<T>(container.foo)
  }

  @JvmStatic
  @ObjCName("testArray")
  fun <T: Any> testArray(
   @ObjCName("withNSObjectArray") a: Array<T>
  ) {
   SmartCasts.acceptArrayOfObject(a as Array<Any>)
   SmartCasts.acceptArrayOfT<T>(a)
  }

  @JvmStatic
  @ObjCName("testVararg")
  fun <T: Any> testVararg(
   vararg @ObjCName("withNSObjectArray") a: T
  ) {
   val a_1: Array<T> = a as Array<T>
   SmartCasts.acceptArrayOfObject(a_1 as Array<Any>)
   SmartCasts.acceptArrayOfT<T>(a_1)
  }

  @JvmStatic
  @ObjCName("acceptFooOfObject")
  fun acceptFooOfObject(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<Any>
  ) {}

  @JvmStatic
  @ObjCName("acceptFooOfT")
  fun <T: Any> acceptFooOfT(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<T>
  ) {}

  @JvmStatic
  @ObjCName("acceptFooOfObjectAndT")
  fun <T: Any> acceptFooOfObjectAndT(
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<Any>,
   @ObjCName("withJ2ktnotpassingSmartCasts_Foo") foo2: SmartCasts.Foo<T>
  ) {}

  @JvmStatic
  @ObjCName("acceptArrayOfObject")
  fun acceptArrayOfObject(
   @ObjCName("withNSObjectArray") a: Array<Any>
  ) {}

  @JvmStatic
  @ObjCName("acceptArrayOfT")
  fun <T: Any> acceptArrayOfT(
   @ObjCName("withNSObjectArray") a: Array<T>
  ) {}
 }

 @ObjCName("J2ktJ2ktnotpassingSmartCasts_Foo", exact = true)
 interface Foo<T: Any> {
  @ObjCName("testThisReference")
  fun testThisReference() {
   SmartCasts.acceptFooOfObject(this as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(this)
  }
 }

 @ObjCName("J2ktJ2ktnotpassingSmartCasts_Container", exact = true)
 class Container<T: Any> {
  @JvmField
  @ObjCName("foo_")
  val foo: SmartCasts.Foo<T>

  constructor(
   @ObjCName("J2ktnotpassingSmartCasts_Foo") foo: SmartCasts.Foo<T>
  ) {
   this.foo = foo
  }

  @ObjCName("testImplicitThisReference")
  fun testImplicitThisReference() {
   SmartCasts.acceptFooOfObject(this.foo as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(this.foo)
  }

  @ObjCName("testExplicitThisReference")
  fun testExplicitThisReference() {
   SmartCasts.acceptFooOfObject(this.foo as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(this.foo)
  }

  @ObjCName("testMixedThisReference")
  fun testMixedThisReference() {
   SmartCasts.acceptFooOfObject(this.foo as SmartCasts.Foo<Any>)
   SmartCasts.acceptFooOfT<T>(this.foo)
  }
 }
}
