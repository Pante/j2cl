// Generated from "j2ktnotpassing/DefaultNullable.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import j2ktnotpassing.NotNullable.Consumer
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class DefaultNullable {
 companion object {
  @JvmStatic
  internal fun testNonNullableLambdas_pp_j2ktnotpassing() {
   val methodReference: Consumer<String?> = Consumer { arg0: String ->
    DefaultNullable.accept_pp_j2ktnotpassing(arg0)
   }
  }

  @JvmStatic
  internal fun accept_pp_j2ktnotpassing(s: String?) {}
 }
}

open class NotNullable internal constructor() {
 fun interface Consumer<T> {
  fun accept(t: T)
 }
}

abstract class Ordering<T> internal constructor() {
 internal open fun <S: T> reverse_pp_j2ktnotpassing(): Ordering<S> {
  return null!!
 }

 companion object {
  @JvmStatic
  internal fun <E> reversed_pp_j2ktnotpassing(ordering: Ordering<in E>): Ordering<in E> {
   return ordering.reverse_pp_j2ktnotpassing<E>()
  }
 }
}
