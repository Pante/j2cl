// Generated from "j2ktnotpassing/StreamCollectWildcardProblem.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import java.lang.RuntimeException
import java.util.stream.Collector
import java.util.stream.Collectors
import java.util.stream.Stream
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingStreamCollectWildcardProblem", exact = true)
open class StreamCollectWildcardProblem {
 @ObjCName("J2ktJ2ktnotpassingStreamCollectWildcardProblemCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("test")
  fun test(
   @ObjCName("withJavaUtilStreamStream") list: Stream<StreamCollectWildcardProblem.Foo<*>?>?
  ) {
   StreamCollectWildcardProblem.accept(
    list!!.collect<MutableList<StreamCollectWildcardProblem.Foo<*>>, Any>(
     Collectors.toList<StreamCollectWildcardProblem.Foo<*>>() as Collector<StreamCollectWildcardProblem.Foo<*>, Any, MutableList<StreamCollectWildcardProblem.Foo<*>>>,
    ) as MutableList<StreamCollectWildcardProblem.Foo<*>?>?,
   )
  }

  @JvmStatic
  @ObjCName("accept")
  fun accept(
   @ObjCName("withJavaUtilList") list: MutableList<StreamCollectWildcardProblem.Foo<*>?>?
  ) {
   throw RuntimeException()
  }
 }

 @ObjCName("J2ktJ2ktnotpassingStreamCollectWildcardProblem_Foo", exact = true)
 interface Foo<T>
}
