// Generated from "j2ktnotpassing/NullabilityConversion.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class NullabilityConversion {
 interface Parent

 interface Child: Parent

 interface Generic<T: Parent?>

 interface ParentNullableBound<T>

 interface ChildNonNullBounds<T: Any>: ParentNullableBound<T>

 fun interface Supplier<T: Child?> {
  fun get(): T
 }

 open class Tests {
  open class Unions {
   companion object {
    @JvmStatic
    fun typeArgumentMixedToNonNull(): Child {
     try {
      throw RuntimeException()
     } catch (e: ExceptionNonNull1) {
      return e.get()
     } catch (e: ExceptionNullable1) {
      return e.get()
     }
    }
   }

   abstract class ExceptionNonNull1: RuntimeException(), Supplier<Child>

   abstract class ExceptionNullable1: RuntimeException(), Supplier<Child?>
  }
 }
}
