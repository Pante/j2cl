// Generated from "supercallnondefault/Child.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package supercallnondefault

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName(name = "J2ktSupercallnondefaultParent", swiftName = "SupercallnondefaultParent", exact = true)
open class Parent {
 @JvmField
 @ObjCName(name = "field_")
 var field: Int = 0

 constructor(
  @ObjCName(name = "Int") f: Int
 ) {
  this.field = f
 }
}

@ObjCName(name = "J2ktSupercallnondefaultChild", swiftName = "SupercallnondefaultChild", exact = true)
open class Child: Parent {
 constructor(
  @ObjCName(name = "Int") a: Int
 ): super(a)
}
