// Generated from "rawtype/RawType.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package rawtype

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktRawtypeRawType", swiftName = "RawtypeRawType", exact = true)
open class RawType internal constructor() {
 @JvmField
 internal var rawUnbound_pp_rawtype: Unbound<Any?>? = Unbound<Any?>()

 @JvmField
 internal var rawBound_pp_rawtype: Bound<RawType?>? = Bound<RawType?>()

 @JvmField
 internal var rawBoundRecursively_pp_rawtype: BoundRecursively<*>? = BoundRecursively()

 @JvmField
 internal var rawBoundDependentDirect_pp_rawtype: BoundDependentDirect<Any?, Any?>? = BoundDependentDirect<Any?, Any?>()

 @JvmField
 internal var rawBoundDependentIndirect_pp_rawtype: BoundDependentIndirect<Any?, Unbound<Any?>?>? = BoundDependentIndirect<Any?, Unbound<Any?>?>()

 @ObjCName("J2ktRawtypeRawType_Unbound", swiftName = "RawtypeRawType_Unbound", exact = true)
 open class Unbound<T> internal constructor() {
  internal open fun method_pp_rawtype(t: T): T {
   return t
  }
 }

 @ObjCName("J2ktRawtypeRawType_Bound", swiftName = "RawtypeRawType_Bound", exact = true)
 open class Bound<T: RawType?> internal constructor()

 @ObjCName("J2ktRawtypeRawType_BoundRecursively", swiftName = "RawtypeRawType_BoundRecursively", exact = true)
 open class BoundRecursively<T: BoundRecursively<T>?> internal constructor()

 @ObjCName("J2ktRawtypeRawType_BoundDependentDirect", swiftName = "RawtypeRawType_BoundDependentDirect", exact = true)
 open class BoundDependentDirect<A, B: A> internal constructor()

 @ObjCName("J2ktRawtypeRawType_BoundDependentIndirect", swiftName = "RawtypeRawType_BoundDependentIndirect", exact = true)
 open class BoundDependentIndirect<A, B: Unbound<A>?> internal constructor()

 @ObjCName("J2ktRawtypeRawType_RawUnboundChild", swiftName = "RawtypeRawType_RawUnboundChild", exact = true)
 open class RawUnboundChild internal constructor(): Unbound<Any?>() {
  override fun method_pp_rawtype(o: Any?): Any? {
   return super<Unbound>.method_pp_rawtype(o)
  }
 }

 @ObjCName("J2ktRawtypeRawType_GenericSuperclass", swiftName = "RawtypeRawType_GenericSuperclass", exact = true)
 interface GenericSuperclass<T: RawType?> {
  @ObjCName("f")
  fun f(
   @ObjCName("withRawtypeRawType", swiftName = "with") t: T
  ) {}
 }

 @ObjCName("J2ktRawtypeRawType_RawSubclass", swiftName = "RawtypeRawType_RawSubclass", exact = true)
 open class RawSubclass internal constructor(): GenericSuperclass<RawType?> {
  override fun f(t: RawType?) {}
 }
}
