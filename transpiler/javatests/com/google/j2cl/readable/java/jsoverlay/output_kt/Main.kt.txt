// Generated from "jsoverlay/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package jsoverlay

import javaemul.lang.*
import jsinterop.annotations.JsFunction
import jsinterop.annotations.JsOverlay
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktJsoverlayMain", swiftName = "JsoverlayMain", exact = true)
open class Main {
 @ObjCName(name = "test")
 open fun test() {
  val n: Main.NativeJsTypeWithOverlay? = Main.NativeJsTypeWithOverlay()
  n!!.callM()
  Main.NativeJsTypeWithOverlay.`fun`()
  Main.NativeJsTypeWithOverlay.n()
  Main.NativeJsTypeWithOverlay.bar_private_2()
  n!!.foo_private_2()
  val a: Int = Main.NativeJsTypeWithOverlayConstant.COMPILE_TIME_CONSTANT + Main.NativeJsTypeWithOverlay.nonJsOverlayField
  Main.NativeJsTypeWithOverlay.staticField = null
  Main.NativeJsTypeWithOverlay.varargs(1, 2, 3)
  n!!.baz_private_2()
  val b: String? = Main.NativeJsTypeWithOverlayConstant.STRING_COMPILE_TIME_CONSTANT + Main.NativeJsTypeInterfaceWithOverlay.staticField
 }

 @ObjCName(name = "testOverlayInterface")
 open fun testOverlayInterface(
  @ObjCName(name = "withJsoverlayMain_NativeJsTypeInterfaceWithOverlay") foo: Main.NativeJsTypeInterfaceWithOverlay?
 ) {
  foo!!.m()
  foo!!.callM()
 }

 @ObjCName(name = "J2ktJsoverlayMainCompanion", swiftName = "JsoverlayMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "testOverlayInterfaceImpl")
  fun testOverlayInterfaceImpl() {
   val foo: Main.NativeJsTypeInterfaceWithOverlay? = Main.NativeJsTypeInterfaceWithOverlayImpl()
   foo!!.m()
   foo!!.callM()
  }
 }

 @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeInterfaceWithOverlay", swiftName = "JsoverlayMain_NativeJsTypeInterfaceWithOverlay", exact = true)
 @JsType(namespace = "test.foo", isNative = true)
 fun interface NativeJsTypeInterfaceWithOverlay {
  @ObjCName(name = "m")
  fun m(): Int

  @ObjCName(name = "callM")
  @JsOverlay
  fun callM(): Int {
   return this@NativeJsTypeInterfaceWithOverlay.m()
  }

  @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeInterfaceWithOverlayCompanion", swiftName = "JsoverlayMain_NativeJsTypeInterfaceWithOverlayCompanion", exact = true)
  companion object {
   @JvmField
   @ObjCName(name = "staticField_")
   @JsOverlay
   val staticField: Any? = Any()
  }
 }

 @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeInterfaceWithOverlayImpl", swiftName = "JsoverlayMain_NativeJsTypeInterfaceWithOverlayImpl", exact = true)
 open class NativeJsTypeInterfaceWithOverlayImpl internal constructor(): Main.NativeJsTypeInterfaceWithOverlay {
  override fun m(): Int {
   return 0
  }
 }

 @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeWithOverlay", swiftName = "JsoverlayMain_NativeJsTypeWithOverlay", exact = true)
 @JsType(namespace = "test.foo", isNative = true)
 open class NativeJsTypeWithOverlay {
  @ObjCName(name = "m")
  external open fun m(): Int

  @ObjCName(name = "callM")
  @JsOverlay
  fun callM(): Int {
   return this.m()
  }

  @JsOverlay
  internal fun foo_private_2(): Int {
   return 1
  }

  @JsOverlay
  internal fun baz_private_2(): Int {
   return 1
  }

  @ObjCName(name = "overlayWithJsFunction")
  @JsOverlay
  fun overlayWithJsFunction() {
   object : Main.Intf {
    override fun run() {}
   }.run()
  }

  @ObjCName(name = "overlay")
  @JsOverlay
  fun overlay() {}

  @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeWithOverlayCompanion", swiftName = "JsoverlayMain_NativeJsTypeWithOverlayCompanion", exact = true)
  companion object {
   @JvmField
   @ObjCName(name = "nonJsOverlayField_")
   var nonJsOverlayField: Int = 0

   @JvmField
   @ObjCName(name = "staticField_")
   @JsOverlay
   var staticField: Any? = Any()

   @JvmStatic
   @ObjCName(name = "n")
   external fun n()

   @JvmStatic
   @ObjCName(name = "fun")
   @JsOverlay
   fun `fun`(): Int {
    return 1
   }

   @JvmStatic
   @JsOverlay
   internal fun bar_private_2(): Int {
    return 1
   }

   @JvmStatic
   @ObjCName(name = "varargs")
   @JsOverlay
   fun varargs(
    vararg @ObjCName(name = "withIntArray") a: Int
   ): Int {
    return a!![0]
   }

   @JvmStatic
   @ObjCName(name = "overlay")
   @JsOverlay
   fun overlay(
    @ObjCName(name = "withJsoverlayMain_NativeJsTypeWithOverlay") o: Main.NativeJsTypeWithOverlay?
   ) {}
  }
 }

 @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeWithOverlayConstant", swiftName = "JsoverlayMain_NativeJsTypeWithOverlayConstant", exact = true)
 @JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
 open class NativeJsTypeWithOverlayConstant internal constructor() {
  @ObjCName(name = "J2ktJsoverlayMain_NativeJsTypeWithOverlayConstantCompanion", swiftName = "JsoverlayMain_NativeJsTypeWithOverlayConstantCompanion", exact = true)
  companion object {
   @ObjCName(name = "COMPILE_TIME_CONSTANT_")
   @JsOverlay
   const val COMPILE_TIME_CONSTANT: Int = 10

   @ObjCName(name = "STRING_COMPILE_TIME_CONSTANT_")
   @JsOverlay
   const val STRING_COMPILE_TIME_CONSTANT: String = "10"
  }
 }

 @ObjCName(name = "J2ktJsoverlayMain_Intf", swiftName = "JsoverlayMain_Intf", exact = true)
 @JsFunction
 fun interface Intf {
  @ObjCName(name = "run")
  fun run()
 }
}

@ObjCName(name = "J2ktJsoverlayParameterizedNativeInterface", swiftName = "JsoverlayParameterizedNativeInterface", exact = true)
@JsType(name = "?", namespace = JsPackage.GLOBAL, isNative = true)
interface ParameterizedNativeInterface<T> {
 @ObjCName(name = "shadowsTypeVariable")
 @JsOverlay
 fun <T_1, S> shadowsTypeVariable(
  @ObjCName(name = "withId") param1: T_1,
  @ObjCName(name = "withId") param2: S
 ) {}

 @ObjCName(name = "shadowsTypeVariable")
 @JsOverlay
 fun <T_1, S> shadowsTypeVariable(
  @ObjCName(name = "withId") param1: T_1,
  @ObjCName(name = "withInt") param2: Int
 ) {}
}
