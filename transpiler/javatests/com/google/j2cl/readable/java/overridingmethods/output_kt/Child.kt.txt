// Generated from "overridingmethods/Child.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package overridingmethods

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktOverridingmethodsSomeInterface", swiftName = "OverridingmethodsSomeInterface", exact = true)
fun interface SomeInterface {
 @ObjCName(name = "interfaceMethod")
 fun interfaceMethod()
}

@ObjCName(name = "J2ktOverridingmethodsParent", swiftName = "OverridingmethodsParent", exact = true)
open class Parent internal constructor() {
 @ObjCName(name = "nonFinal")
 open fun nonFinal() {}

 @ObjCName(name = "finalInChild")
 open fun finalInChild() {}

 @ObjCName(name = "finalInParent")
 fun finalInParent() {}
}

@ObjCName(name = "J2ktOverridingmethodsChild", swiftName = "OverridingmethodsChild", exact = true)
open class Child internal constructor(): Parent(), SomeInterface {
 override fun nonFinal() {}

 final override fun finalInChild() {}

 override fun interfaceMethod() {}
}

@ObjCName(name = "J2ktOverridingmethodsFinalChild", swiftName = "OverridingmethodsFinalChild", exact = true)
class FinalChild internal constructor(): Parent(), SomeInterface {
 override fun nonFinal() {}

 override fun finalInChild() {}

 override fun interfaceMethod() {}
}
