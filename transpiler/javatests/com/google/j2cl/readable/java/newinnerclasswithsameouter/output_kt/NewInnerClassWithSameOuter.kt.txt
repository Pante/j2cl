// Generated from "newinnerclasswithsameouter/NewInnerClassWithSameOuter.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package newinnerclasswithsameouter

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNewinnerclasswithsameouterNewInnerClassWithSameOuter", swiftName = "NewinnerclasswithsameouterNewInnerClassWithSameOuter", exact = true)
open class NewInnerClassWithSameOuter {
 @ObjCName(name = "J2ktNewinnerclasswithsameouterNewInnerClassWithSameOuter_A", swiftName = "NewinnerclasswithsameouterNewInnerClassWithSameOuter_A", exact = true)
 open inner class A {
  @ObjCName(name = "test")
  open fun test() {
   this@NewInnerClassWithSameOuter.B()
   this@NewInnerClassWithSameOuter.C()
  }
 }

 @ObjCName(name = "J2ktNewinnerclasswithsameouterNewInnerClassWithSameOuter_B", swiftName = "NewinnerclasswithsameouterNewInnerClassWithSameOuter_B", exact = true)
 open inner class B

 @ObjCName(name = "J2ktNewinnerclasswithsameouterNewInnerClassWithSameOuter_C", swiftName = "NewinnerclasswithsameouterNewInnerClassWithSameOuter_C", exact = true)
 open inner class C internal constructor()
}
