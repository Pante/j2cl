// Generated from "nativekttypes/NullabilityPropagation.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nativekttypes

import javaemul.lang.*
import jsinterop.annotations.JsOptional
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNativekttypesNullabilityPropagation", swiftName = "NativekttypesNullabilityPropagation", exact = true)
class NullabilityPropagation {
 @ObjCName(name = "J2ktNativekttypesNullabilityPropagation_NullabilityToPropagate", swiftName = "NativekttypesNullabilityPropagation_NullabilityToPropagate", exact = true)
 interface NullabilityToPropagate<ExtendsNullable, ExtendsNonNull: Any> {
  @ObjCName(name = "nullableString1")
  fun nullableString1(
   @ObjCName(name = "withNSString") s: String?
  ): String?

  @ObjCName(name = "nullableString2")
  fun nullableString2(
   @ObjCName(name = "withNSString") s: String?
  ): String?

  @ObjCName(name = "nonNullString1")
  fun nonNullString1(
   @ObjCName(name = "withNSString") s: String
  ): String

  @ObjCName(name = "nonNullString2")
  fun nonNullString2(
   @ObjCName(name = "withNSString") s: String
  ): String

  @ObjCName(name = "nullableExtendsNullable1")
  fun nullableExtendsNullable1(
   @ObjCName(name = "withId") s: ExtendsNullable?
  ): ExtendsNullable?

  @ObjCName(name = "nullableExtendsNullable2")
  fun nullableExtendsNullable2(
   @ObjCName(name = "withId") s: ExtendsNullable?
  ): ExtendsNullable?

  @ObjCName(name = "nonNullExtendsNullable1")
  fun nonNullExtendsNullable1(
   @ObjCName(name = "withId") s: ExtendsNullable
  ): ExtendsNullable

  @ObjCName(name = "nonNullExtendsNullable2")
  fun nonNullExtendsNullable2(
   @ObjCName(name = "withId") s: ExtendsNullable
  ): ExtendsNullable

  @ObjCName(name = "nullableExtendsNonNull1")
  fun nullableExtendsNonNull1(
   @ObjCName(name = "withId") s: ExtendsNonNull?
  ): ExtendsNonNull?

  @ObjCName(name = "nullableExtendsNonNull2")
  fun nullableExtendsNonNull2(
   @ObjCName(name = "withId") s: ExtendsNonNull?
  ): ExtendsNonNull?

  @ObjCName(name = "nonNullExtendsNonNull1")
  fun nonNullExtendsNonNull1(
   @ObjCName(name = "withId") s: ExtendsNonNull
  ): ExtendsNonNull

  @ObjCName(name = "nonNullExtendsNonNull2")
  fun nonNullExtendsNonNull2(
   @ObjCName(name = "withId") s: ExtendsNonNull
  ): ExtendsNonNull

  @ObjCName(name = "nonNullStringTransitive")
  fun nonNullStringTransitive(
   @ObjCName(name = "withNSString") s: String
  ): String

  @ObjCName(name = "nonNullStringDoubleOverride")
  fun nonNullStringDoubleOverride(
   @ObjCName(name = "withNSString") s: String
  ): String

  @ObjCName(name = "jsOptionalParameter")
  fun jsOptionalParameter(
   @ObjCName(name = "withNSString") @JsOptional s: String?
  ): String
 }

 @ObjCName(name = "J2ktNativekttypesNullabilityPropagation_Interface", swiftName = "NativekttypesNullabilityPropagation_Interface", exact = true)
 fun interface Interface {
  @ObjCName(name = "nonNullStringDoubleOverride")
  fun nonNullStringDoubleOverride(
   @ObjCName(name = "withNSString") s: String
  ): String
 }

 @ObjCName(name = "J2ktNativekttypesNullabilityPropagation_Subtype", swiftName = "NativekttypesNullabilityPropagation_Subtype", exact = true)
 open inner class Subtype internal constructor(): NullabilityPropagation.NullabilityToPropagate<String?, String>, NullabilityPropagation.Interface {
  override fun nullableString1(s: String?): String? {
   return s
  }

  override fun nullableString2(s: String?): String {
   return s!!
  }

  override fun nonNullString1(s: String): String {
   return s
  }

  override fun nonNullString2(s: String): String {
   return s
  }

  override fun nullableExtendsNullable1(s: String?): String? {
   return s
  }

  override fun nullableExtendsNullable2(s: String?): String {
   return s!!
  }

  override fun nonNullExtendsNullable1(s: String?): String? {
   return s
  }

  override fun nonNullExtendsNullable2(s: String?): String {
   return s!!
  }

  override fun nullableExtendsNonNull1(s: String?): String? {
   return s
  }

  override fun nullableExtendsNonNull2(s: String?): String {
   return s!!
  }

  override fun nonNullExtendsNonNull1(s: String): String {
   return s
  }

  override fun nonNullExtendsNonNull2(s: String): String {
   return s
  }

  override fun nonNullStringTransitive(s: String): String {
   return s
  }

  override fun nonNullStringDoubleOverride(s: String): String {
   return s
  }

  override fun jsOptionalParameter(@JsOptional s: String?): String {
   return s!!
  }
 }

 @ObjCName(name = "J2ktNativekttypesNullabilityPropagation_SubSubType", swiftName = "NativekttypesNullabilityPropagation_SubSubType", exact = true)
 open inner class SubSubType internal constructor(): NullabilityPropagation.Subtype() {
  override fun nonNullStringTransitive(s: String): String {
   return s
  }
 }
}
