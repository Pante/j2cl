// Generated from "nativekttypes/KtPropertyNameConflict.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nativekttypes

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNativekttypesKtPropertyNameConflict", swiftName = "NativekttypesKtPropertyNameConflict", exact = true)
abstract class KtPropertyNameConflict {
 @JvmField
 @ObjCName(name = "fieldWithConflictingGetter_")
 var fieldWithConflictingGetter_ktPropertyConflict: Int = 0

 @JvmField
 @ObjCName(name = "fieldWithConflictingNonGetter_")
 var fieldWithConflictingNonGetter_ktPropertyConflict: Int = 0

 @JvmField
 @ObjCName(name = "fieldWithConflictingRenamedMethod_")
 var fieldWithConflictingRenamedMethod_ktPropertyConflict: Int = 0

 @ObjCName(name = "fieldWithConflictingGetter")
 open val fieldWithConflictingGetter: Int
  get() {
   return this.fieldWithConflictingGetter_ktPropertyConflict
  }

 @ObjCName(name = "fieldWithConflictingNonGetter")
 open val fieldWithConflictingNonGetter: Int
  get() {
   return this.fieldWithConflictingNonGetter_ktPropertyConflict
  }

 @ObjCName(name = "fieldWithConflictingRenamedMethod")
 open val fieldWithConflictingRenamedMethod: Int
  get() {
   return this.fieldWithConflictingRenamedMethod_ktPropertyConflict
  }

 @ObjCName(name = "fieldWithConflictingSuperMethod")
 open val fieldWithConflictingSuperMethod: Int
  get() {
   return 0
  }

 @ObjCName(name = "J2ktNativekttypesKtPropertyNameConflictCompanion", swiftName = "NativekttypesKtPropertyNameConflictCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "test")
  fun test(
   @ObjCName(name = "withNativekttypesKtPropertyNameConflict") o: KtPropertyNameConflict?,
   @ObjCName(name = "withNativekttypesKtPropertyNameConflict_Interface") i: KtPropertyNameConflict.Interface?
  ) {
   val fieldWithConflictingGetter: Int = o!!.fieldWithConflictingGetter_ktPropertyConflict
   val conflictingGetter: Int = o!!.fieldWithConflictingGetter
   val fieldWithConflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter_ktPropertyConflict
   val conflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter
   val fieldWithConflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod_ktPropertyConflict
   val conflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod
   val conflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod
   val conflictingInterfaceMethod: Int = i!!.fieldWithConflictingInterfaceMethod
  }

  @JvmStatic
  @ObjCName(name = "test")
  fun test(
   @ObjCName(name = "withNativekttypesKtPropertyNameConflict_Subclass") o: KtPropertyNameConflict.Subclass?
  ) {
   val fieldWithConflictingGetter: Int = o!!.fieldWithConflictingGetter_ktPropertyConflict
   val conflictingGetter: Int = o!!.fieldWithConflictingGetter
   val fieldWithConflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter_ktPropertyConflict
   val conflictingNonGetter: Int = o!!.fieldWithConflictingNonGetter
   val fieldWithConflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod_ktPropertyConflict
   val conflictingRenamedMethod: Int = o!!.fieldWithConflictingRenamedMethod
   val fieldWithConflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod_pp_nativekttypes
   val conflictingSuperMethod: Int = o!!.fieldWithConflictingSuperMethod
   val fieldWithConflictingInterfaceMethod: Int = o!!.fieldWithConflictingInterfaceMethod_pp_nativekttypes
   val conflictingInterfaceMethod: Int = o!!.fieldWithConflictingInterfaceMethod
  }
 }

 @ObjCName(name = "J2ktNativekttypesKtPropertyNameConflict_Interface", swiftName = "NativekttypesKtPropertyNameConflict_Interface", exact = true)
 interface Interface {
  @ObjCName(name = "fieldWithConflictingInterfaceMethod")
  val fieldWithConflictingInterfaceMethod: Int
 }

 @ObjCName(name = "J2ktNativekttypesKtPropertyNameConflict_Subclass", swiftName = "NativekttypesKtPropertyNameConflict_Subclass", exact = true)
 abstract inner class Subclass: KtPropertyNameConflict(), KtPropertyNameConflict.Interface {
  @JvmField
  internal var fieldWithConflictingSuperMethod_pp_nativekttypes: Int = 0

  @JvmField
  internal var fieldWithConflictingInterfaceMethod_pp_nativekttypes: Int = 0

  override val fieldWithConflictingInterfaceMethod: Int
   get() {
    return this.fieldWithConflictingInterfaceMethod_pp_nativekttypes
   }
 }
}
