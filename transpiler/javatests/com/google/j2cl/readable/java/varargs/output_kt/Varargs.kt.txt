// Generated from "varargs/Varargs.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package varargs

import javaemul.lang.*
import java.io.Serializable
import kotlin.Any
import kotlin.Array
import kotlin.Cloneable
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktVarargsVarargs", swiftName = "VarargsVarargs", exact = true)
open class Varargs {
 private var args: Array<Any?>? = null

 constructor(
  vararg @ObjCName(name = "IntArray") args: Int
 )

 constructor(): this(1)

 @ObjCName(name = "test")
 open fun test(
  @ObjCName(name = "withInt") a: Int,
  vararg @ObjCName(name = "withNSObjectArray") args: Any?
 ) {
  val args_1: Array<Any?>? = args as Array<Any?>?
 }

 @ObjCName(name = "testCloneable")
 open fun testCloneable(
  vararg @ObjCName(name = "withNSCopyingArray") args: Cloneable?
 ) {
  val args_1: Array<Cloneable?>? = args as Array<Cloneable?>?
 }

 @ObjCName(name = "testSerializable")
 open fun testSerializable(
  vararg @ObjCName(name = "withJavaIoSerializableArray") args: Serializable?
 ) {
  val args_1: Array<Serializable?>? = args as Array<Serializable?>?
 }

 @ObjCName(name = "testAssignment")
 open fun testAssignment(
  vararg @ObjCName(name = "withNSObjectArray") args: Any?
 ) {
  val args_1: Array<Any?>? = args as Array<Any?>?
  this.args = args_1
 }

 @ObjCName(name = "testLambda")
 open fun testLambda(
  @ObjCName(name = "withVarargsVarargs_FunctionalInterface") functionalInterface: Varargs.FunctionalInterface?
 ) {}

 @ObjCName(name = "testOverloaded")
 open fun testOverloaded(
  @ObjCName(name = "withId") o: Any?
 ) {}

 @ObjCName(name = "testOverloaded")
 open fun testOverloaded(
  @ObjCName(name = "withNSString") o: String?,
  vararg @ObjCName(name = "withNSObjectArray") rest: Any?
 ) {
  val rest_1: Array<Any?>? = rest as Array<Any?>?
 }

 @ObjCName(name = "testOverloaded")
 open fun testOverloaded(
  @ObjCName(name = "withLong") l: Long
 ) {}

 @ObjCName(name = "testOverloaded")
 open fun testOverloaded(
  @ObjCName(name = "withLong") l: Long,
  vararg @ObjCName(name = "withLongArray") rest: Long
 ) {}

 @ObjCName(name = "main")
 open fun main() {
  val v: Varargs = Varargs()
  v.test(1)
  v.test(
   1,
   Any(),
  )
  v.test(
   1,
   *arrayOf<Any?>(Any())!!,
  )
  v.test(
   1,
   *arrayOf<Any?>()!!,
  )
  v.test(
   1,
   *(arrayOf<Array<Any?>?>() as Array<Any?>?)!!,
  )
  v.test(
   1,
   *(Varargs.passthrough<Array<String?>?>(
    arrayOf<String?>("a"),
   ) as Array<Any?>?)!!,
  )
  v.test(
   1,
   *null!!,
  )
  v.testCloneable(
   *(arrayOf<Array<Any?>?>() as Array<Cloneable?>?)!!,
  )
  v.testSerializable(
   *(arrayOf<Array<Any?>?>() as Array<Serializable?>?)!!,
  )
  v.testLambda(
   Varargs.FunctionalInterface { it: Array<out String?>? ->
    val it_1: Array<String?>? = it as Array<String?>?
    this.args = it_1 as Array<Any?>?
   },
  )
  v.testOverloaded(
   "foo" as Any?,
  )
  v.testOverloaded("foo", "bar")
  v.testOverloaded(
   "foo" as Any,
  )
  v.testOverloaded(
   1.toLong(),
  )
  v.testOverloaded(
   java.lang.Long.valueOf(1L) as Any?,
  )
  v.testOverloaded(1L)
  v.testOverloaded(1L, 2L, 3L)
  v.testOverloaded(
   1.toLong(),
   2L,
   3L,
  )
 }

 @ObjCName(name = "J2ktVarargsVarargsCompanion", swiftName = "VarargsVarargsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "fun")
  fun <T: Number?> `fun`(
   vararg @ObjCName(name = "withNSNumberArray") elements: T
  ) {
   val elements_1: Array<T>? = elements as Array<T>?
  }

  @JvmStatic
  @ObjCName(name = "bar")
  fun <E: Number?> bar(
   @ObjCName(name = "withNSNumber") a: E,
   @ObjCName(name = "withNSNumber") b: E
  ) {
   Varargs.`fun`<E>(a, b)
  }

  @JvmStatic
  @ObjCName(name = "passthrough")
  fun <T> passthrough(
   @ObjCName(name = "withId") o: T
  ): T {
   return o
  }
 }

 @ObjCName(name = "J2ktVarargsVarargs_FunctionalInterface", swiftName = "VarargsVarargs_FunctionalInterface", exact = true)
 fun interface FunctionalInterface {
  @ObjCName(name = "apply")
  fun apply(
   vararg @ObjCName(name = "withNSStringArray") strings: String?
  )
 }
}

@ObjCName(name = "J2ktVarargsChild", swiftName = "VarargsChild", exact = true)
open class Child: Varargs {
 constructor(): super(1)
}
