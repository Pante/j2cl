// Generated from "markimplementornativetypes/Foo.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package markimplementornativetypes

import javaemul.lang.*
import jsinterop.annotations.JsType
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktMarkimplementornativetypesMyNativeInterface", swiftName = "MarkimplementornativetypesMyNativeInterface", exact = true)
@JsType(namespace = "test.foo", isNative = true)
interface MyNativeInterface

@ObjCName(name = "J2ktMarkimplementornativetypesRegularInterface", swiftName = "MarkimplementornativetypesRegularInterface", exact = true)
interface RegularInterface

@ObjCName(name = "J2ktMarkimplementornativetypesSubNativeInterface", swiftName = "MarkimplementornativetypesSubNativeInterface", exact = true)
interface SubNativeInterface: MyNativeInterface, RegularInterface

@ObjCName(name = "J2ktMarkimplementornativetypesFoo", swiftName = "MarkimplementornativetypesFoo", exact = true)
open class Foo: MyNativeInterface, RegularInterface
