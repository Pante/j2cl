// Generated from "genericinterfaceabstractimpl/AbstractImpl.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package genericinterfaceabstractimpl

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktGenericinterfaceabstractimplMyInterface", swiftName = "GenericinterfaceabstractimplMyInterface", exact = true)
interface MyInterface<T> {
 @ObjCName(name = "fun")
 fun `fun`(
  @ObjCName(name = "withId") t: T
 ): T

 @ObjCName(name = "g")
 fun <T_1> g(
  @ObjCName(name = "withId") t: T_1
 )
}

@ObjCName(name = "J2ktGenericinterfaceabstractimplAbstractImpl", swiftName = "GenericinterfaceabstractimplAbstractImpl", exact = true)
abstract class AbstractImpl: MyInterface<Int?>
