// Generated from "foreachstatement/ForEachStatement.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package foreachstatement

import javaemul.lang.*
import javaemul.lang.JavaIterable
import kotlin.Any
import kotlin.Char
import kotlin.Exception
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Throwable
import kotlin.arrayOfNulls
import kotlin.collections.MutableIterable
import kotlin.collections.MutableIterator
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.Throws
import kotlin.native.ObjCName

@ObjCName("J2ktForeachstatementForEachStatement", exact = true)
open class ForEachStatement {
 @ObjCName("test")
 open fun test(
  @ObjCName("withJavaLangIterable") iterable: MutableIterable<Throwable?>?
 ) {
  for (t in iterable!!) {
   val t_1: Throwable? = t
   t_1!!.toString()
  }
  for (t_2 in arrayOfNulls<Throwable>(10)) {
   val t_3: Throwable? = t_2
   t_3!!.toString()
  }
 }

 @Throws(Exception::class)
 internal fun testMulticatch_private_2() {
  try {
   throw java.lang.Exception()
  } catch (e: ForEachStatement.Exception1) {
   for (o in e!!) {
    val o_1: Number? = o
   }
  } catch (e: ForEachStatement.Exception2) {
   for (o in e!!) {
    val o_1: Number? = o
   }
  } catch (e_1: ForEachStatement.Exception3) {
   for (o_2 in e_1!!) {
    val o_3: Any? = o_2
   }
  } catch (e_1: ForEachStatement.Exception4) {
   for (o_2 in e_1!!) {
    val o_3: Any? = o_2
   }
  }
  try {
   throw java.lang.Exception()
  } catch (e_2: ForEachStatement.Exception2) {
   for (o_4 in e_2!!) {
    val o_5: Long = o_4!!
   }
  } catch (e_2: ForEachStatement.Exception3) {
   for (o_4 in e_2!!) {
    val o_5: Long = o_4!!
   }
  }
 }

 internal fun <T: MutableIterable<String?>?, U: T, V: MutableIterable<Int?>?> testTypeVariable_private_2() {
  val iterable: U? = null
  for (s in iterable!!) {
   val s_1: String? = s
  }
  val anotherIterable: ForEachStatement.IterableReturningTypeVariable<*, *>? = null
  for (s_2 in anotherIterable!!) {
   val s_3: Int = s_2!!
  }
  val integerIterable: V? = null
  for (i in integerIterable!!) {
   val i_1: Int = i!!
  }
  for (i_2 in integerIterable!!) {
   val i_3: Long = i_2!!
  }
  val charIterable: MutableIterable<Char?>? = null
  for (c in charIterable!!) {
   val c_1: Int = c!!
  }
 }

 open class Exception1 internal constructor(): java.lang.Exception(), JavaIterable<Number?> {
  override fun iterator(): MutableIterator<Number?> {
   return null!!
  }
 }

 open class Exception2 internal constructor(): java.lang.Exception(), JavaIterable<Int?> {
  override fun iterator(): MutableIterator<Int?> {
   return null!!
  }
 }

 open class Exception3 internal constructor(): java.lang.Exception(), JavaIterable<Int?> {
  override fun iterator(): MutableIterator<Int?> {
   return null!!
  }
 }

 open class Exception4 internal constructor(): java.lang.Exception(), JavaIterable<Any?> {
  override fun iterator(): MutableIterator<Any?> {
   return null!! as MutableIterator<Any?>
  }
 }

 open class IterableReturningTypeVariable<U, T: MutableIterator<Int?>> internal constructor(): JavaIterable<Int?> {
  override fun iterator(): T {
   return null!!
  }
 }
}
