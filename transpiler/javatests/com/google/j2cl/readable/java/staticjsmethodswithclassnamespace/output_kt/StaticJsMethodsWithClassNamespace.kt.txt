// Generated from "staticjsmethodswithclassnamespace/StaticJsMethodsWithClassNamespace.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package staticjsmethodswithclassnamespace

import javaemul.lang.*
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsType
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktStaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespace", swiftName = "StaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespace", exact = true)
@JsType(namespace = "woo")
open class StaticJsMethodsWithClassNamespace {
 @ObjCName(name = "test")
 open fun test() {
  StaticJsMethodsWithClassNamespace.originalName()
  StaticJsMethodsWithClassNamespace.originalName()
 }

 @ObjCName(name = "J2ktStaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespaceCompanion", swiftName = "StaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespaceCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "originalName")
  @JsMethod(name = "replacedName")
  fun originalName() {}
 }
}

@ObjCName(name = "J2ktStaticjsmethodswithclassnamespaceExternalCaller", swiftName = "StaticjsmethodswithclassnamespaceExternalCaller", exact = true)
open class ExternalCaller internal constructor() {
 @ObjCName(name = "test")
 open fun test() {
  StaticJsMethodsWithClassNamespace.originalName()
 }
}
