// Generated from "importglobaljstypes/RegExp.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package importglobaljstypes

import javaemul.lang.*
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktImportglobaljstypesRegExp", swiftName = "ImportglobaljstypesRegExp", exact = true)
class RegExp internal constructor() {
 @ObjCName(name = "J2ktImportglobaljstypesRegExpCompanion", swiftName = "ImportglobaljstypesRegExpCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "test")
  fun test() {
   val regExp: RegExp.NativeRegExp = RegExp.NativeRegExp("teststring")
   regExp.test("restString")
   val str: String? = regExp.toString()
  }
 }

 @ObjCName(name = "J2ktImportglobaljstypesRegExp_NativeRegExp", swiftName = "ImportglobaljstypesRegExp_NativeRegExp", exact = true)
 @JsType(name = "RegExp", namespace = JsPackage.GLOBAL, isNative = true)
 open class NativeRegExp {
  constructor(
   @ObjCName(name = "NSString") pattern: String?
  )

  @ObjCName(name = "test")
  external open fun test(
   @ObjCName(name = "withNSString") value: String?
  ): Boolean

  external override fun toString(): String
 }
}
