// Generated from "nativejstypes/Nullability.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nativejstypes

import javaemul.lang.*
import jsinterop.annotations.JsType
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName(name = "J2ktNativejstypesNullability", swiftName = "NativejstypesNullability", exact = true)
@JsType(isNative = true)
open class Nullability {
 @ObjCName(name = "acceptsNull")
 external open fun acceptsNull(
  @ObjCName(name = "withNSString") arg: String?
 )

 @ObjCName(name = "doesNotAcceptNull")
 external open fun doesNotAcceptNull(
  @ObjCName(name = "withNSString") arg: String
 )
}

@ObjCName(name = "J2ktNativejstypesNullabilityNullMarked", swiftName = "NativejstypesNullabilityNullMarked", exact = true)
@JsType(name = "Nullability", isNative = true)
open class NullabilityNullMarked internal constructor() {
 @ObjCName(name = "acceptsNull")
 external open fun acceptsNull(
  @ObjCName(name = "withNSString") arg: String?
 )

 @ObjCName(name = "doesNotAcceptNull")
 external open fun doesNotAcceptNull(
  @ObjCName(name = "withNSString") arg: String
 )
}
