// Generated from "bridgemethods/BridgeMethodShadowedSignature.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package bridgemethods

import javaemul.lang.*
import java.util.function.Consumer
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktBridgemethodsBridgeMethodShadowedSignature", swiftName = "BridgemethodsBridgeMethodShadowedSignature", exact = true)
open class BridgeMethodShadowedSignature {
 @ObjCName("J2ktBridgemethodsBridgeMethodShadowedSignature_I", swiftName = "BridgemethodsBridgeMethodShadowedSignature_I", exact = true)
 fun interface I<I1> {
  @ObjCName("get")
  fun get(
   @ObjCName("withJavaUtilFunctionConsumer", swiftName = "with") consumer: Consumer<in I1>?
  ): String?
 }

 @ObjCName("J2ktBridgemethodsBridgeMethodShadowedSignature_B", swiftName = "BridgemethodsBridgeMethodShadowedSignature_B", exact = true)
 abstract class B<B1, B2> internal constructor(): BridgeMethodShadowedSignature.I<B1> {
  @ObjCName("get")
  open fun get(
   @ObjCName("withId") consumer: B2
  ): String? {
   return "B get B2"
  }
 }

 @ObjCName("J2ktBridgemethodsBridgeMethodShadowedSignature_C", swiftName = "BridgemethodsBridgeMethodShadowedSignature_C", exact = true)
 open class C<C1> internal constructor(): BridgeMethodShadowedSignature.B<C1, Consumer<in C1>?>(), BridgeMethodShadowedSignature.I<C1>
}
