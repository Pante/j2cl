// Generated from "typewildcards/TypeWildCards.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package typewildcards

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName(name = "J2ktTypewildcardsFunction", swiftName = "TypewildcardsFunction", exact = true)
fun interface Function<I, O> {
 @ObjCName(name = "apply")
 fun apply(
  @ObjCName(name = "withId") i: I
 ): O
}

@ObjCName(name = "J2ktTypewildcardsList", swiftName = "TypewildcardsList", exact = true)
interface List<I>

@ObjCName(name = "J2ktTypewildcardsGenericType", swiftName = "TypewildcardsGenericType", exact = true)
open class GenericType<T> internal constructor() {
 internal open fun get_pp_typewildcards(): T {
  return null as T
 }
}

@ObjCName(name = "J2ktTypewildcardsBar", swiftName = "TypewildcardsBar", exact = true)
open class Bar internal constructor()

@ObjCName(name = "J2ktTypewildcardsRecursiveType", swiftName = "TypewildcardsRecursiveType", exact = true)
open class RecursiveType<T: RecursiveType<T>?> {
 constructor(
  @ObjCName(name = "TypewildcardsRecursiveType") wildcardParameter: RecursiveType<*>?
 )
}

@ObjCName(name = "J2ktTypewildcardsDeepRecursiveType", swiftName = "TypewildcardsDeepRecursiveType", exact = true)
interface DeepRecursiveType<T: GenericType<in T>?>

@ObjCName(name = "J2ktTypewildcardsRecursiveSubtype", swiftName = "TypewildcardsRecursiveSubtype", exact = true)
open class RecursiveSubtype: RecursiveType<RecursiveSubtype?> {
 constructor(
  @ObjCName(name = "TypewildcardsRecursiveType") wildcardParameter: RecursiveType<*>?
 ): super(wildcardParameter)
}

@ObjCName(name = "J2ktTypewildcardsTypeWildCards", swiftName = "TypewildcardsTypeWildCards", exact = true)
open class TypeWildCards {
 @ObjCName(name = "unbounded")
 open fun unbounded(
  @ObjCName(name = "withTypewildcardsGenericType") g: GenericType<*>?
 ): Any? {
  return g!!.get_pp_typewildcards()
 }

 @ObjCName(name = "upperBound")
 open fun upperBound(
  @ObjCName(name = "withTypewildcardsGenericType") g: GenericType<out Bar?>?
 ): Bar? {
  return g!!.get_pp_typewildcards()
 }

 @ObjCName(name = "lowerBound")
 open fun lowerBound(
  @ObjCName(name = "withTypewildcardsGenericType") g: GenericType<in Bar?>?
 ): Any? {
  return g!!.get_pp_typewildcards()
 }

 @ObjCName(name = "unboundedRecursive")
 open fun unboundedRecursive(
  @ObjCName(name = "withTypewildcardsRecursiveType") g: RecursiveType<*>?
 ) {}

 @ObjCName(name = "upperBoundRecursive")
 open fun upperBoundRecursive(
  @ObjCName(name = "withTypewildcardsGenericType") g: GenericType<out RecursiveType<*>?>?
 ) {}

 @ObjCName(name = "lowerBoundRecursive")
 open fun lowerBoundRecursive(
  @ObjCName(name = "withTypewildcardsGenericType") g: GenericType<in RecursiveType<*>?>?
 ) {}

 @ObjCName(name = "deepRecursiveType")
 open fun deepRecursiveType(
  @ObjCName(name = "withTypewildcardsDeepRecursiveType") t: DeepRecursiveType<*>?
 ) {}

 @ObjCName(name = "test")
 open fun test() {
  this.unbounded(
   GenericType<Bar?>(),
  )
  this.upperBound(
   GenericType<Bar?>(),
  )
  this.lowerBound(
   GenericType<Bar?>(),
  )
 }

 @ObjCName(name = "testInferredGenericIntersection")
 open fun testInferredGenericIntersection() {
  val elements: List<TypeWildCards.Element?>? = null
  val otherElements: List<TypeWildCards.SubOtherElement?>? = null
  val integers: List<Int?>? = TypeWildCards.transform/* <Any? & TypeWildCards.HasKey? & TypeWildCards.IntegerSupplier?, Int?> */(
   TypeWildCards.concat/* <Any? & TypeWildCards.HasKey? & TypeWildCards.IntegerSupplier?> */(elements, otherElements),
   Function/* <in Any? & TypeWildCards.HasKey? & TypeWildCards.IntegerSupplier?, out Int?> */ { a /* Any? & TypeWildCards.HasKey? & TypeWildCards.IntegerSupplier? */ ->
    a!!.getKey()
    return@Function a!!.get()
   },
  )
 }

 @ObjCName(name = "testRecursiveGeneric")
 open fun testRecursiveGeneric() {
  TypeWildCards.takesRecursiveGeneric(
   Foo(),
  )
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCardsCompanion", swiftName = "TypewildcardsTypeWildCardsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName(name = "testBoundedTypeMemberAccess")
  fun <T: TypeWildCards.A?> testBoundedTypeMemberAccess(
   @ObjCName(name = "withTypewildcardsTypeWildCards_A") t: T
  ) {
   val i: Int = t!!.f_pp_typewildcards
   t!!.m()
  }

  @JvmStatic
  @ObjCName(name = "testIntersectionBoundedTypeMemberAccess")
  fun <T> testIntersectionBoundedTypeMemberAccess(
   @ObjCName(name = "withId") t: T
  ) where T: TypeWildCards.A?, T: TypeWildCards.Y? {
   val i: Int = t!!.f_pp_typewildcards
   t!!.m()
   t!!.n()
  }

  @JvmStatic
  private fun <F, V> transform(from: List<F>?, function: Function<in F, out V>?): List<V>? {
   return null
  }

  @JvmStatic
  private fun <E> concat(a: List<out E>?, b: List<out E>?): List<E>? {
   return null
  }

  @JvmStatic
  private fun takesRecursiveGeneric(foo: GenericType<TypeWildCards.Foo?>?) {}

  @JvmStatic
  @ObjCName(name = "testInferredIntersectionWithTypeVariable")
  fun <C> testInferredIntersectionWithTypeVariable(
   @ObjCName(name = "withTypewildcardsTypeWildCards_RecursiveInterface") ri: TypeWildCards.RecursiveInterface<out C, C>?
  ): C {
   return ri!!.m()
  }

  @JvmStatic
  internal fun <D> createMultipleGenerics_pp_typewildcards(foo: List<D>?): TypeWildCards.MultipleGenerics<D, String?, List<D>?>? {
   return TypeWildCards.MultipleGenerics<D, String?, List<D>?>()
  }

  @JvmField
  internal var listWithWildcard_pp_typewildcards: List<*>? = null

  @JvmField
  internal var valMultipleGenerics_pp_typewildcards: TypeWildCards.MultipleGenerics<*, String?, *>? = TypeWildCards.createMultipleGenerics_pp_typewildcards/* <*> */(
   TypeWildCards.listWithWildcard_pp_typewildcards,
  )
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_X", swiftName = "TypewildcardsTypeWildCards_X", exact = true)
 fun interface X {
  @ObjCName(name = "m")
  fun m()
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_Y", swiftName = "TypewildcardsTypeWildCards_Y", exact = true)
 fun interface Y {
  @ObjCName(name = "n")
  fun n()
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_A", swiftName = "TypewildcardsTypeWildCards_A", exact = true)
 open class A internal constructor(): TypeWildCards.X {
  @JvmField
  internal var f_pp_typewildcards: Int = 0

  override fun m() {}
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_IntegerSupplier", swiftName = "TypewildcardsTypeWildCards_IntegerSupplier", exact = true)
 fun interface IntegerSupplier {
  @ObjCName(name = "get")
  fun get(): Int?
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_HasKey", swiftName = "TypewildcardsTypeWildCards_HasKey", exact = true)
 fun interface HasKey {
  @ObjCName(name = "getKey")
  fun getKey(): String?
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_Element", swiftName = "TypewildcardsTypeWildCards_Element", exact = true)
 abstract inner class Element: TypeWildCards.HasKey, TypeWildCards.IntegerSupplier

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_OtherElement", swiftName = "TypewildcardsTypeWildCards_OtherElement", exact = true)
 abstract inner class OtherElement: TypeWildCards.IntegerSupplier, TypeWildCards.HasKey

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_SubOtherElement", swiftName = "TypewildcardsTypeWildCards_SubOtherElement", exact = true)
 abstract inner class SubOtherElement: TypeWildCards.OtherElement(), TypeWildCards.HasKey

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_Foo", swiftName = "TypewildcardsTypeWildCards_Foo", exact = true)
 open inner class Foo internal constructor(): GenericType<TypeWildCards.Foo?>()

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_RecursiveInterface", swiftName = "TypewildcardsTypeWildCards_RecursiveInterface", exact = true)
 fun interface RecursiveInterface<T: TypeWildCards.RecursiveInterface<T, C>?, C> {
  @ObjCName(name = "m")
  fun m(): T
 }

 @ObjCName(name = "J2ktTypewildcardsTypeWildCards_MultipleGenerics", swiftName = "TypewildcardsTypeWildCards_MultipleGenerics", exact = true)
 open class MultipleGenerics<A, B, C> internal constructor()
}
