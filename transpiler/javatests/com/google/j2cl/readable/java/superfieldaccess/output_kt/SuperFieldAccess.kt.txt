// Generated from "superfieldaccess/SuperFieldAccess.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package superfieldaccess

import javaemul.lang.*
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmField

open class SuperFieldAccess {
 open class GrandParent internal constructor() {
  @JvmField
  var name: String? = "GrandParent"
 }

 open class Parent: GrandParent {
  @JvmField
  internal val name_pp_superfieldaccess: String?

  internal constructor(from: String?) {
   this.name_pp_superfieldaccess = "Parent (from " + from + ")"
  }

  open fun getParentName(): String? {
   return super.name
  }
 }

 open class Child: Parent {
  @JvmField
  internal val name_pp_superfieldaccess: String?

  internal constructor(): this("Child")

  internal constructor(from: String?): super(from) {
   this.name_pp_superfieldaccess = "Child (from " + from + ")"
  }

  override fun getParentName(): String? {
   return super.name_pp_superfieldaccess
  }

  open fun getGrandParentName(): String? {
   return super<Parent>.getParentName()
  }

  open inner class Inner constructor(): Parent("Inner") {
   open fun getOuterParentName(): String? {
    return super.name_pp_superfieldaccess
   }

   open inner class InnerInner internal constructor() {
    open fun getOuterParentNameQualified(): String? {
     return super.name_pp_superfieldaccess
    }
   }
  }
 }
}
